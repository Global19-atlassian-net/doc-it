<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.1 Maintainer: curcio_it Status: ready -->
 <reference id="ref.overload">
  <title>Proprietà object e method call overloading</title>
  <titleabbrev>Overloading degli object</titleabbrev>

  <partintro id="overload.partintro">
   &warn.experimental;
   <para>
    Lo scopo di questa estensione è di permettere l'overloading delle proprietà
    di accesso agli oggetti e dei metodi di chiamata. Solo una funzione è definita
    in questa estensione, <function>overload</function> che prende il
    nome dalla classe che ha questa funzionalità abilitata.
    La classe nominata ha da definire metodi appropriati se
    vuole avere questa funzionalità: <literal>__get()</literal>,
    <literal>__set()</literal> and <literal>__call()</literal>
    rispettivamente per ricevere/impostare una proprietà, o chiamare un metodo.
    Questa strada del sovraccarico può essere selettiva. Dentro queste
    funzioni handler l'overloading è disabilitato così si può accedere
    alle proprietà dell'oggetto normalmente.
   </para>
   <para>
    Alcuni semplici esempi sull'uso della funzione 
    <function>overload</function>
    <example>
     <title>Overloading di una classe PHP</title>
     <programlisting role="php">
<![CDATA[
<?php

class OO
{
    var $a = 111;
    var $elem = array('b' => 9, 'c' => 42);

    // Callback method for getting a property
    function __get($prop_name, &$prop_value)
    {
        if (isset($this->elem[$prop_name])) {
            $prop_value = $this->elem[$prop_name];
            return true;
        } else {
            return false;
        }
    }

    // Callback method for setting a property
    function __set($prop_name, $prop_value)
    {
        $this->elem[$prop_name] = $prop_value;
        return true;
    }
}

// Here we overload the OO object
overload('OO');

$o = new OO;
print "\$o->a: $o->a\n"; // print: $o->a:
print "\$o->b: $o->b\n"; // print: $o->b: 9
print "\$o->c: $o->c\n"; // print: $o->c: 42
print "\$o->d: $o->d\n"; // print: $o->d:

// add a new item to the $elem array in OO
$o->x = 56; 

// instantiate stdclass (it is built-in in PHP 4)
// $val is not overloaded!
$val = new stdclass;
$val->prop = 555;

// Set "a" to be an array with the $val object in it
// But __set() will put this in the $elem array
$o->a = array($val);
var_dump($o->a[0]->prop);

?>
]]>
     </programlisting>
    </example>
   </para>
   <warning>
    <para>
     Siccome è una estensione sperimentale, non tutto
     funziona. Non c'è attualmente il supporto per 
     <literal>__call()</literal>, 
     puoi solo overloadare le operazioni di ricezione e di impostazione
     per le proprietà. Non puoi invocare l'overloading 
     handlers originale della classe, e
     <literal>__set()</literal> funziona solo su un livello
     di proprietà di accesso.
    </para>
   </warning>
  </partintro>

&reference.overload.functions;

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
