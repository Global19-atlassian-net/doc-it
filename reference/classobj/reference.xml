<?xml version="1.0" encoding="iso-8859-1"?>
 <reference id="ref.classobj">
  <title>Funzioni per Classi/Oggetti </title>
  <titleabbrev>Classi/Oggetti</titleabbrev>

  <partintro>
   <section id="classobj.partintro">
    <title>Introduzione</title>
    <section id="classobj.intro">
    <title>Obiettivo</title>
     <para>
      Queste funzioni permettono di ottenere informazioni sulle classi 
      e sulle istanze degli oggetti. Si può ricavare il nome della
      classe da cui deriva un dato oggetto, come le sue proprietà e i 
      suoi metodi. Utilizzando queste funzioni si ottiene, non solo a 
      quale classe appartiene un dato oggetto, ma anche i suoi "padri"
      (ad esempio da quale classe è derivata la classe dell'oggetto).
     </para>
    </section>
    <section id="classobj.example">
     <title>Esempio di utilizzo</title>
     <para>
      In questo esempio, prima si definisce una classe base, quindi una 
      seconda che deriva dalla prima. La classe base descrive gli aspetti
      generali degli ortaggi, se è commestibile e quale sia il colore. La
      classe derivata <varname>Spinaci</varname> aggiunge i metodi di 
      cottura e di verifica della completa cottura.
     </para>
     <para>
      <example>
       <title>classi.inc</title>
       <programlisting role="php">
<![CDATA[
<?php

// classe base con proprietà e metodi
class Ortaggio {

    var $commestibile;
    var $colore;

    function Ortaggio( $commestibile, $colore="verde" ) {
        $this->commestibile = $commestibile;
        $this->colore = $colore;
    }

    function e_commestibile() {
        return $this->commestibile;
    }

    function che_colore_ha() {
        return $this->colore;
    }
    
} // Fine della classe ortaggio

// Estensione della classe base
class Spinaci extends Ortaggio {

    var $cotto = false;

    function Spinaci() {
        $this->Ortaggio( true, "verde" );
    }

    function cuocilo() {
        $this->cotto = true;
    }

    function e_cotto() {
        return $this->cotto;
    }
    
} // Fine della classe spinaci

?>
]]>
       </programlisting>
      </example>
     </para>
     <para>
     A questo punto si istanziano 2 oggetti a partire da queste classi
     e si visualizzeranno le informazioni relative a questi oggetti, compresi
     i loro padri. Verranno anche inserite funzioni di utilità
     principalmente con lo scopo di rendere chiara la visualizzazione delle
     variabili.
     </para>
     <para>
      <example>
       <title>test_script.php</title>
       <programlisting role="php">
<![CDATA[
<pre>
<?php

include "classi.inc";

// Funzioni di utilità

function visualizza_var($oggetto) {
    $matrice = get_object_vars($oggetto);
    while (list($prop, $val) = each($matrice))
        echo "\t$prop = $val\n";
}

function visualizza_metodi($oggetto) {
    $matrice = get_class_methods(get_class($oggetto));
    foreach ($matrice as $metodo)
        echo "\tfunzione $metodo()\n";
}

function padri_classe($oggetto, $classe) {
    global $$oggetto;
    if (is_subclass_of($$oggetto, $classe)) {
        echo "Oggetto $oggetto appartiene alla classe ".get_class($$oggetto);
        echo " derivata da $classe\n";
    } else {
        echo "Oggetto $oggetto non deriva da una sottoclasse di $classe\n";
    }
}

// Istanzia 2 oggetti

$pomodoro = new Ortaggio(true,"rosso");
$frondoso = new Spinaci();

// Visualizza le informazioni sugli oggetti
echo "pomodoro: CLASSE ".get_class($pomodoro)."\n";
echo "frondoso: CLASSE ".get_class($frondoso);
echo ", PADRE ".get_parent_class($frondoso)."\n";

// visualizza le proprietà di pomodoro
echo "\npomodoro: Proprietà\n";
visualizza_var($pomodoro);

// e i metodi di frondoso
echo "\nfrondoso: Metodi\n";
visualizza_metodi($frondoso);

echo "\nPadri:\n";
padri_classe("frondoso", "Spinaci");
padri_classe("frondoso", "Ortaggio");
?>
</pre>
]]>
       </programlisting>
      </example>
     </para>
     <para>
      Un aspetto da notare nell'esempio precedente è che l'oggetto
      <varname>$frondoso</varname> è un'istanza della classe <classname>
      Spinaci</classname> che a sua volta è una sottoclasse di
      <classname>Ortaggio</classname>, quindi l'ultima parte dell'esempio
      visualizzerà:
     </para>
     <para>
      <informalexample>
       <programlisting>
<![CDATA[
       [...]
Padri:
Oggetto frondoso non deriva da una sottoclasse di Spinaci
Oggetto frondoso appartiene alla classe spinaci derivata da Ortaggio
]]>
       </programlisting>
      </informalexample>
     </para>
    </section>
   </section>
  </partintro>
   

 










&reference.classobj.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

