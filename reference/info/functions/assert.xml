<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.7 Maintainer: darvina Status: ready -->
<!-- splitted from ./en/functions/info.xml, last change in rev 1.51 -->
  <refentry id="function.assert">
   <refnamediv>
    <refname>assert</refname>
    <refpurpose>Verifica se un'asserzione è &false;</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>assert</methodname>
      <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>assert</function> verifica se la data
     <parameter>assertion</parameter> è &false;, nel caso intraprende le
     opportune azioni.
    </para>
    <para>
     Se il parametro <parameter>assertion</parameter> è una stringa 
     questo sarà considerato da  <function>assert</function> come codice PHP.
     I vantaggi di usare le stringhe con <parameter>assertion</parameter> sono
     che si ha meno overhead nella verifica e la visualizzazione dei messaggi
     che contengono <parameter>assertion</parameter> quando questa
     fallisce. Ciò significa che se si passa una condizione booleana
     come <parameter>assertion</parameter>, questa condizione non sarà mostrata
     come parametro della funzione che può essere definita con <function>assert_options</function>,
     la condizione sarò in stringa prima di chiamare la funzione handler, e il valore
     booleano &false; viene convertito in una stringa vuota.
    </para>
    <para>
     Le asserzioni dovrebbero essere utilizzate solo per il debug. Si possono
     usare per controlli di coerenza che sono sempre &true;
     e che, in caso contrario, indichino errori di programmazione,
     oppure per verificare la presenza o meni di certe caratteristiche, tipo le estensioni,
     oppure certi limiti di sistema o caratteristiche.
    </para>
    <para>
     Le asserzioni non dovrebbero essere utilizzate per le normali operazioni di
     runtime quali il controllo dei parametri di input. Come regola si deve avere
     che il programma possa girare senza la presenza delle regole di 
     asserzione.
    </para>
    <para>
     Il comportamento di <function>assert</function> può essere impostato
     tramite <function>assert_options</function> oppure tramite .ini-settings come descritto
     nel pagine del manuale relative a quelle funzioni.
    </para>
    <para>
     La funzione <function>assert_options</function> e/o il parametro
     ASSERT_CALLBACK permetto di attivare una funzione di callback
     per gestire una asserzione fallita.
    </para>
    <para>
     I callback di <function>assert</function> sono particolarmente utili
     per costruire suite di test poiché permettono di catturare facilmente
     il codice passato all'assert, oltre alle informazioni
     su dove l'assert è scattato. Sebbene quest'ultime informazioni siano
     rilevabili anche con altri metodi, l'uso delle asserzione rende il tutto
     più semplice!
    </para>
    <para>
     Le funzioni di callback devono accettare tre parametri. Il primo
     conterrà il nome del file in cui si trova l'asserzione fallita. Il secondo parametro
     conterrà il numero di linea dell'asserzione fallita, ed il terzo
     conterrà l'espressione dell'asserzione (se fornito - valori alfanumerici
     quali 1 o due" non saranno passati a questo
     parametro).
    </para>
    <para>
     <example>
      <title>Gestione di una asserzione fallita con codice personalizzato</title>
      <programlisting role="php">
<![CDATA[
<?php
// Attiva le asserzioni 
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Crea la funzione personalizzata
function my_assert_handler($file, $line, $code) 
{
    echo "<hr>Assertion Failed:
        File '$file'<br />
        Line '$line'<br />
        Code '$code'<br /><hr />";
}

// Imposta il callback
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Crea una asserzione che fallisce
assert('mysql_query("")');
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
