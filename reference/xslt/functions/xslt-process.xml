<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: curcio_it Status: ready -->
  <refentry xml:id="function.xslt-process" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>xslt_process</refname>
    <refpurpose>Esegue una trasformazione XSLT</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>mixed</type><methodname>xslt_process</methodname>
       <methodparam><type>resource</type><parameter>xh</parameter></methodparam>
       <methodparam><type>string</type><parameter>xmlcontainer</parameter></methodparam>
       <methodparam><type>string</type><parameter>xslcontainer</parameter></methodparam>
       <methodparam choice="opt"><type>string</type><parameter>resultcontainer</parameter></methodparam>
       <methodparam choice="opt"><type>array</type><parameter>arguments</parameter></methodparam>
       <methodparam choice="opt"><type>array</type><parameter>parameters</parameter></methodparam>
     </methodsynopsis>
    <para>
     La funzione <function>xslt_process</function> è una delle più importanti della
     nuova estensione XSLT. Permette di eseguire una trasformazione XSLT usando quasi ogni tipo di
     fonte per l'input - i contenitori. Questa è un completamento mediante l'uso dell'argomento
     buffers -- un concetto preso dal processore XSLT Sablotron
     (attualmente l'unico processore XSLT supportato da questa estensione).
     Il contenituore di input di default è il nome del file del documento
     trasformato. Se il contenitore di destinaizone non viene fornito, ad esempio
     è impostato a &null; - alla la funzione restituisce il risultato.
    </para>
    <para>
     <warning>
      <simpara>
       Questa funzione ha modifica i propri argomenti dalla versione 4.0.6. Infatti non 
       fornire più il contenuto XML o XSL come secondi e terzi argomenti, poichè questi
       creano un segmentation fault in Sablotron fino alla versione
       0.95 inclusa.
      </simpara>
     </warning>
    </para>
    <para>
     I contenitori possono essere impostati anche tramite la matrice
     <parameter>$arguments</parameter> (vedere più avanti).
    </para>
    <para>
     Il più semplice tipo di trasformazione con la funzione <function>xslt_process</function>
     è la trasformazione di un file XML con un file XSLT, mettendo il
     risultato in un terzo file contenente un nuovo documento XML (o HTML).
     Fare questo con Sablotron è davvero molto semplice...
    </para>
    <example>
     <title>Uso di <function>xslt_process</function> per trasformare un file XML e un file XSL
     in un nuovo file XML</title>
     <programlisting role="php">
<![CDATA[
<?php

// Allocate a new XSLT processor
$xh = xslt_create();

// Process the document
if (xslt_process($xh, 'sample.xml', 'sample.xsl', 'result.xml')) {
    echo "SUCCESS, sample.xml was transformed by sample.xsl into result.xml";
    echo ", result.xml has the following contents\n<br />\n";
    echo "<pre>\n";
    readfile('result.xml');
    echo "</pre>\n";
} else {
    echo "Sorry, sample.xml could not be transformed by sample.xsl into";
    echo "  result.xml the reason is that " . xslt_error($xh) . " and the ";
    echo "error code is " . xslt_errno($xh);
}

xslt_free($xh);

?>
]]>
     </programlisting>
    </example>
    <para>
     Mentre questa funzionalità è importante, a volte, specialmente in un ambiente web, si vorrebbe
     avere la possibilità di scrivere a video il risultato direttamente. Quindi, se si omette il terzo argomento
     alla funzione <function>xslt_process</function> (o si inserisce il valore NULL per l'argomento), lo script 
     restituirà automaticamente il valore della trasformazione dell'XSLT, invece di scriverlo in un
     file...
    </para>
    <para>
     <example>
     <title>Uso di <function>xslt_process</function> per trasformare un file XML e uno XSL 
     in una variabile contenente i dati XML restituiti</title>
     <programlisting role="php">
<![CDATA[
<?php

// Allocate a new XSLT processor
$xh = xslt_create();

// Process the document, returning the result into the $result variable
$result = xslt_process($xh, 'sample.xml', 'sample.xsl');
if ($result) {
    echo "SUCCESS, sample.xml was transformed by sample.xsl into the \$result";
    echo " variable, the \$result variable has the following contents\n<br />\n";
    echo "<pre>\n";
    echo $result;
    echo "</pre>\n";
} else {
    echo "Sorry, sample.xml could not be transformed by sample.xsl into";
    echo "  the \$result variable the reason is that " . xslt_error($xh) . 
    echo " and the error code is " . xslt_errno($xh);
}

xslt_free($xh);

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     I due casi sopra sono i due casi più semplici che ci sono quando c'è una trasformazione XSLT
     e c'è da dire che dovreste essere per la maggior parte delle volte in questi casi, ma, a volte, puoi prendere il tuo
     codice XML e XSLT da fonti esterne, come database e socket. In questi casi, avrai
     i dati XML e/o XSLT in una variabile -- nella produzione di applicazioni l'overhead per scaricare
     questo codice al file potrebbere essere eccessivo. Qui la sinstassi degli argomenti dell'XSLT ci
     aiuta. Invece dei file come argomenti XML e XSLT alla funzione <function>xslt_process</function>,
     puoi specificare l' &quot;argument place holders&quot; il quale è poi sostituito dal valore
     dato nell'argomento dell'array (il quinto parametro della funzione <function>xslt_process</function>).  
     Di seguito c'è un esempio del processo di inserimento di codice XML e XSLT senza 
     l'ausilio di file.
    </para>
    <para>
     <example>
     <title>Uso di <function>xslt_process</function> per trasformare una variabile contenente dati XML 
     e una variabile contenente dati XSL in una variabile contenente i dati XML risultanti</title>
     <programlisting role="php">
<![CDATA[
<?php
// $xml and $xsl contain the XML and XSL data

$arguments = array(
     '/_xml' => $xml,
     '/_xsl' => $xsl
);

// Allocate a new XSLT processor
$xh = xslt_create();

// Process the document
$result = xslt_process($xh, 'arg:/_xml', 'arg:/_xsl', NULL, $arguments); 
if ($result) {
    echo "SUCCESS, sample.xml was transformed by sample.xsl into the \$result";
    echo " variable, the \$result variable has the following contents\n<br />\n";
    echo "<pre>\n";
    echo $result;
    echo "</pre>\n";
} else {
    echo "Sorry, sample.xml could not be transformed by sample.xsl into";
    echo "  the \$result variable the reason is that " . xslt_error($xh) . 
    echo " and the error code is " . xslt_errno($xh);
}
xslt_free($xh);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Finalmente, l'ultimo argomento della funzione <function>xslt_process</function> 
     rappresenta una matrice di qualsiasi parametro di alto livello che si desidera
     passare al documento XSLT. Questi parametri possono essere referenziati
     dal file XSL utilizzando l'istruzione &lt;xsl:param name=&quot;parameter_name&quot;&gt;.
     I parametri devono avere la codifica UTF-8 ed i rispettivi valori devono
     essere interpretati come stringhe dal processore <productname>Sablotron</productname>.
     In altre parole non si possono passare come parametri al documento XSLT dei node-set.
    </para>
    <para>
     <example>
      <title>Passaggio di variabili PHP al file XSL</title>
      <programlisting role="php">
<![CDATA[
<?php
 
// XML string
$xml = '<?xml version="1.0"?>
<para>
 change me
</para>';
 
// stringa XSL 
$xsl = '
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="html" encoding="ISO-8859-1" indent="no"
 omit-xml-declaration="yes"  media-type="text/html"/>
 <xsl:param name="myvar"/>
 <xsl:param name="mynode"/>
 <xsl:template match="/">
My PHP variable : <xsl:value-of select="$myvar"/><br />
My node set : <xsl:value-of select="$mynode"/>
 </xsl:template>
</xsl:stylesheet>';
 
 
$xh = xslt_create();
 
// Il secondo parametro sarà interpretato come stringa
$parameters = array (
  'myvar' => 'test',
  'mynode' => '<foo>bar</foo>'
);
 
$arguments = array (
  '/_xml' => $xml,
  '/_xsl' => $xsl
);
 
echo xslt_process($xh, 'arg:/_xml', 'arg:/_xsl', NULL, $arguments, $parameters);
 
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
My PHP variable : test<br>
My node set : &lt;foo&gt;bar&lt;/foo&gt;
]]>
      </screen>
     </example>
    </para>
    &note.xslt.windows;
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
