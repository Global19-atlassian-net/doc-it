<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./it/functions/http.xml, last change in rev 1.14 -->
<!-- last change to 'header' in en/ tree in rev 1.2 -->
<!-- EN-Revision: 1.1 Maintainer: alan_dangelo Status: ready -->
<!-- OLD-Revision: 1.34/EN.1.2 -->
  <refentry id="function.header">
   <refnamediv>
    <refname>header</refname>
    <refpurpose>Spedisce un header HTTP</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>header</methodname>
      <methodparam><type>string</type><parameter>string</parameter></methodparam>
      <methodparam choice="opt"><type>bool</type><parameter>replace</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>header</function> si utilizza per inviare header <acronym>HTTP</acronym>.
     Per maggiorni informazioni riguardanti gli header <acronym>HTTP</acronym>
     si veda la risorsa <ulink url="&spec.http1.1;">HTTP 1.1 specification</ulink>.

    </para>
    <para>
     L'argomento opzionale <parameter>replace</parameter> indica se l'header 
     inviato deve sostituirne uno simile spedito precedentemente, o accodarsi 
     al primo dello stesso tipo. Per default la funzione sostituisce
     l'header precedente, ma se viene passato &false; come secondo argomento
     vengono forzate intestazioni multiple. Per esempio:
     <informalexample>
      <programlisting role="php">
<![CDATA[
header('WWW-Authenticate: Negotiate');
header('WWW-Authenticate: NTLM',false);
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Ci sono due casi speciali di chiamate di header. Il primo è 
     &quot;Location&quot;. Location non trasmette solo un header al 
     browser, ma anche un <literal>REDIRECT</literal> con 
     codice di stato (302).
     <informalexample>
      <programlisting role="php">
<![CDATA[
header("Location: http://www.php.net/"); /* Ridireziona il browser 
                                            al sito di PHP */
exit;                 /* Assicura che il codice sottostante 
                         non sia eseguito dopo il redirezionamento. */
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      HTTP/1.1 richiede un <acronym>URI</acronym> assoluto come argomento di 
      <ulink url="&spec.http1.1;-sec14.html#sec14.30">Location:</ulink>
      composto da schema, hostname, e path assoluto, ma alcuni clients 
      possono accettare anche URIs relativi. E' possibile usare 
      $HTTP_SERVER_VARS['HTTP_HOST'], $HTTP_SERVER_VARS['PHP_SELF'] 
      e <function>dirname</function> per creare URI assoluti da URI relativi 
      in modo automatico:
      <informalexample>
       <programlisting>
<![CDATA[
header ("Location: http://".$HTTP_SERVER_VARS['HTTP_HOST']
                       ."/".dirname($HTTP_SERVER_VARS['PHP_SELF'])
                       ."/".$relative_url);
]]>
       </programlisting>
      </informalexample>
     </para>
    </note>
    <para>
     Il secondo caso speciale è esemplificato dalle intestazioni che 
     iniziano con la stringa, &quot;<literal>HTTP/</literal>&quot; (le maiuscole non sono 
     discriminanti), che è usato per inviare codici di stato HTTP.
     Per esempio, se si è configurato Apache per usare script PHP per la 
     manipolazione di richieste fallite (usando la direttiva 
     <literal>ErrorDocument</literal>), potete desiderare di assicurarvi
     che il vostro script generi il codice adeguato. 
     <informalexample>
      <programlisting role="php">
<![CDATA[
header ("HTTP/1.0 404 Not Found");
]]>
      </programlisting>
     </informalexample>
     <note>
      <para>
       In PHP 3, questo funziona solo se PHP è compilato come modulo
       Apache. Potete ottenere lo stesso effetto usando l'header
       <literal>Status</literal>.
       <informalexample>
        <programlisting role="php">
<![CDATA[
header("Status: 404 Not Found");
]]>
        </programlisting>
       </informalexample>
      </para>
     </note>
    </para>
    <para>
     Spesso gli scrit PHP generano contenuti dinamici, se volete evitare che i 
     contenuti vengano mantenuti nella cache di browser o proxy, 
     potete forzare il loro comportamento con questa direttiva:

     <informalexample>
      <programlisting role="php">
<![CDATA[
header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");    // Data passata
header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT"); 
                                                     // sempre modificato
header("Cache-Control: no-store, no-cache, must-revalidate");  // HTTP/1.1
header("Cache-Control: post-check=0, pre-check=0", false);
header("Pragma: no-cache");                          // HTTP/1.0
]]>
      </programlisting>
     </informalexample>
     <note>
      <para>
       E' possibile che alcune pagine rimangano in chache anche dopo 
       l'uso degli header descritti sopra. Ci sono delle opzioni che 
       l'utente può settare dal browser, capaci di modificare i comportamenti 
       di default del caching. Per trasmettere efficacemente gli header 
       descritti, bisogna che sia inattiva ogni regolazione che può forzare 
       comportamenti contrari.
      </para>
      <para>
       Inoltre, <function>session_cache_limiter</function> e
       e la configurazione <literal>session.cache_limiter</literal>
       possono essere usate per generare automaticamente i corretti
       header relativi al caching durante l'uso delle sessioni.
      </para>
     </note>
    </para>
    <para>
     Bisogna ricordare che la funzione<function>header</function> va 
     chiamata prima di qualsiasi output HTML o PHP (anche righe o spazi
     vuoti). E' un errore comune leggere files con funzioni 
     <function>include</function>, o <function>require</function> 
     (o altre funzioni capaci di accedere a files), che possano emettere 
     in output spazi o linee vuote prima di una chiamata della funzione 
     <function>header</function>. Lo stesso problema esiste nell'utilizzare
     file PHP/HTML.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php require("user_logging.inc") ?>

<?php header ("Content-type: audio/x-pn-realaudio"); ?>
// Non funziona, notate le linee vuote sopra
]]>
      </programlisting>
     </informalexample>
     <note>
      <para>
       In PHP 4, potete usare il buffering dell'output per aggirare
       questo problema, evitando ogni output al browser trattenedolo
       al server fino a che non gli si impone l'invio. Si può fare questa operazione
       chiamando <function>ob_start</function> e <function>ob_end_flush</function>
       nello script, o settando la direttiva di configurazione 
       <literal>output_buffering</literal> nel file <filename>php.ini</filename> o
       nel file di configurazione del server.
      </para>
     </note>
    </para>    
    <para>
     Se desiderate che l'utente sia spinto a salvare i dati trasmessi 
     per esempio utilizzando un file PDF, potete usare 
     l'header <ulink url="&url.rfc2183;">Content-Disposition</ulink>, che vi
     permette di dare un nome al file e forzare il browser a mostrare la finestra
     di dialogo save.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
header("Content-type: application/pdf");
header("Content-Disposition: attachment; filename=downloaded.pdf");

/* ... manda in output un file pdf ... */
]]>
      </programlisting>
     </informalexample>
     <note>
      <para>
       Per un bug di Microsoft Internet Explorer 4.01 qusto sistema
       non funziona. Non ci sono soluzioni. C'è un altro bug in Microsoft 
       Internet Explorer 5.5 che impedisce il giusto funzionamento,
       ma è possibile risolverlo con l'upgrade del Service Pack 2 o superiore.
      </para>
     </note>
    </para>
    <para>
     Vedi anche <function>headers_sent</function>,
     <function>setcookie</function>, e la sezione 
     <link linkend="features.http-auth">Autenticazione HTTP usando PHP</link>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
