<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./it/functions/array.xml, last change in rev 1.1 -->
<!-- last change to 'array-multisort' in en/ tree in rev 1.11 -->
<!-- EN-Revision: 1.1 Maintainer: cucinato Status: ready -->
<!-- OLD-Revision: 1.173/EN.1.11 -->
  <refentry id="function.array-multisort">
   <refnamediv>
    <refname>array_multisort</refname>
    <refpurpose>Ordina array multipli o multidimensionali</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>bool</type><methodname>array_multisort</methodname>
      <methodparam><type>array</type><parameter>ar1</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>arg</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>Array_multisort</function> Pu&ograve; essere usata per ordinare parecchi
     array allo stesso tempo, oppure un array multidimensionale, rispetto a una o
     pi&ugrave; dimensioni. Mantiene le associazioni delle chiavi durante l'ordinamento.
    </para>
    <para>
     Gli array in input sono trattati come campi di una tabella che vengano ordinati
     per righe - questo assomiglia alla funzionalit&agrave; della clausola SQL ORDER BY
     Il primo array &egrave; quello primario, rispetto a cui aordinare. Le righe
     (valori) in questo array that siano uguali vengono ordinate secondo
     l'array successivo, e cos&igrave; via.
    </para>
    <para>
     La struttura degli argomenti di questa funzione &egrave; un po' inusuale, ma
     flessibile. Il primo argomento deve essere un
     array. In seguito, ogni argomento pu&ograve; essere sia un aray che
     un flag di ordinamento, selezionabile dalla seguente lista.
    </para>
    <para>
     Flag di ordinamento:
     <itemizedlist>
      <listitem>
       <simpara>SORT_ASC - ordinamento crescente</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_DESC - ordinamento decrescente</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Sorting type flags:
     <itemizedlist>
      <listitem>
       <simpara>SORT_REGULAR - confronta gli elementi in modo normale</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_NUMERIC - confronta gli elementi numericamente</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_STRING - confronta gli elementi come stringhe</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Dopo ogni array, non si possono specificare due flag dello stesso
     tipo. I flag specificati dopo un array si applicano
     solo a quell'array - sono reimpostati ai default SORT_ASC e
     SORT_REGULAR dopo ogni nuovo array passato come argomento.
    </para>
    <para>
     &return.success;
    </para>
    <para>
     <example>
      <title>Ordinamre pi&ugrave; array</title>
      <programlisting role="php">
<![CDATA[
$ar1 = array ("10", 100, 100, "a");
$ar2 = array (1, 3, "2", 1);
array_multisort ($ar1, $ar2);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     In questo esempio, dopo l'ordinamento, il primo array conterr&agrave; "10",
     "a", 100, 100. Il secondo array conterr&agrave; 1, 1, "2", 3. Gli
     elementi nel secondo array che corrispondono agli elementi
     identici nel primo array (100 e 100) vengono pure ordinati.
    </para>
    <para>
     <example>
      <title>Ordinare un array multi-dimensionale</title>
      <programlisting role="php">
<![CDATA[
$ar = array (array ("10", 100, 100, "a"), array (1, 3, "2", 1));
array_multisort ($ar[0], SORT_ASC, SORT_STRING,
                 $ar[1], SORT_NUMERIC, SORT_DESC);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     In questo esempio, dopo l'ordinamento, il primo array conterr&agrave; 10,
     100, 100, "a" (ordinato come stringhe ordine crescente), e
     il secondo conterr&agrave; 1, 3, "2", 1 (ordinati come numeri, in
     ordine decrescente).
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
