<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./it/functions/array.xml, last change in rev 1.1 -->
<!-- last change to 'array-map' in en/ tree in rev 1.62 -->
<!-- EN-Revision: 1.4 Maintainer: cucinato Status: ready -->
<!-- OLD-Revision: 1.173/EN.1.62 -->
  <refentry id="function.array-map">
   <refnamediv>
    <refname>array_map</refname>
    <refpurpose>
     Applica la funzione callback a tutti gli elementi dell'array dato
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>array</type><methodname>array_map</methodname>
      <methodparam><type>mixed</type><parameter>callback</parameter></methodparam>
      <methodparam><type>array</type><parameter>arr1</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>arr2...</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>array_map</function> restituisce un array
     contenente tutti gli elementi di <parameter>arr1</parameter>
     dopo che &egrave; stata loro applicata la funzione callback.
     Il numero di parametri che la funzione callback accetta deve
     corrispondere al numero di array passati alla funzione <function>array_map</function>
    </para>
    <para>
     <example>
      <title>Esempio di <function>array_map</function></title>
      <programlisting role="php">
<![CDATA[
function cubo($n) {
    return $n*$n*$n;
}

$a = array(1, 2, 3, 4, 5);
$b = array_map("cubo", $a);
print_r($b);
]]>
      </programlisting>
      <para>
       In questo modo <varname>$b</varname> sarà:
       <screen>
<![CDATA[
Array
(
    [0] => 1
    [1] => 8
    [2] => 27
    [3] => 64
    [4] => 125
)
]]>
       </screen>
      </para>
     </example>
    </para>
    <para>
     <example>
      <title><function>array_map</function> - usare pi&ugrave; array</title>
      <programlisting role="php">
<![CDATA[
function mostra_Spagnolo($n, $m) {
  	return "Il numero $n si dice $m in Spagnolo";
}

function mappa_Spagnolo($n, $m) {
    return array ($n => $m);
}

$a = array(1, 2, 3, 4, 5);
$b = array("uno", "dos", "tres", "cuatro", "cinco");

$c = array_map("mostra_Spagnolo", $a, $b);
print_r($c);

$d = array_map("mappa_Spagnolo", $a, $b);
print_r($d);
]]>
      </programlisting>
      <para>
       Questo restituisce:
       <screen>
<![CDATA[
//stampa di $c
Array
(
    [0] => Il numero 1 si dice uno in Spagnolo
    [1] => Il numero 2 si dice dos in Spagnolo
    [2] => Il numero 3 si dice tres in Spagnolo
    [3] => Il numero 4 si dice cuatro in Spagnolo
    [4] => Il numero 5 si dice cinco in Spagnolo
)

// stampa di $d
Array
(
    [0] => Array
        (
            [1] => uno
        )

    [1] => Array
        (
            [2] => dos
        )

    [2] => Array
        (
            [3] => tres
        )

    [3] => Array
        (
            [4] => cuatro
        )

    [4] => Array
        (
            [5] => cinco
        )

)
]]>
       </screen>
      </para>
     </example>
    </para>
    <para>
     Generalmente, quando si usano due o pi&ugrave; array, questi devono avere eguale lunghezza
     in quanto la funzione callback viene applicata in parallelo agli elementi
     corrispondenti.
     Se gli array sono di lunghezza diversa, il pi&ugrave; corto verr&agrave; esteso
     con elementi vuoti.
    </para>
    <para>
     Un uso interessante di questa funzione &egrave; quello di costruire un array di array,
     cosa che pou&ograve; essere facilmente ottenuta usando <literal>null</literal>
     come nome della funzione callback
    </para>
    <para>
     <example>
      <title><function>Array_map</function> - creare un array di array</title>
      <programlisting role="php">
<![CDATA[
$a = array(1, 2, 3, 4, 5);
$b = array("uno", "due", "tre", "quattro", "cinque");
$c = array("uno", "dos", "tres", "cuatro", "cinco");

$d = array_map(null, $a, $b, $c);
print_r($d);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Il risultato di questo programma sarà;
     <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => 1
            [1] => uno
            [2] => uno
        )

    [1] => Array
        (
            [0] => 2
            [1] => due
            [2] => dos
        )

    [2] => Array
        (
            [0] => 3
            [1] => tre
            [2] => tres
        )

    [3] => Array
        (
            [0] => 4
            [1] => quattro
            [2] => cuatro
        )

    [4] => Array
        (
            [0] => 5
            [1] => cinque
            [2] => cinco
        )

)
]]>
     </screen>
    </para>
    <para>
     Vedere anche <function>array_filter</function> e
     <function>array_reduce</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
