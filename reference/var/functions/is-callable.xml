<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: darvina Status: ready -->
  <refentry xml:id="function.is-callable" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>is_callable</refname>
    <refpurpose>
     Verifica se il contenuto dell'argomento può essere eseguito come funzione
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_callable</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>bool</type><parameter>syntax_only</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter role="reference">callable_name</parameter></methodparam>
     </methodsynopsis>
    <para>
     Verifica che il contenuto di una funzione possa essere richiamato come una funzione.
     Questa verifica può essere eseguita su una semplice variabile contenente il nome di una funzione
     valida, oppure su un array contenente il nome di un oggetto ed il nome
     di una funzione
    </para>

    <para>
     Il parametro <parameter>var</parameter> può essere sia il nome di una funzione sia
     un oggetto ed il nome del metodo nell'oggetto, tipo 
     <screen>array( $SomeObject, 'MethodName' )</screen>     
    </para>

    <para>
     Se il parametro <parameter>syntax_only</parameter> è impostato a &true; la funzione eseguirà un
     controllo sulla validità del parametro  <parameter>var</parameter>.  La funzione scarterà variabili
     non stringhe o che non hanno la struttura per essere callback validi. L'unica struttura valida
     presuppone di avere solo 2 righe: una stringa con il nome dell'oggetto, 
     una seconda riga con il nome del metodo.
    </para>
    <para>
     Il terzo parametro <parameter>callable_name</parameter> contiene il "callable name". Nell'esempio che
     segue contiene "someClass:someMethod". Si noti che, nonostante someClass::SomeMethod() implichi 
     il richiamo ad un metodo statico, questo non è il caso.
    </para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
//  Come verificare se una variabile può essere eseguita
//  come funzione..

//
//  Semplice variabile contenente una funzione
//

function unaFunzione() 
{
}

$functionVariable = 'unaFunzione';

var_dump(is_callable( $functionVariable, false, $callable_name ));  // bool(true)

echo $callable_name, "\n";  // unaFunzione

//
//  Array contenente un metodo
//

class unaClasse {

  function unMetodo() 
  {
  }

}

$anObject = new unaClasse();
$methodVariable = array($anObject, 'unMetodo' );
var_dump(is_callable($methodVariable, true, $callable_name ));  //  bool(true)
echo $callable_name, "\n";  //  unaClasse:unMetodo
?>
]]>
     </programlisting>
    </informalexample>   
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
