<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./it/functions/var.xml, last change in rev 1.16 -->
<!-- last change to 'unserialize' in en/ tree in rev 1.2 -->
<!-- EN-Revision: 1.16 Maintainer: darvina Status: ready -->
<!-- OLD-Revision: 1.104/EN.1.2 -->
  <refentry id="function.unserialize">
   <refnamediv>
    <refname>unserialize</refname>
    <refpurpose>
     Crea un valore PHP a partire da una rappresentazione archiviata
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>mixed</type><methodname>unserialize</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     La funzione <function>unserialize</function> prende il formato serializzato di
     una variabile (vedere <function>serialize</function>) e la riporta
     a valore PHP. La funzione restituisce il valore ottenuto, che può essere
     di tipo <type>integer</type>, <type>float</type>,
     <type>string</type>, <type>array</type> oppure <type>object</type>.
     Nel caso in cui la stringa passata non sia deserializzabile la funzione restituisce &false;.
    </simpara>
    <note>
     <title>Direttiva unserialize_callback_func</title>
     <para>
      E' possibile impostare una funzione di callback che possa essere richiamata
      se, durante la fase di deserializzazione, occorre istanziare una classe indefinita.
      (per evitare di ottenere un tipo <type>object</type> incompleto "__PHP_Incomplete_Class".)
      Per definire il parametro 'unserialize_callback_func' si può agire sul
      &php.ini;, o usare <function>ini_set</function> oppure con &htaccess;.
      Verrà  utilizzata questa funzione ogni volta che occorre istanziare una classe indefinita.
      Per disabilitare questa opzione, lasciare vuota questa impostazione. Attenzione che la direttiva unserialize_callback_func è disponibile dalla versione 4.2.0 di PHP.
     </para>
    </note>
    <para>
     Se la variabile da ripristinare è un oggetto, dopo avere ricostruito
     l'oggetto, il PHP cercherà di eseguire la funzione membro <function>__wakeup</function>
     (se esiste).
     <example>
      <title>Esempio di unserialize_callback_func.</title>
      <programlisting role="php">
<![CDATA[
<?php
$serialized_object='O:1:"a":1:{s:5:"value";s:3:"100";}';

// direttiva unserialize_callback_func disponibile dalla versione 4.2.0
ini_set('unserialize_callback_func', 'mycallback'); // imposta la funzione di callback

function mycallback($classname)
{
    // semplicemente include un file contenente la definizione della classe
    // la variabile $classname indica di quale classe occorre la definizione
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      Nella versione 3 di PHP, i metodi non erano preservati durante la fase di deserializzazione
      di un oggetto. In PHP 4 questo limite è stato superato e possono essere 
      recuperati sia metodi sia proprietà. Per maggiori informazioni 
      vedere la sezione <link
      linkend="language.oop.serialization">Serializzare oggetti</link> in 
      <link linkend="language.oop">Classi e oggetti</link>
     </para>
    </note>
    <para>
     <example>
      <title>Esempio di uso di <function>unserialize</function></title>
      <programlisting role="php">
<![CDATA[
<?php
// In quest esempio si usa unserialize() per caricare i dati di una sessione da un database
// alla variabile $session_data. Questo esempio è complementare a quello illustrato
// nella funzione <function>serialize</function>.

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array ($PHP_AUTH_USER);
if (!odbc_execute($stmt, &$sqldata) || !odbc_fetch_into($stmt, &$tmp)) {
    // se odbc_execute o odbc_fetch_into hanno un errore si predispone un array vuoto
    $session_data = array();
} else {
    // ora abbiamo i dati serializzati in $tmp[0].
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
       // qualcosa è andato storto, si predispone un array vuoto
       $session_data = array();
    }
}
?>
]]>
      </programlisting>
     </example>
    </para>
   <para>
    Vedere anche: <function>serialize</function>.
   </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
