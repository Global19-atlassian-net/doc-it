<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.12 Maintainer: darvina Status: ready -->
  <refentry xml:id="function.unset" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>Cancella una data variabile</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>void</type><methodname>unset</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>unset</function> distrugge la variabile specificata. Occorre
     notare che in PHP 3 la funzione <function>unset</function> restituiva sempre &true;
     (in realtà era il valore 1). In PHP 4, invece, la funzione 
     <function>unset</function> non è più una vera funzione, ora è una
     istruzione. In questa veste non ritorna alcun valore, e cercare di ottenere
     un valore dalla funzione <function>unset</function> produce un errore
     di parsing.
    </para>
    <para>
     <example>
      <title>Esempio di <function>unset</function></title>
      <programlisting role="php">
<![CDATA[
<?php
// Distrugge una singola variabile
unset($foo);

// distrugge un singolo elemento di un array
unset($bar['quux']);

// distrugge più di una variabile
unset($foo1, $foo2, $foo3);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Il comportamento di <function>unset</function> all'interno di una funzione
     può variare in funzione del tipo di variabile che si intende
     distruggere.
    </para>
    <para>
     Se si applica <function>unset</function> ad una variabile globale all'interno
     di una funzione, sarà distrutta solo la variabile locale. Nell'ambiente 
     chiamante, la variabile manterrà il medesimo valore che aveva prima dell'uso 
     di <function>unset</function>.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function destroy_foo()
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    &example.outputs;
    <para>
     <informalexample>
      <screen>
<![CDATA[
bar
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     Nel caso di una variabile PASSATA PER RIFERIMENTO ad una funzione, 
     l'uso della funzione <function>unset</function> distrugge solo la copia
     locale della variabile. Nell'ambiente chiamante, la variabile manterrà
     il medesimo valore che aveva prima dell'uso 
     di <function>unset</function>.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar) 
{
    unset($bar);
    $bar = "blah";
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
      </programlisting>
     </informalexample>
    </para>
     &example.outputs;
    <para>
     <informalexample>
      <screen>
<![CDATA[
something
something
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     Se si usa <function>unset</function> su una variabile statica all'interno
     di una funzione, <function>unset</function> cancella la variabile e tutti
     i suoi riferimenti.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo() 
{
    static $a;
    $a++;
    echo "$a\n";

    unset($a);
}

foo();
foo();
foo();
?>
]]>
      </programlisting>
     </informalexample>
    </para>
     &example.outputs;
    <para>
     <informalexample>
      <screen>
<![CDATA[
1
2
3
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     Se si desidera cancellare una variabile globale dall'interno di una funzione, 
     occorre usare <function>unset</function> sull'array <varname>$GLOBALS</varname> 
     nel seguente modo:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo() 
{
    unset($GLOBALS['bar']);
}

$bar = "something";
foo();
?>
]]>
      </programlisting>
     </informalexample>
    </para>

    &note.language-construct;

    <para>
     Vedere anche <function>isset</function> e
     <function>empty</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
