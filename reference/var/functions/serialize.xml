<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./it/functions/var.xml, last change in rev 1.1 -->
<!-- last change to 'serialize' in en/ tree in rev 1.28 -->
<!-- EN-Revision: 1.1 Maintainer: darvina Status: ready -->
<!-- OLD-Revision: 1.104/EN.1.28 -->
  <refentry id="function.serialize">
   <refnamediv>
    <refname>serialize</refname>
    <refpurpose>
     Genera una versione archiviabile del valore
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>serialize</methodname>
      <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     La funzione <function>serialize</function> restituisce una stringa contenente
     un flusso di bytes rappresentante <parameter>value</parameter> che
     possa essere archiviato ovunque.
    </simpara>
    <simpara>
     Questo può essere utile per archiviare o passare valori senza
     perdere il tipo e la struttura.
    </simpara>
   <simpara>
    Per ottenere il valore dalla stringa serializzata, utilizzare
    la funzione <function>unserialize</function>. La funzione <function>serialize</function>
    gestisce tutti i tipi di variabili tranne il tipo <type>resource</type>.
    Possono essere elaborati da <function>serialize</function> array che
    contengano riferimenti a se stessi. Saranno archiviati anche i riferimenti
    interni agli array e ai tipi object passati a <function>serialize</function>
   </simpara>
   <!-- TODO
        in 4.0.4pl1 this didn't work properly, however, there
        been some fixes. I don't know whether this all
        works correctly now, and if so, whether it is since 405
        or 406
   <note>
    <simpara>
     This didn't work correctly until 4.0.?
    </simpara>
   </note>
   </simpara>
   -->
   <note>
    <para>
     Nella versione 3 di PHP si serializzano le proprietà dell'oggetto,
     ma non i metodi. Nella versione 4 viene superata questa limitazione e possono
     essere recuperati sia le proprietà sia i metodi. Per maggiori informazioni
     vedere la sezione <link
     linkend="language.oop.serialization">Serializzare oggetti</link> in 
     <link linkend="language.oop">Oggetti e Classi</link>.
    </para>
   </note>
    <para>
     <example>
      <title>Esempio di <function>serialize</function></title>
      <programlisting role="php">
<![CDATA[
// L'array multi-dimensionale $session_data contiene le informazioni della sessione
// per l'utente. Si userà serialize() per memorizzare le informazioni
// all'interno di un database alla fine della richiesta..

$conn = odbc_connect ("webdb", "php", "chicken");
$stmt = odbc_prepare ($conn,
      "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array (serialize($session_data), $PHP_AUTH_USER);
if (!odbc_execute ($stmt, &$sqldata)) {
    $stmt = odbc_prepare($conn,
     "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, &$sqldata)) {
    /* Qualcosa è andato storto */
    }
}
]]>
      </programlisting>
     </example>
    </para>
   <para>
    Vedere anche: <function>unserialize</function>.
   </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
