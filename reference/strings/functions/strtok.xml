<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.4 Maintainer: darvina Status: ready -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry id="function.strtok">
   <refnamediv>
    <refname>strtok</refname>
    <refpurpose>Suddivide una stringa in token</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>strtok</methodname>
      <methodparam><type>string</type><parameter>arg1</parameter></methodparam>
      <methodparam><type>string</type><parameter>arg2</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>strtok</function> suddivide la stringa(<parameter>arg1</parameter>)
     in piccole stringhe (tokens), in cui ciascun token è delimitato dal
     carattere indicato in <parameter>arg2</parameter>.
     Perciò, se si ha la stringa  "This is an example string" la si può
     dividere nelle singole parole utilizzando come separatore
     lo spazio.
     <example>
      <title>Esempio di uso di <function>strtok</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$string = "This is\tan example\nstring";
/* Use tab and newline as tokenizing characters as well  */
$tok = strtok($string, " \n\t");
while ($tok) {
    echo "Word=$tok<br />";
    $tok = strtok(" \n\t");
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Soltanto la prima chiamata a <function>strtok</function> utilizza il parametro stringa.
     Ogni chiamata successiva richiede solo il carattere da utilizzare, poichè
     la funzione tiene traccia di dove è arrivata nella stringa corrente. Per ripartire da capo
     o iniziare con una nuova stringa ri-chiamare <function>strtok</function>
     con il parametro stringa. Nota: si possono mettere più caratteri
     come separatori di stringhe. Il testo iniziale verrà suddiviso
     quando viene trovato uno qualsiasi di questi caratteri.
     Attenzione che soltanto la prima chiamata di strtok userà l'argomento stringa.
    </para>
    <para>
     Il comportamento su segmenti vuoti è cambiato dal PHP 4.1.0. La vecchia
     versione restituiva una stringa vuota, mentre la nuova, più correttamente,
     salta quella parte di stringa:
     <example>
      <title>Vecchio comportamento di <function>strtok</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$first_token  = strtok('/something', '/');
$second_token = strtok('/');
var_dump($first_token, $second_token);
?>
]]>
      </programlisting>
      <para>
       Output:
      </para>
      <screen>
<![CDATA[
    string(0) ""
    string(9) "something"
]]>
      </screen>
     </example>
     <example>
      <title>Nuovo comportamento di <function>strtok</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$first_token  = strtok('/something', '/');
$second_token = strtok('/');
var_dump($first_token, $second_token);
?>
]]>
      </programlisting>
      <para>
       Output:
      </para>
      <screen>
<![CDATA[
    string(9) "something"
    bool(false)
]]>
      </screen>
     </example>
    </para>
    <para>
     Fare attenzione ai token uguali a "0". Questi possono essere
     considerati &false; nelle espressioni condizionali.
    </para>
    <para>
     Vedere anche: <function>split</function> e
     <function>explode</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
