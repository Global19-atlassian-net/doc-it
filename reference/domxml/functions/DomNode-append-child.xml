<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.5 Maintainer: darvina Status: ready -->
<!-- splitted from ./en/functions/domxml.xml, last change in rev 1.40 -->
  <refentry id='function.DomNode-append-child'>
   <refnamediv>
    <refname>DomNode->append_child</refname>
    <refpurpose>
     Accoda un nuovo figlio
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <methodsynopsis>
     <type>object</type><methodname>DomNode->append_child</methodname>
     <methodparam><type>object</type><parameter>nuovo_nodo</parameter></methodparam>
    </methodsynopsis>
    <para>
     Questa funzione accoda un nodo figlio ad un elenco pre-esistente di figli oppure
     crea una nuova lista di figli. Il nodo figlio può essere creato con funzioni tipo
     <function>domdocument_create_element</function>,
     <function>domdocument_create_text</function> ecc. oppure usando un qualsiasi
     altro nodo.
    </para>
    <para>
     (PHP &lt; 4.3) Prima che sia aggiunto un nuovo nodo questo viene duplicato. Quindi
     il nuovo nodo è una nuova copia che può essere modificata senza variare il
     nodo passato alla funzione. Se il nodo ha dei nodi figli, anche
     questi saranno duplicati, ciò rende facile duplicare grandi parti
     di un documento xml. Il valore restituito è il nodo figlio
     accodato. Se si prevede di fare ulteriori modifiche al nodo aggiunto,
     occorre usare il nodo restituito.
    </para>
    <para>
     (PHP 4.3.0/4.3.1) Il nuovo nodo figlio <parameter>nuovo_nodo</parameter> viene prima rimosso
     dal contesto esistente, se ne è già un figlio di DomNode.
     Quindi viene mosso e non più copiato.
    </para>
    <para>
     (PHP &gt;= 4.3.2) Il nuovo nodo figlio <parameter>nuovo_nodo</parameter> viene prima rimosso
     dal contesto esistente, se ne esiste uno nel documento.
     Quindi viene mosso e non più copiato. Questo comportamento si attiene
     alle specifiche W3C. Se si desidera duplicare una grande parte di un documento 
     xml, occorre utilizzare DomNode->clone_node() prima di accodare il nodo.
    </para>
    <para>
     Nel seguente esempio si accoderà un nuovo nodo ad un documento
     e si imposterà l'attributo "align" a "left".
     <example>
      <title>Aggiunta di un nodo figlio</title>
      <programlisting role="php">
<![CDATA[
<?php
$doc = domxml_new_doc("1.0");
$node = $doc->create_element("para");
$newnode = $doc->append_child($node);
$newnode->set_attribute("align", "left");
?>
]]>
      </programlisting>
     </example>
     L'esempio precedente può anche essere scritto:
     <example>
      <title>Aggiunta di un nodo figlio</title>
      <programlisting role="php">
<![CDATA[
<?php
$doc = domxml_new_doc("1.0");
$node = $doc->create_element("para");
$node->set_attribute("align", "left");
$newnode = $doc->append_child($node);
?>
]]>
      </programlisting>
     </example>
     Il seguente è un esempio più complesso. Prima cerca un dato elemento,
     quindi lo si duplica, compresi i suoi figli, lo si aggiunge come un fratello.
     Infine si aggiunge un attributo ad uno dei figli del nuovo nodo
     e quindi si scarica il documento.
     <example>
      <title>Aggiunta di un nodo figlio</title>
      <programlisting role="php">
<![CDATA[
<?php
include("example.inc");

if(!$dom = domxml_open_mem($xmlstr)) {
  echo "Error while parsing the document\n";
  exit;
}

$elements = $dom->get_elements_by_tagname("informaltable");
print_r($elements);
$element = $elements[0];

$parent = $element->parent_node();
$newnode = $parent->append_child($element);
$children = $newnode->children();
$attr = $children[1]->set_attribute("align", "left");

echo "<PRE>";
$xmlfile = $dom->dump_mem();
echo htmlentities($xmlfile);
echo "</PRE>";
?>
]]>
      </programlisting>
     </example>
     L'esempio precedente può anche essere svolto con
     <function>domnode_insert_before</function> invece di
     <function>domnode_append_child</function>.
    </para>
    <para>
     Vedere anche <function>domnode_insert_before</function>,
              <function>domnode_clone_node</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
