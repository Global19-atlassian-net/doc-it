<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./it/functions/regex.xml, last change in rev 1.1 -->
<!-- last change to 'ereg' in en/ tree in rev 1.2 -->
<!-- EN-Revision: 1.9 Maintainer: darvina Status: ready -->
<!-- OLD-Revision: 1.42/EN.1.2 -->
  <refentry id="function.ereg">
   <refnamediv>
    <refname>ereg</refname>
    <refpurpose>Riconoscimento di espressione regolare</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>ereg</methodname>
      <methodparam><type>string</type><parameter>epressione_regolare</parameter></methodparam>
      <methodparam><type>string</type><parameter>stringa</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>&amp;regs</parameter></methodparam>
     </methodsynopsis>
    <note>
     <para>
      Poichè utilizza espressioni regolari con sintassi compatibile 
      con PERL, <function>preg_match</function>, è spesso una alternativa
      più veloce a <function>ereg</function>.
     </para>
    </note>
    <simpara>
     Ricerca in <parameter>stringa</parameter> testi che possano incrociarsi
     con l'espressione regolare indicata in <parameter>espressione_regolare</parameter> distinguendo tra 
     lettere minuscole e maiuscole.
    </simpara>
    <simpara>
     Se le parti di testo poste tra parentesi nel campo 
     <parameter>espressione_regolare</parameter> sono incontrate nella 
     <parameter>stringa</parameter> e la funzione viene chiamata utilizzando
     il terzo parametro <parameter>regs</parameter>, il testo riconosciuto
     sarà memorizzato nella matrice <parameter>regs</parameter>.
     L'indice 1, $regs[1], conterrà la sottostringa che parte dalla prima
     parentesi sinistra; $regs[2] conterrà la sottostringa a partire dalla
     seconda e così via. L'indice 0, $regs[0], conterrà la copia completa
     della stringa riconosciuta.
    </simpara>	
    <note>
     <simpara>
     Fino alla versione di PHP 4.1.0 compresa, <varname>$regs</varname>
     conterrà esattamente 10 elementi, anche se il numero delle stringhe
     riconosciute sia maggiore o minore di 10. Ciò non limita
     <function>ereg</function> nella ricerca di più sottostringhe.
     Se non si riconoscono testi, <literal>$regs</literal> non
     sarà modificato da <function>ereg</function>. 
    </simpara>
    </note>    
    <simpara>
     La funzione ritorna la lunghezza della stringa riconosciuta se le ricerche previste da 
     <parameter>espressione_regolare</parameter> sono riscontrate in 
     <parameter>stringa</parameter>. Viene restituito &false; se non
     si hanno riscontri, oppure si verificano degli errori.
    </simpara>
    <para>
     Nel seguente frammento di codice, una data in formato
     ISO (YYYY-MM-DD) verrà visualizzata nel formato DD.MM.YYYY:
    </para>
    <para>
     <example>
      <title>Esempio dell'uso di <function>ereg</function> Esempio</title>
      <programlisting role="php">
<![CDATA[
<?php
if (ereg ("([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})", $data, $regs)) {
    echo "$regs[3].$regs[2].$regs[1]";
} else {
    echo "Formato di data non valido: $data";
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Vedere anche 
     <function>eregi</function>,
     <function>ereg_replace</function>,
     <function>eregi_replace</function>,
     <function>preg_match</function>,
     <function>strpos</function> e
     <function>strstr</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
