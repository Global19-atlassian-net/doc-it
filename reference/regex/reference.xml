<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.11 Maintainer: darvina Status: ready -->
 <reference xml:id="ref.regex" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Funzioni per le espressioni regolari (POSIX estesa)</title>
  <titleabbrev>POSIX Regex</titleabbrev>

  <partintro>
   <section xml:id="regex.intro">
    &reftitle.intro;
    <tip>
     <para>
      Il PHP, utilizzando le <link linkend="ref.pcre">funzioni PCRE</link>,
      supporta anche le espressioni regolari con una sintassi compatibile con Perl.
      Queste funzioni supportano riconoscimenti "pigliatutto", asserzioni, criteri condizionali,
      e diverse altre caratteristiche che non sono supportate dalla sintassi POSIX estesa. 
     </para>
    </tip>
    <warning>
     <para>
      Queste funzioni per l'espressioni regolari non sono binary-safe. Le <link
      linkend="ref.pcre">funzioni PCRE</link> lo sono.
     </para>
    </warning>
    <para>
     In PHP, le espressioni regolari sono utilizzate per complesse 
     manipolazioni di stringhe. Le espressioni regolari utilizzate da PHP sono di tipo
     POSIX esteso così come definito in POSIX 1003.2. Per una descrizione
     completa delle espressione regolari POSIX, vedere la pagina del
     <link xlink:href="&url.regex.man;">manuale di regex</link>  inclusa nella directory di regex nella distribuzione 
     di PHP. Questa è in formato man, pertanto per poterle leggere occorre
     eseguire <command>man /usr/local/src/regex/regex.7</command>.
    </para>
   </section>
   
   <section xml:id="regex.requirements">
    &reftitle.required;
    &no.requirement;
   </section>
   
   &reference.regex.configure;

   <section xml:id="regex.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section xml:id="regex.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   <section xml:id="regex.constants">
    &reftitle.constants;
    &no.constants;
   </section>

   <section xml:id="regex.examples">
    &reftitle.examples;
    <para>
     <example>
      <title>Esempi di espressione regolare</title>
      <programlisting role="php">
<![CDATA[
<?php
/* Restituisce vero se "abc"
   viene trovata ovunque in $string. */
ereg("abc", $string);            

/* Restituisce vero se "abc"
   viene trovata all'inizio di $string. */
ereg("^abc", $string);

/* Restituisce vero se "abc"
   viene trovata alla fine di $string. */
ereg("abc$", $string);

/* Restituisce vero se il browser
   è Netscape 2, 3 oppure MSIE 3. */
eregi("(ozilla.[23]|MSIE.3)", $HTTP_USER_AGENT);

/* Posizione tre parole separate da spazio
   in $regs[1], $regs[2] e $regs[3]. */
ereg("([[:alnum:]]+) ([[:alnum:]]+) ([[:alnum:]]+)", $string, $regs); 

/* Posiziona il tag <br /> all'inizio di $string. */
$string = ereg_replace("^", "<br />", $string);

/* Posiziona il tag <br /> alla fine di $string. */ 
$string = ereg_replace("$", "<br />", $string);

/* Toglie ogni carattere di invio
   da $string. */
$string = ereg_replace("\n", "", $string);
?>
]]>
      </programlisting>
     </example>
    </para>
   </section>

   <section xml:id="regex.seealso">
    &reftitle.seealso;
    <para>
     Per maggiori dettagli sulle espressioni regolari compatibili con Perl
     vedere il capitolo sulle <link linkend="ref.pcre">funzioni PCRE</link>.
     La funzione <function>fnmatch</function> fornisce il riconoscimento
     dei caratteri jolly tipici della linea di comando.
    </para>
   </section>
  </partintro>
  &reference.regex.functions;
 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

