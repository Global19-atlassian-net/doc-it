<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.7 Maintainer: darvina Status: ready -->
<refentry id="function.sqlite-popen">
 <refnamediv>
  <refname>sqlite_popen</refname>
  <refpurpose>
   Apre una connessione persistente ad un database SQLite. Crea il 
   database se non esiste
  </refpurpose>
 </refnamediv>
 <refsect1>
  <title>Descrizione</title>
  <methodsynopsis>
   <type>resource</type><methodname>sqlite_popen</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>&amp;error_message</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   Questa funzione agisce in modo identico a <function>sqlite_open</function>
   tranne che utilizza il meccanismo delle risorse persistenti insito in PHP.
   Per maggiori informazioni sui parametri leggere la
   pagina del manuale relativa a <function>sqlite_open</function>.
  </simpara>
  <para>
   <function>sqlite_popen</function> per prima cosa verifica se esiste già un connessione
   persistente per il dato 
   <parameter>filename</parameter>.  Se ne trova una restituisce quella
   altrimenti ne apre una nuova.
  </para>
  <para>
   Il beneficio di questo approccio è che si evita il costo, in termini di performance,
   di dovere ri-leggere lo schema del database e degli indici ad ogni pagina
   servita dal server web (qualsiasi SAPI tranne CGI o CLI).
  </para>
  <note>
   <simpara>
    Se si utilizza la connessione persistente, ed il sottostante database viene aggiornato da un processo
    che gira in background (ad esempio via crontab), e questo processo ricrea
    il database riscrivendolo (ad esempio cancellandolo e scrivendone uno nuovo, oppure
    movendo la nuova versione sulla vecchia),
    si possono manifestare comportamenti indefiniti quando si torna ad utilizzare la
    connessione persistente verso il vecchio database.
   </simpara>
   <simpara>
    Per evitare questa situazione, occorre che il processo in background apra lo stesso database
    ed esegua gli aggiornamenti mediante transazioni.
   </simpara>
  </note>
  <para>
   Vedere anche <function>sqlite_open</function>,
   <function>sqlite_close</function> e
   <function>sqlite_query</function>.
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
