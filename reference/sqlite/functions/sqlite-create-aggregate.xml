<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.12 Maintainer: darvina Status: ready -->
<refentry xml:id="function.sqlite-create-aggregate" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>sqlite_create_aggregate</refname>
  <refname>SQLiteDatabase->createAggregate</refname>
  <refpurpose>Registra un aggregato UDF da utilizzare nelle istruzioni SQL</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>sqlite_create_aggregate</methodname>
   <methodparam><type>resource</type><parameter>dbhandle</parameter></methodparam>
   <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
   <methodparam><type>callback</type><parameter>step_func</parameter></methodparam>
   <methodparam><type>callback</type><parameter>finalize_func</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>num_args</parameter></methodparam>
  </methodsynopsis>
  <para>Versione ad oggetti (metodo):</para>
  <classsynopsis>
   <ooclass><classname>SQLiteDatabase</classname></ooclass>
   <methodsynopsis>
    <type>bool</type><methodname>createAggregate</methodname>
    <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
    <methodparam><type>callback</type><parameter>step_func</parameter></methodparam>
    <methodparam><type>callback</type><parameter>finalize_func</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>num_args</parameter></methodparam>
   </methodsynopsis>
  </classsynopsis>
  <para>
   <function>sqlite_create_aggregate</function> è simile a
   <function>sqlite_create_function</function> tranne che le funzioni di registrazione
   possono essere utilizzate per calcolare un risultato aggregato da tutte le righe
   della query.
  </para>
  <para>
   La differenza chiave tra questa funzione e 
   <function>sqlite_create_function</function> è che entrambe le funzioni sono necessarie
   per gestire gli aggregati; la funzione <parameter>step_func</parameter> viene richiamata
   per ogni riga del set di risultati. La funzione PHP personalizzata dovrebbe
   accumulare i dati memorizzarli nel contesto di aggregazione.
   Una volta che tutte le righe sono state processate,
   si esegue la funzione <parameter>finalize_func</parameter> che dovrebbe
   prendere i dati dal contesto di aggregazione e restituire il risultato.
   La funzione personalizzata deve restituire un tipo riconosciuto da SQLite
   (ad esempio <link linkend="language.types.intro">un tipo scalare</link>).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>dbhandle</parameter></term>
     <listitem>
      <para>
       Risorsa SQLite Database restituita da <function>sqlite_open
       </function> quando usato in modo procedurale. Questo parametro non è
       richiesto nel metodo ad oggetti.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>function_name</parameter></term>
     <listitem>
      <para>
       Nome della funzione usata nell'istruzione SQL.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>step_func</parameter></term>
     <listitem>
      <para>
       Funzione richiamata per ogni riga del set di risultati.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>finalize_func</parameter></term>
     <listitem>
      <para>
       Funzione di callback richiamata per aggragare i dati da ogni riga.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>num_args</parameter></term>
     <listitem>
      <para>
       Suggerisce al parser SQLite se la funzione di callback accetta un
       numero predefinito di argomenti.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Esempio di una funzione di aggregazione lunghezza_massima</title>
    <programlisting role="php">
<![CDATA[
<?php
$data = array(
   'one',
   'two',
   'three',
   'four',
   'five',
   'six',
   'seven',
   'eight',
   'nine',
   'ten',
   );
$dbhandle = sqlite_open(':memory:');
sqlite_query($dbhandle, "CREATE TABLE strings(a)");
foreach ($data as $str) {
    $str = sqlite_escape_string($str);
    sqlite_query($dbhandle, "INSERT INTO strings VALUES ('$str')");
}

function max_len_step(&$context, $string) 
{
    if (strlen($string) > $context) {
        $context = strlen($string);
    }
}

function max_len_finalize(&$context) 
{
    return $context;
}

sqlite_create_aggregate($dbhandle, 'max_len', 'max_len_step', 'max_len_finalize');

var_dump(sqlite_array_query($dbhandle, 'SELECT max_len(a) from strings'));

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   In questo esempio creiamo una funzione di aggregazione che calcola
   la lunghezza della stringa più lunga presente in una colonna della
   tabella. Per ciascuna riga, si esegue la funzione <literal>max_len_step</literal>
   nella quale viene passato il parametro <parameter>context</parameter>. Questo parametro
   è come una qualsiasi variabile PHP ed è impostata per contenere un array od un
   oggetto. In questo esempio, verrà utilizzata semplicemente per contenere
   la lunghezza massima della stringa; se la
   <parameter>string</parameter> è di lunghezza superiore al valore
   massimo corrente, noi aggiorneremo il contesto affinchè registri il nuovo massimo.
  </para>
  <para>
   Quando sono state processate tutte le righe, SQLite esegue la funzione
   <literal>max_len_finalize</literal> per determinare il risultato aggregato.
   In questa funzione possiamo svolgere qualsiasi tipo di operazione basata sui dati
   presenti nel parametro <parameter>context</parameter>.
   Nel nostro esempio abbiamo calcolato il risultato man mano che si processava la righe, 
   pertanto non ci resta che restituire il valore.   
  </para>
  <note>
   <para>
      L'esempio precedente non avrebbe funzionato correttamente se la colonna 
    avesse contenuto dati binari. Guardare sul manuale la pagina
    <function>sqlite_udf_decode_binary</function> per una spiegazione del perché,
    e l'esempio di come questo rispetti la codifica binaria.
   </para>
  </note>
  <tip>
   <para>
    NON si raccomanda si memorizzare nel contesto una copia dei valori di ciascuna
    riga, per poi processarli alla fina; questo costringe SQLite a utilizzare una
    grande quantità di memoria per processare la query - basta pensare a quanta memoria
    sarebbe necessaria se si memorizzasse un milione di righe, ciscuna contenente una stringa
    di 32 byte.
   </para>
  </tip>
  <tip>
   <para>
    Si può utilizzare <function>sqlite_create_function</function> e
    <function>sqlite_create_aggregate</function> per non utilizzare la funzioni
    SQL native di SQLite.
   </para>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>sqlite_create_function</function></member>
    <member><function>sqlite_udf_encode_binary</function></member>
    <member><function>sqlite_udf_decode_binary</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
