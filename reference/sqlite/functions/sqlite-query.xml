<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.10 Maintainer: darvina Status: ready -->
<refentry id="function.sqlite-query">
 <refnamediv>
  <refname>sqlite_query</refname>
  <refpurpose>
   Esegue una query su un database e restituisce un puntatore al set di risultati
  </refpurpose>
 </refnamediv>
 <refsect1>
  <title>Descrizione</title>
  <methodsynopsis>
   <type>resource</type><methodname>sqlite_query</methodname>
   <methodparam><type>resource</type><parameter>dbhandle</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>resource</type><methodname>sqlite_query</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam><type>resource</type><parameter>dbhandle</parameter></methodparam>
  </methodsynopsis>
  <para>
   Esegue le istruzioni SQL indicate in <parameter>query</parameter> sul collegamento
   al database indicato dal parametro <parameter>dbhandle</parameter>.
  </para>
  <para>
   Questa funzione restituisce un handle o &false; se si verifica un errore.
   Nei casi di query che restituiscano delle righe, l'handle restituito dalla funzione
    può essere utilizzato nelle funzioni 
   <function>sqlite_fetch_array</function> e
   <function>sqlite_seek</function>.
  </para>  
  <para>
   A prescindere dal tipo di query, questa funzione restituisce &false; se la
   query fallisce.
  </para>
  <para>
   <function>sqlite_query</function> restituisce un puntatore ad un set di risultati
   bufferizzato e navigabile. Ciò è ragionevole per piccole query dove si ha la necessità
   di accedere alle righe in ordine casuale. I risultati bufferizzati allocano
   la memoria necessaria per contenere tutte le righe restituite dalla query,
   che non saranno restituite fino a che non saranno richieste.
   Se si ha soltanto la necessità di accedere alle righe in modo sequenziale,
   si raccomanda l'uso della funzione
   <function>sqlite_unbuffered_query</function>.
  </para>
  <note>
   <simpara>
    Sono supportate due sintassi alternative, questo per compatibilità
    con altri moduli per database (esempio MySql).
    La forma preferita è la prima, in cui 
    il parametro <parameter>dbhandle</parameter> è il primo della
    funzione.
   </simpara>
  </note>
  <warning>
   <simpara>
    SQLite <emphasis>esegue</emphasis> molteplici query separate da 
    punto e virgola, pertanto si possono eseguire dei batch SQL che possono
    essere caricati da file esterni o inseriti nello script. Tuttavia ciò 
    è valido solo quando non è utilizzato il risultato della funzione, se, al contrario, viene utilizzato,
    verrà eseguito solo la prima query. Funzioni tipo
    <function>sqlite_exec</function> eseguono sempre molteplici query
    SQL.
   </simpara>
   <simpara>
    Quando si eseguono query molteplici, il valore restituito può essere 
    &false; se vi è un errore, oppure indefinito in caso contrario (
    può essere &true; oppure può restituire un handle ad un set di risultati).
   </simpara>
  </warning>
  <para>
   Vedere anche <function>sqlite_unbuffered_query</function> e 
   <function>sqlite_array_query</function>.
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
