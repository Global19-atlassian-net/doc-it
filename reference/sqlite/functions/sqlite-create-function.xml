<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 656d1610af1a960d87c8b7056e54d0d4c75fb123 Maintainer: pastore Status: ready -->
<!-- CREDITS: darvina -->
<refentry xml:id="function.sqlite-create-function" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>sqlite_create_function</refname>
  <refname>SQLiteDatabase::createFunction</refname>
  <refpurpose>
   Registra una funzione utente  "regolare" da utilizzare nelle istruzioni SQL
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>sqlite_create_function</methodname>
   <methodparam><type>resource</type><parameter>dbhandle</parameter></methodparam>
   <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>num_args</parameter><initializer>-1</initializer></methodparam>
  </methodsynopsis>
  <para>&style.oop; (metodo):</para>
   <methodsynopsis>
    <modifier>public</modifier> <type>void</type><methodname>SQLiteDatabase::createFunction</methodname>
    <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
    <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>num_args</parameter><initializer>-1</initializer></methodparam>
   </methodsynopsis>
  <para>
  La funzione <function>sqlite_create_function</function> permette di registrare una funzione
   PHP in SQLite come <acronym>UDF</acronym> (funzione definita dall'utente, User Defined
   Function), in modo che possa essere richiamata dalle istruzioni SQL.
  </para>
  <para>
   Le UDF possono essere utilizzate in qualsiasi istruzione SQL che permetta di richiamare funzioni,
   tipo SELECT e UPDATE e anche i triggers.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>dbhandle</parameter></term>
     <listitem>
      <para>
       Risorsa SQLite Database; restituita da <function>sqlite_open
       </function> quando usato in modo procedurale. Questo parametro non è
       richiesto nel metodo ad oggetti.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>function_name</parameter></term>
     <listitem>
      <para>
       Indica il nome della funzione che si vuole utilizzare nelle istruzioni SQL.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Funzione di callback richiamata per gestire la funzione SQL.
      </para>
      <note>
       <simpara>
        Le funzioni di callback devono restituire un tipo noto a SQLite
        (ad esempio un <link linkend="language.types.intro">tipo scalare</link>).
       </simpara>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>num_args</parameter></term>
     <listitem>
      <para>
       Indicazione al parser SQLite se la funzione di callback accetta
       un numero predefinito di argomenti.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  &sqlite.param-compat;
 </refsect1>

  <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Esempio di uso di <function>sqlite_create_function</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function md5_and_reverse($string) 
{
    return strrev(md5($string));
}

if ($dbhandle = sqlite_open('mysqlitedb', 0666, $sqliteerror)) {
    
    sqlite_create_function($dbhandle, 'md5rev', 'md5_and_reverse', 1);
    
    $sql  = 'SELECT md5rev(filename) FROM files';
    $rows = sqlite_array_query($dbhandle, $sql);
} else {
    echo 'Errore apertura del db sqlite: ' . $sqliteerror;
    exit;
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   In questo esempio abbiamo una funzione che calcola il valore md5 di una
   stringa e lo inverte. Quando sono eseguite le istruzioni SQL, queste restituiscono
   il nome del file trasformato dalla nostra funzione. Il valore restituito in
   <parameter>$rows</parameter> contiene il risultato processato.
  </para>
  <para>
   L'aspetto interessante di questa tecnica è che non è necessario elaborare
   i dati di una query utilizzando un ciclo &foreach; dopo avere eseguito una query per ottenere i dati
  </para>
  <para>
   Il PHP registra una speciale funzione chiamata <literal>php</literal> quando apre
   il database la prima volta. La funzione php può essere utilizzata per chiamare qualsiasi
   funzione PHP senza doverla registrare prima.
  </para>
  <para>
   <example>
    <title>Esempio dell'uso della funzione php</title>
    <programlisting role="php">
<![CDATA[
<?php
$rows = sqlite_array_query($dbhandle, "SELECT php('md5', filename) from files");
?>
]]>
    </programlisting>
    <para>
     Questo esempio chiamerà la funzione  <function>md5</function> per ciasuna colonna
     <literal>filename</literal> del database e restituirà il risultato
     in <parameter>$rows</parameter>
    </para>
   </example>
  </para>
  <note>
   <para>
    Per motivi di performance, il PHP non convertirà in automatico i dati binari
    passati da/per la UDF. Occorre convertire manualmente i parametri
    e restituire i valori nel medesimo modo, se si desidera elaborare i dati binari.
    Guardare le pagine relative a <function>sqlite_udf_encode_binary</function>
    e <function>sqlite_udf_decode_binary</function> per maggiori dettagli.
   </para>
  </note>
  <tip>
   <para>
    Non è raccomandabile l'uso delle UDF per processare dati
    binari, a meno che non siano richieste all'applicazione elevate
    performance.
   </para>
  </tip>
  <tip>
   <para>
    Si può utilizzare <function>sqlite_create_function</function> e
    <function>sqlite_create_aggregate</function> per sovrascrivere le funzioni SQL
    native in SQLite.
   </para>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>sqlite_create_aggregate</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
