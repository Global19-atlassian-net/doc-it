<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.6 Maintainer: darvina Status: ready -->
  <sect1 id="install.commandline">
   <title>Servers-CGI/linea di comando</title>
   <para>
    Per default il PHP viene compilato come programma CGI. Ciò crea un
    interprete di linea di comando che può essere utilizzato sia per elaborazioni CGI
    sia per script non connessi con il web. Se si utilizza un server web il
    PHP ha dei moduli atti allo scopo, questa dovrebbe essere la soluzione preferenziale
    per ragioni di performance. Tuttavia la versione CGI permette agli utenti
    di Apache di eseguire pagine PHP sotto differenti user id. Se si desidera
    utilizzare il PHP come CGI è opportuno leggere con attenzione il capitolo
    <link linkend="security.index">Security chapter</link>
   </para>
   <para>
    Dalla versione 4.3.0 di PHP sono state inserite nuove caratteristiche. Una
    nuova SAPI, chiamata CLI, è stata aggiunta è ha lo stesso nome dell'eseguibile CGI.
    Che cosa si installa nella directory <literal>{PREFIX}/bin/php</literal> dipende dalla
    line di configurazione, ciò è descritto dettagliatamente nel capitolo
    <link linkend="features.commandline">Uso del PHP da linea di comando
    </link>. Per maggiori dettagli leggere quel capitolo del manuale.
   </para>
   
   <sect2 id="install.commandline.testing">
    <title>Testing</title>
    <simpara>
     Se si ha compilato il PHP come programma CGI, si può testare l'eseguibile
     eseguendo <command>make test</command>. E' sempre una buona norma testare
     l'eseguibile che si è appena compilato. In questo modo si possono intercettare
     immediatamente eventuali problemi relativi alla piattaforma e non impazzire
     in una fase successiva.
    </simpara>
   </sect2>

   <sect2 id="install.commandline.benchmarking">
    <title>Benchmarking</title>
    <simpara>
     Se si compila il PHP 3 come programma CGI, si possono eseguire dei banchmark
     digitando <command>make bench</command>. Occorre notare che se si è
     abilitato il &safemode; il benchmark non è in grado di concludersi correttamente
     se richiede più di 30 secondi. Questo perchè la funzione &safemode; non può
     utilizzare la funzione <function>set_time_limit</function>.
     Utilizzare il parametro  <link
      linkend="ini.max-execution-time">max_execution_time</link>
     per impostare il tempo massimo di esecuzione di uno script.
     Il comando <command>make bench</command> ignora il <link
      linkend="configuration.file">file di configurazione</link>.
    </simpara>
    <note>
     <simpara>
        <command>make bench</command> è soltanto disponibile per PHP 3.
     </simpara>
    </note>
   </sect2>
   
   <sect2 id="install.commandline.using-variables">
    <title>Utilizzo delle variabili</title>
    <simpara>
      Alcuni server passano delle variabili d'ambiente che non sono definite
      nelle specifiche <ulink url="&url.cgispec;">CGI/1.1</ulink>.
      Soltanto le seguenti variabili sono standard, tutte le altre sono
      da considerarsi come estensioni del fornitore:
      AUTH_TYPE, CONTENT_LENGTH, CONTENT_TYPE,
      GATEWAY_INTERFACE, PATH_INFO, PATH_TRANSLATED, QUERY_STRING,
      REMOTE_ADDR, REMOTE_HOST, REMOTE_IDENT, REMOTE_USER,
      REQUEST_METHOD, SCRIPT_NAME, SERVER_NAME, SERVER_PORT,
      SERVER_PROTOCOL e SERVER_SOFTWARE
    </simpara>
   </sect2>
   
  </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
