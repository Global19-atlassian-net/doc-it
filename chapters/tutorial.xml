<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.12 Maintainer: cortesi Status: translating -->
 <chapter id="tutorial">
  <title>Una semplice introduzione</title>

  <para>
   Di seguito, in una breve e semplice introduzione, vorremmo mostrare 
   alcuni esempi di uso del PHP. Essi sono relativi soltanto alla creazione dinamica di pagine web
   usando PHP, anche se PHP non ha funzionalità limitate esclusivamente alla creazione delle sole pagine web. Fare
   riferimento alla sezione intitolata <link linkend="intro-whatcando">Cosa può fare
   PHP</link> per avere ulteriori informazioni.
  </para>
  <para>
   Pagine web create con PHP vengono trattate cone normali pagine HTML e
   possono essere create e modifichate nello stesso modo in cui si creano normali
   pagine HTML.
  </para>

  <sect1 id="tutorial.requirements">
   <title>Di cosa ho bisogno?</title>
   <para>
    In questa introduzione assumiamo che si abbia già a disposizione di un server con supporto per il PHP
    e che tutti i file con estensione <filename>.php</filename>
    vengano interpretati correttamente dal PHP. Su molti server questa è l'estensione predefinita
    per i file PHP, ma è opportuno chiedere al proprio amministratore del server per esserne sicuri. Se
    si dispone di un server con supporto per il PHP, allora non serve fare null'altro. &Egrave;
    sufficiente creare i file <filename>.php</filename> e metterli nella directory del proprio 
    server web, a questo punto sarà il server ad occuparsi di eseguirle magicamente per voi.
    Non c'è necessità di compilare nulla e nemmeno di installare
    strumenti aggiuntivi. Si pensi ai file PHP come a semplici file
    HTML che hanno però in aggiunta una nuova famiglia di magici tag che permettono di fare
    molte cose in più.
   </para>
  </sect1>

  <sect1 id="tutorial.firstpage">
   <title>La prima pagina PHP</title>
   <para>
    Creare un file con nome <filename>ciao.php</filename> nella directory
    del web server che abbia il seguente contenuto:
   </para>
   <para>
    <example>
     <title>Il nostro primo script PHP: <filename>ciao.php</filename></title>
     <programlisting role="php">
<![CDATA[
<html>
 <head>
  <title>Test PHP</title>
 </head>
 <body>
 <?php echo "Ciao Mondo<p>"; ?>
 </body>
</html>
]]>
     </programlisting>
     <para>
      L'output di questo script sarà:
      <screen role="html">
<![CDATA[
<html>
 <head>
  <title>Test PHP</title>
 </head>
 <body>
 Ciao Mondo<p>
 </body>
</html>
]]>
      </screen>
     </para>
    </example>
   </para>
   <para>
    Si noti che questo file non è come uno script CGI. Il file non necessita in alcun
    modo di essere eseguibile o speciale in alcuna maniera. Si pensi ad esso come ad un normale file
    HTML nel quale sono contenuti uno speciale set di tag che permettono di
    eseguire una moltitudine di cose interessanti.
   </para>
   <para>
    Questo programma era molto semplice e sicuramente non era necessario fare ricorso a
    PHP per creare una pagina come quella. Tutto ciò che essa fa è di visualizzare:
    <literal>Ciao Mondo</literal> usando la funzione <function>echo</function>
    di PHP.
   </para>
   <para>
    Se si è provato questo esempio e non ha dato alcun output, o è apparso un pop-up
    che chiedeva se di scaricare la pagina, o se è apparso il file come testo, è probabile che
    il server su cui si stanno effettuando le prove non ha abilitato PHP. Provare a chiedere al proprio amministratore
    di sistema di abilitarlo per voi usando il capitolo
    del manuale dedicato all'<link linkend="installation">Installazione</link>.  
    Se si vogliono sviluppare in locale script PHP, fare riferimento
    alla sezione <ulink url="&url.php.downloads;">download</ulink>.
    Si può sviluppare senza problemi sul proprio Sistema Operativo in locale, è bene
    installare anche un web server.
   </para>
   <para>
    L'obbiettivo dell'esempio è quello di mostrare il formato speciale dei tag PHP.
    In questo esempio abbiamo usato <literal>&lt;?php</literal> per indicare
    l'inizio di un tag PHP. Quindi abbiamo scritto la funzione PHP e abbiamo lasciato la modalità PHP usando
    il tag di chiusura, <literal>?&gt;</literal>. All'interno di un file HTML si può 
    entrare ed uscire dalla modalità PHP quante volte si desidera.
   </para>
   <note>
    <title>Nota riguardo gli editor di testo</title>
    <para>
     Esistomo molti editor di testo e Integrated Development Environment (IDE)
     che possono essere usati per creare, modificare e gestire file PHP. Una lista parziale
     di questi strumenti è disponibile qui: <ulink url="&url.phpeditorlist;">PHP Editor's
     List</ulink>. Se si desidera suggerire un nuo programma, visitare la pagina sopra
     e chiedere al curatore di aggiungerlo alla lista.
    </para>
   </note>
   
   <note>
    <title>Nota riguardo i Word Processor</title>
    <para>
     Word processor quali StarOffice Writer, Microsoft Word e Abiword non
     sono una buona scelta per modificare i file PHP.
    </para>

    <para>
     Se si vogliono provare comunque per scrivere questo script di test, ci si deve assicurare di salvare
     il file come SOLO TESTO, altrimenti PHP non sarà in grado di leggerlo e quindi non riuscirà ad 
     eseguire lo script.
    </para>
   </note>
   
   <note>
    <title>Nota riguardo Blocco Note di Windows</title>
    <para>    
     Se si scrive codice usando l'applicazione di Windows Blocco Note, occorre assicurarsi
     che i file vengano salvati con estensione .php. (Blocco Note aggiunge
     automaticamente l'estensione .txt ai file, a meno che non si intraprenda uno dei passi 
     descritti di seguito.)
    </para>

    <para>    
     Quando si salva il file e viene chiesto il nome da assegnargli,
     scrivere il nome fra virgolette (ad esempio: "ciao.php").
    </para>

    <para>
     Alternativamente, si può cliccare sul menu a tendina 'Documenti di Testo' nella finestra di
     salvataggio e cambiare l'impostazione in "Tutti i File". A quel punto si può inserire
     il nome del file, senza usare le virgolette.
    </para>
  </note>
   
  </sect1>

  <sect1 id="tutorial.useful">
   <title>Qualcosa di utile</title>
   <para>
    Andiamo a fare qualcosa leggermente pi&ugrave; utile. Andremo a controllare
    che tipo di browser sta utilizzando la persona che visita le nostre pagine.
    Per fare questo si andr&agrave; a controllare la stringa dell'user agent che il browser
    invia come parte della richiesta HTTP. Quest'informazione viene inviata in una <link
    linkend="language.variables">variabile</link>. Le Variabili iniziano sempre
    con il simbolo di dollaro &#36; in PHP. La variabile alla quale ci riferiamo adesso
    &egrave; <varname>$_SERVER["HTTP_USER_AGENT"]</varname>.
   </para>
   <note>
    <title>Note sulle variabili Autoglobali di PHP</title>
    <para>
   <link linkend="reserved.variables.server">$_SERVER</link> &egrave; una variabile
     speciale riservata a PHP la quale contiene tutte le informazioni relative al Web Server.
     &Egrave; conosciuta come Variabile autoglobale (o Superglobale). Per maggiori informazioni
     &egrave; possibile vedere la pagina del manuale relativa alle 
     <link linkend="language.variables.superglobals">Variabili Autoglobali</link>.
     Questo tipo di variabili sono state introdotte nella versione
     <ulink url="&url.php.release4.1.0;">4.1.0</ulink> di PHP. Nelle versioni precedenti abbiamo
     utilizzato le ormai vecchie <varname>$HTTP_SERVER_VARS</varname>, oggi in disuso,
     anche se queste continuano ad esistere. (Potete guardare nelle note
     del <link linkend="tutorial.oldcode">vecchio codice</link>.)
    </para>
   </note>
   <para>
    Per visualizzare questa variabile, dobbiamo semplicemente:
   </para>
   <para>
    <example>
    <title>Stampare video una variable (elemento d'Array)</title>
    <programlisting role="php">
<![CDATA[
<?php echo $_SERVER["HTTP_USER_AGENT"]; ?>
]]>
    </programlisting>
    <para>
     L'output (risultato) di questo script potrebbe essere:
     <screen role="html">
Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)
     </screen>
    </para>
   </example>
   </para>
   <para>
    Ci sono molti <link linkend="language.types">types</link> (tipi) di
    variabili diponibili in PHP.  Nell'esempio di sopra abbiamo stampato 
    un elemento di un'<link linkend="language.types.array">Array</link>.
    Gli Array possono essere molto utili.
   </para>
   <para>
    <varname>$_SERVER</varname> &egrave; soltanto una variabile che automaticamente
    viene resa diponibile da PHP.  &Egrave; possibile visualizzare una lunga lista nella
    sezione <link linkend="reserved.variables">Variabili riservate</link> del manuale 
    oppure ottenere la lista completa creando un file php nella seguente
    forma:
   </para>
   <para>
    <example>
     <title>Mostrare tutte le variabili predefinite di PHP con <function>phpinfo</function></title>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Se caricate questo documento da un browser riceverete una pagina
    pienda d'informazioni circa PHP, cos&igrave; come la lista di tutte le
    variabili diponibili.
   </para>
   <para>
    Potete mettere dichiarazioni multipli di PHP all'interno di un tag di PHP e
    generare piccoli blocchi di codice che fanno di pi&ugrave; di un singolo echo.
    Per esempio, se desiderassimo controllare per vedere se l'utente usa Internet
    Explorer potremmo fare qualcosa come questo: 
   </para>
   <para>
    <example>
     <title>Esempi usando le <link linkend="control-structures">strutture di 
     controllo</link> e le <link linkend="functions">funzioni</link></title>
     <programlisting role="php">
<![CDATA[
<?php
if (strstr($_SERVER["HTTP_USER_AGENT"], "MSIE")) {
	echo "Stai usando Internet Explorer<br />";
}
?>
]]>
     </programlisting>
     <para>
      L'output di esempio di questo script potrebbe essere:
      <screen role="html">
<![CDATA[
Stai usando Internet Explorer<br />
]]>
      </screen>
     </para>
    </example>
   </para>
   <para>
	Qui introduciamo una coppia di nuovi concetti. Abbiamo la dichiarazione
	<link linkend="control-structures.if">if</link> (se). Se avete una conoscenza
	con la sintassi di base usata dal linguaggio C questo dovrebbe sembrare
	logico per voi. Se non conoscete abbastanza C od un'altro linguaggio che
	utilizza la sintassi qui sopra descritta, dovreste probabilmente prendere
	qualsiasi libro introduttivo di PHP e leggere i primi capitoli, o leggere
	la parte del manuale relativa ai <link linkend="langref">Riferimenti del
	Linguaggio</link>. Potete trovare una lista dei libri di PHP
	su <ulink url="&url.php.books;">&url.php.books;</ulink>.
   </para>
   <para>
	Il secondo concetto che abbiamo introdotto era la chiamata alla funzione
	<function>strstr</function>. Questa &egrave; una funzione sviluppata in PHP
	che cerca una stringa all'interno di un'altra stringa. In questo caso
	abbiamo cercato <literal>"MSIE"</literal> all'interno della stringa
	<varname>$_SERVER["HTTP_USER_AGENT"]</varname>. Se la stringa viene trovata,
	la funzione restituisce &true; altrimenti, &false;. Se restituisce &true;,
	la dichiarazione <link linkend="control-structures.if">if</link> viene valuta
	come &true; ed il codice all'interno dei relativi {braces} (sostegni) sar&agrave;
	eseguito. Altrimenti, non esegue altro. Sentitevi liberi di generare esempi
	simili, con <link linkend="control-structures.if">if</link>,
	<link linkend="control-structures.else">else</link> (altrimenti) ed altre
	funzioni quali <function>strtoupper</function> e <function>strlen</function>.
	Ogni pagina del manuale, relativa a queste funzioni contiene anche degli
	esempi pratici. 
   </para>
   <para>
    Possiamo fare un passo avanti e mostrarvi come potete entrare ed uscite dal modo
    PHP anche da dentro di un blocco PHP:
   </para>
   <para>
    <example>
     <title>Intercallare i modi PHP e HTML</title>
     <programlisting role="php">
<![CDATA[
<?php
if (strstr($_SERVER["HTTP_USER_AGENT"], "MSIE")) {
?>
<h3>strstr dovrebbe ritornare true</h3>
<center><b>Stai usando Internet Explorer</b></center>
<?php
} else {
?>
<h3>strstr dovrebbe ritornare false</h3>
<center><b>Non stai usando Internet Explorer</b></center>
<?php
}
?>
]]>
     </programlisting>
     <para>
      L'output di esempio di questo script potrebbe essere:
      <screen role="html">
<![CDATA[
<h3>strstr dovrebbe ritornare true</h3>
<center><b>Stai usando Internet Explorer</b></center>
]]>
      </screen>
     </para>
    </example>
   </para>
   <para>
    Invece di usare la dichiarazione echo per fare l'output di qualcosa, saltiamo
    fuori dal modo PHP inviando soltanto HTML puro. Il punto importante da notare qui
    &egrave; che il flusso logico dello script rimane intatto. Solo uno dei blocchi di
    di HTML finir&agrave; per essere inviato come risposta, dipendendo se
    <function>strstr</function> ritorna &true; o &false;  in altre parole, 
    se la stringa <literal>MSIE</literal> viene trovata o meno.
   </para>
  </sect1>
   
  <sect1 id="tutorial.forms">
   <title>Trattare coi Form</title>
   <para>
    Una delle caratteritiche pi&ugrave; forti di PHP &egrave; il modo in cui
    gestisce i form. Il concetto da comprendere principalmente &egrave; che
    qualsiasi elemento di un form sar&agrave; automaticamente diponibile per i
    vostri script PHP. Per maggiori informazioni ed esempi relativi all'utilizzo dei
    form consultate la sezione del manuale che si riferisce a le
    <link linkend="language.variables.external">Variabili al di fuori di PHP</link>.
    A seguire un esempio di un form HTML:
   </para>
   <para>
    <example>
     <title>Un semplice form HTML</title>
     <programlisting role="html">
<![CDATA[
<form action="action.php" method="POST">
 Il tuo Nome: <input type="text" name="name" value="" />
 La tua et&agrave;: <input type="text" name="age" value ="" />
 <input type="submit">
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    There is nothing special about this form. It is a straight HTML form
    with no special tags of any kind. When the user fills in this form
    and hits the submit button, the <filename>action.php</filename> page
    is called. In this file you would have something like this:
   </para>
   <para>
    <example>
     <title>Printing data from our form</title>
     <programlisting role="php">
<![CDATA[
Hi <?php echo $_POST["name"]; ?>.
You are <?php echo $_POST["age"]; ?> years old.
]]>
     </programlisting>
     <para>
      A sample output of this script may be:
      <screen role="html">
<![CDATA[
Hi Joe.
You are 22 years old.
]]>
      </screen>
     </para>
    </example>
   </para>
   <para>
    It should be obvious what this does. There is nothing more to it.
    The <varname>$_POST["name"]</varname> and <varname>$_POST["age"]</varname>
    variables are automatically set for you by PHP.  Earlier we
    used the <varname>$_SERVER</varname> autoglobal, now above we just 
    introduced the <link linkend="reserved.variables.post">$_POST</link>
    autoglobal which contains all POST data.  Notice how the
    <emphasis>method</emphasis> of our form is POST.  If we used the 
    method <emphasis>GET</emphasis> then our form information would live in 
    the <link linkend="reserved.variables.get">$_GET</link> autoglobal instead.
    You may also use the <link linkend="reserved.variables.request">$_REQUEST</link>
    autoglobal if you don't care the source of your request data. It 
    contains a mix of GET, POST, COOKIE and FILE data.  See also the 
    <function>import_request_variables</function> function.
   </para>
  </sect1>
  
  <sect1 id="tutorial.oldcode">
   <title>Using old code with new versions of PHP</title>
   <para>
    Now that PHP has grown to be a popular scripting language, there are
    more resources out there that have listings of code you can reuse
    in your own scripts. For the most part the developers of the PHP
    language have tried to be backwards compatible, so a script written
    for an older version should run (ideally) without changes in a newer
    version of PHP, in practice some changes will usually be needed.
   </para>
   <para>
    Two of the most important recent changes that affect old code are:
    <itemizedlist>
     <listitem>
      <simpara>
       The deprecation of the old <varname>$HTTP_*_VARS</varname> arrays
       (which need to be indicated as global when used inside a function or
       method).  The following 
       <link linkend="language.variables.superglobals">autoglobal arrays</link>
       were introduced in PHP <ulink url="&url.php.release4.1.0;">4.1.0</ulink>. 
       They are: <varname>$_GET</varname>, <varname>$_POST</varname>, 
       <varname>$_COOKIE</varname>, <varname>$_SERVER</varname>, 
       <varname>$_ENV</varname>, <varname>$_REQUEST</varname>, and 
       <varname>$_SESSION</varname>.  The older <varname>$HTTP_*_VARS</varname>
       arrays, such as $HTTP_POST_VARS, still exist and have since PHP 3.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       External variables are no longer registered in the global scope by
       default.  In other words, as of PHP
       <ulink url="&url.php.release4.2.0;">4.2.0</ulink> the PHP directive 
       <link linkend="ini.register-globals">register_globals</link> is 
       <emphasis>off</emphasis> by default in &php.ini;. The preferred 
       method of accessing these values is via the autoglobal arrays mentioned
       above.  Older scripts, books, and tutorials may rely on this 
       directive being on.  If on, for example, one could use 
       <varname>$id</varname> from the URL 
       <literal>http://www.example.com/foo.php?id=42</literal>.  Whether on 
       or off, <varname>$_GET['id']</varname> is available.
      </simpara>
     </listitem>
    </itemizedlist>
    For more details on these changes, see the section on 
    <link linkend="language.variables.predefined">predefined variables</link>
    and links therein.
   </para>
  </sect1>
  
  <sect1 id="tutorial.whatsnext">
   <title>What's next?</title>
   <para>
    With what you know now you should be able to understand most of 
    the manual and also the various example scripts available in the
    example archives. You can also find other examples on the php.net
    websites in the links section:
    <ulink url="&url.php.links;">&url.php.links;</ulink>.
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

