<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: cortesi Status: translating -->
 <chapter xml:id="tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Una semplice introduzione</title>

  <para>
   Di seguito, in una breve e semplice introduzione, vorremmo mostrare  alcuni esempi
   per l'utilizzo di PHP. Essi sono relativi soltanto alla creazione dinamica di pagine web,
   anche se PHP non ha funzionalità limitate esclusivamente alla creazione
   delle sole pagine web. Fare riferimento alla sezione intitolata
   <link linkend="intro-whatcando">Cosa può fare PHP</link> per avere ulteriori
   informazioni.
  </para>
  <para>
   Le pagine web create con PHP vengono trattate come normali pagine HTML e
   possono essere create e modificate nello stesso modo in cui si sviluppano
   normali pagine HTML.
  </para>

  <sect1 xml:id="tutorial.requirements">
   <title>Di cosa ho bisogno?</title>
   <para>
    In questo tutorial assumiamo che il vostro server abbia il suporto PHP attivato e che tutti
    i file con estensione <filename>.php</filename> vengano gestiti da questo. Quasi in tutti
    i server questa è l'estensione di default per i file PHP., ma consultatevi col vostro
    system administrator per sicurezza. Se il vostro server supporta PHP, allora, non è
    necessario fare nulla. Semplicemente create i vostri file <filename>.php</filename> e
    scaricateli nella vostra directory web, il server le analizzerà e le eseguirà
    magicamente. Non è necessario compilare nulla nè installare strumenti aggiuntivi.
    Si pensi ai file PHP come a dei semplici file HTML con una intera famiglia aggiuntiva di magici
    tags che consentono di fare ogni sorta di cose.
    
   </para>
  </sect1>

  <sect1 xml:id="tutorial.firstpage">
   <title>La prima pagina PHP</title>
   <para>
    Creare un file con nome <filename>ciao.php</filename> nella directory
    del web server che abbia il seguente contenuto:
   </para>
   <para>
    <example>
     <title>Il nostro primo script PHP: <filename>ciao.php</filename></title>
     <programlisting role="php">
<![CDATA[
<html>
 <head>
  <title>Test PHP</title>
 </head>
 <body>
 <?php echo "Hello World!<p>"; ?>
 </body>
</html>
]]>
     </programlisting>
     <para>
      L'output di questo script sarà:
      <screen role="html">
<![CDATA[
<html>
 <head>
  <title>Test PHP</title>
 </head>
 <body>
Hello World!<p>
 </body>
</html>
]]>
      </screen>
     </para>
    </example>
   </para>
   <para>
    Si noti che questo file non è come uno script CGI. Il file non necessita in alcun
    modo di essere eseguibile o speciale in alcuna maniera. Si pensi ad esso come ad un normale file
    HTML nel quale sono contenuti uno speciale set di tags che permettono di
    eseguire una moltitudine di cose interessanti.
   </para>
   <para>
    Questo programma è molto semplice e sicuramente non era necessario fare ricorso a
    PHP per creare una pagina come quella. Tutto ciò che essa fa è di visualizzare:
    <literal>Hello World!</literal> usando la funzione <function>echo</function>
    di PHP.
   </para>
   <para>
    Se si è provato questo esempio e non ha dato alcun output, o è apparso un pop-up
    che chiedeva se scaricare la pagina, o se è apparso il file come testo, probabilmente che
    il server su cui si stanno effettuando le prove non ha abilitato PHP. Provare a chiedere al proprio amministratore
    di sistema di abilitarlo per voi usando il capitolo
    del manuale dedicato all'<link linkend="installation">Installazione</link>.  
    Se si vogliono sviluppare in locale script PHP, fare riferimento
    alla sezione <link xlink:href="&url.php.downloads;">download</link>.
    Si può sviluppare senza problemi sul proprio Sistema Operativo in locale, è bene
    installare anche un web server.
   </para>
   <para>
    L'obiettivo dell'esempio è quello di mostrare il formato speciale dei tag PHP.
    In questo esempio abbiamo usato <literal>&lt;?php</literal> per indicare
    l'inizio di un tag PHP. Quindi abbiamo scritto la funzione PHP e abbiamo lasciato la modalità PHP usando
    il tag di chiusura, <literal>?&gt;</literal>. All'interno di un file HTML si può 
    entrare ed uscire dalla modalità PHP quante volte si desidera.
   </para>
   <note>
    <title>Nota riguardo gli editor di testo</title>
    <para>
     Esistomo molti editor di testo e Integrated Development Environment (IDE)
     che possono essere usati per creare, modificare e gestire file PHP. Una lista parziale
     di questi strumenti è disponibile qui: <link xlink:href="&url.phpeditorlist;">PHP Editor's
     List</link>. Se si desidera suggerire un nuovo programma, visitare la pagina sopra
     e chiedere al curatore di aggiungerlo alla lista.
    </para>
   </note>
   
   <note>
    <title>Nota riguardo i Word Processor</title>
    <para>
     Word processor quali StarOffice Writer, Microsoft Word e Abiword non
     sono una buona scelta per modificare i file PHP.
    </para>

    <para>
     Se si vogliono provare comunque per scrivere questo script di test, ci si deve assicurare di salvare
     il file come SOLO TESTO, altrimenti PHP non sarà in grado di leggerlo e quindi non riuscirà ad 
     eseguire lo script.
    </para>
   </note>
   
   <note>
    <title>Nota riguardo Blocco Note di Windows</title>
    <para>    
     Se si scrive codice usando l'applicazione di Windows Blocco Note, occorre assicurarsi
     che i file vengano salvati con estensione .php. (Blocco Note aggiunge
     automaticamente l'estensione .txt ai file, a meno che non si intraprenda uno dei passi 
     descritti di seguito.)
    </para>

    <para>    
     Quando si salva il file e viene chiesto il nome da assegnargli,
     scrivere il nome fra virgolette (ad esempio: "ciao.php").
    </para>

    <para>
     In alternativa, si può cliccare sul menu a tendina 'Documenti di Testo' nella finestra di
     salvataggio e cambiare l'impostazione in "Tutti i File". A quel punto si può inserire
     il nome del file, senza usare le virgolette.
    </para>
  </note>
   
  </sect1>

  <sect1 xml:id="tutorial.useful">
   <title>Qualcosa di utile</title>
   <para>
    Andiamo a fare qualcosa di leggermente più utile. Andremo a controllare
    che tipo di browser sta utilizzando la persona che visita le nostre pagine.
    Per fare questo si andrà a controllare la stringa dell'user agent che il browser
    invia come parte della richiesta HTTP. Quest'informazione viene inviata in una <link
    linkend="language.variables">variabile</link>. Le Variabili iniziano sempre
    con il simbolo di dollaro &#36; in PHP. La variabile alla quale ci riferiamo adesso
    è <varname>$_SERVER["HTTP_USER_AGENT"]</varname>.
   </para>
   <note>
    <title>Note sulle variabili Autoglobali di PHP</title>
    <para>
   <link linkend="reserved.variables.server">$_SERVER</link> è una variabile
     speciale riservata a PHP la quale contiene tutte le informazioni relative al Web Server.
     È conosciuta come Variabile autoglobale (o Superglobale). Per maggiori informazioni
     è possibile vedere la pagina del manuale relativa alle 
     <link linkend="language.variables.superglobals">Variabili Autoglobali</link>.
     Questo tipo di variabili sono state introdotte nella versione
     <link xlink:href="&url.php.release4.1.0;">4.1.0</link> di PHP. Nelle versioni precedenti abbiamo
     utilizzato le ormai vecchie <varname>$HTTP_SERVER_VARS</varname>, oggi in disuso,
     anche se queste continuano ad esistere. (Potete guardare nelle note
     del <link linkend="tutorial.oldcode">vecchio codice</link>.)
    </para>
   </note>
   <para>
    Per visualizzare questa variabile, dobbiamo semplicemente:
   </para>
   <para>
    <example>
    <title>Stampare video una variable (elemento d'Array)</title>
    <programlisting role="php">
<![CDATA[
<?php echo $_SERVER["HTTP_USER_AGENT"]; ?>
]]>
    </programlisting>
    <para>
     L'output (risultato) di questo script potrebbe essere:
     <screen role="html">
Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)
     </screen>
    </para>
   </example>
   </para>
   <para>
    Ci sono molti <link linkend="language.types">types</link> (tipi) di
    variabili disponibili in PHP.  Nell'esempio di sopra abbiamo stampato 
    un elemento di un <link linkend="language.types.array">Array</link>.
    Gli Array possono essere molto utili.
   </para>
   <para>
    <varname>$_SERVER</varname> è soltanto una variabile che automaticamente
    viene resa diponibile da PHP.  È possibile visualizzare una lunga lista nella
    sezione <link linkend="reserved.variables">Variabili riservate</link> del manuale 
    oppure ottenere la lista completa creando un file php nella seguente
    forma:
   </para>
   <para>
    <example>
     <title>Mostrare tutte le variabili predefinite di PHP con <function>phpinfo</function></title>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Se caricate questo documento da un browser riceverete una pagina
    piena d'informazioni circa PHP, così come la lista di tutte le
    variabili disponibili.
   </para>
   <para>
    Potete mettere dichiarazioni multipli di PHP all'interno di un tag di PHP e
    generare piccoli blocchi di codice che fanno di più di un singolo echo.
    Per esempio, se desiderassimo controllare per vedere se l'utente usa Internet
    Explorer potremmo fare qualcosa come questo: 
   </para>
   <para>
    <example>
     <title>Esempi usando le <link linkend="language.control-structures">strutture di 
     controllo</link> e le <link linkend="language.functions">funzioni</link></title>
     <programlisting role="php">
<![CDATA[
<?php
if (strstr($_SERVER["HTTP_USER_AGENT"], "MSIE")) {
 echo "Stai usando Internet Explorer<br />";
}
?>
]]>
     </programlisting>
     <para>
      L'output di esempio di questo script potrebbe essere:
      <screen role="html">
<![CDATA[
Stai usando Internet Explorer<br />
]]>
      </screen>
     </para>
    </example>
   </para>
   <para>
 Qui introduciamo una coppia di nuovi concetti. Abbiamo la dichiarazione
 <link linkend="control-structures.if">if</link> (se). Se avete una conoscenza
 con la sintassi di base usata dal linguaggio C questo dovrebbe sembrare
 logico per voi. Se non conoscete abbastanza C od un altro linguaggio che
 utilizza la sintassi qui sopra descritta, dovreste probabilmente prendere
 qualsiasi libro introduttivo di PHP e leggere i primi capitoli, o leggere
 la parte del manuale relativa ai <link linkend="langref">Riferimenti del
 Linguaggio</link>. Potete trovare una lista dei libri di PHP
 su <link xlink:href="&url.php.books;">&url.php.books;</link>.
   </para>
   <para>
 Il secondo concetto che abbiamo introdotto era la chiamata alla funzione
 <function>strstr</function>. Questa è una funzione sviluppata in PHP
 che cerca una stringa all'interno di un'altra stringa. In questo caso
 abbiamo cercato <literal>"MSIE"</literal> all'interno della stringa
 <varname>$_SERVER["HTTP_USER_AGENT"]</varname>. Se la stringa viene trovata,
 la funzione restituisce &true; altrimenti, &false;. Se restituisce &true;,
 la dichiarazione <link linkend="control-structures.if">if</link> viene valuta
 come &true; ed il codice all'interno dei relativi {braces} (sostegni) sarà
 eseguito. Altrimenti, non esegue altro. Sentitevi liberi di generare esempi
 simili, con <link linkend="control-structures.if">if</link>,
 <link linkend="control-structures.else">else</link> (altrimenti) ed altre
 funzioni quali <function>strtoupper</function> e <function>strlen</function>.
 Ogni pagina del manuale, relativa a queste funzioni contiene anche degli
 esempi pratici. 
   </para>
   <para>
    Possiamo fare un passo avanti e mostrarvi come potete entrare ed uscite dal modo
    PHP anche dall' interno di un blocco PHP:
   </para>
   <para>
    <example>
     <title>Intercalare i modi PHP e HTML</title>
     <programlisting role="php">
<![CDATA[
<?php
if (strstr($_SERVER["HTTP_USER_AGENT"], "MSIE")) {
?>
<h3>strstr dovrebbe ritornare true</h3>
<center><b>Stai usando Internet Explorer</b></center>
<?php
} else {
?>
<h3>strstr dovrebbe ritornare false</h3>
<center><b>Non stai usando Internet Explorer</b></center>
<?php
}
?>
]]>
     </programlisting>
     <para>
      L'output di esempio di questo script potrebbe essere:
      <screen role="html">
<![CDATA[
<h3>strstr dovrebbe ritornare true</h3>
<center><b>Stai usando Internet Explorer</b></center>
]]>
      </screen>
     </para>
    </example>
   </para>
   <para>
    Invece di usare la dichiarazione echo per fare l'output di qualcosa, saltiamo
    fuori dal modo PHP inviando soltanto HTML puro. Il punto importante da notare qui
    è che il flusso logico dello script rimane intatto. Solo uno dei blocchi di
    di HTML finirà per essere inviato come risposta, dipendendo se
    <function>strstr</function> ritorna &true; o &false;  in altre parole, 
    se la stringa <literal>MSIE</literal> viene trovata o meno.
   </para>
  </sect1>
   
  <sect1 xml:id="tutorial.forms">
   <title>Trattare con i Form</title>
   <para>
    Una delle caratteritiche più forti di PHP è il modo in cui
    gestisce i form. Il concetto da comprendere principalmente è che
    qualsiasi elemento di un form sarà automaticamente disponibile per i
    vostri script PHP. Per maggiori informazioni ed esempi relativi all'utilizzo dei
    form consultate la sezione del manuale che si riferisce a le
    <link linkend="language.variables.external">Variabili al di fuori di PHP</link>.
    A seguire un esempio di un form HTML:
   </para>
   <para>
    <example>
     <title>Un semplice form HTML</title>
     <programlisting role="html">
<![CDATA[
<form action="action.php" method="POST">
 Il tuo Nome: <input type="text" name="name" value="" />
 La tua età: <input type="text" name="age" value ="" />
 <input type="submit">
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Questo form non ha niente di speciale. È un semplice form in HTML che non presenta
    nessun tipo di tags particolari. Quando l'utente riempie questo form
    e preme il pulsante submit, viene richiamata la pagina <filename>action.php</filename>.
    In questo file il risultato sarà qualcosa di simile:
   </para>
   <para>
    <example>
     <title>La stampa video di dati dal nostro form</title>
     <programlisting role="php">
<![CDATA[
Ciao <?php echo $_POST["name"]; ?>.
La tua età è di <?php echo $_POST["age"]; ?> anni.
]]>
     </programlisting>
     <para>
      Ecco un possibile output di questo script:
      <screen role="html">
<![CDATA[
Ciao Joe.
La tua età è di 22 anni.
]]>
      </screen>
     </para>
    </example>
   </para>
   <para>
   Ciò che avviene dovrebbe risultare ovvio. Non c' è altro da aggiungere. 
   Le variabili <varname>$_POST["name"]</varname> e <varname>$_POST["age"]</varname>
   vengono impostate automaticamente dal PHP. Prima avevamo usato la variabile autoglobal
     <varname>$_SERVER</varname>, ora invece abbiamo introdotto la variabile autoglobal
     <link linkend="reserved.variables.post">$_POST</link>
     che contiene tutti i dati di tipo POST. Notate che il <emphasis>metodo</emphasis> 
     del nostro form è il POST. Se usassimo il metodo <emphasis>GET</emphasis>
     le informazioni ricavate dal nostro form si troverebbero invece in
     <link linkend="reserved.variables.get">$_GET</link>.
    Si può anche usare la variabile <link linkend="reserved.variables.request">$_REQUEST</link>
    se la provenienza dei dati richiesti non ci interessa. Questa variabile 
    contiene un misto di dati GET, POST, COOKIE e FILE. Vedere anche la funzione  
    <function>import_request_variables</function>.
   </para>
  </sect1>
  
  <sect1 xml:id="tutorial.oldcode">
   <title>L' uso di vecchi codici con le nuove versioni di PHP</title>
   <para>
    Da quando il PHP è divenuto un linguaggio di scripting popolare,
    esistono più fonti che producono listati di codice che si possono adoperare
    nei propri scripts. La maggioranza degli sviluppatori del PHP ha cercato di renderlo 
    compatibile con le versioni precedenti, perciò uno script creato per una 
    vecchia versione del PHP dovrebbe girare senza modifiche (in teoria) in una più
    recente, ma in pratica spesso possono servire delle correzioni.
    </para>
   <para>
   Ecco due delle più importanti modifiche apportate al vecchio codice:
   <itemizedlist>
     <listitem>
      <simpara>
      Il disuso dei vecchi arrays <varname>$HTTP_*_VARS</varname> (che devono essere 
      dichiarati global quando vengano adoperati all' interno di una funzione o di un metodo).
      L' introduzione in PHP <link xlink:href="&url.php.release4.1.0;">4.1.0</link>
      dei seguenti <link linkend="language.variables.superglobals">autoglobal arrays</link>:
      <varname>$_GET</varname>, <varname>$_POST</varname>, 
       <varname>$_COOKIE</varname>, <varname>$_SERVER</varname>, 
       <varname>$_ENV</varname>, <varname>$_REQUEST</varname>, and 
       <varname>$_SESSION</varname>.  I vecchi arrays <varname>$HTTP_*_VARS</varname>
       quali $HTTP_POST_VARS, invece, continuano ad essere adoperati fin da PHP3.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
      Le variabili esterne non vengono più registrate nel global scope per default.
      In altre parole, da PHP <link xlink:href="&url.php.release4.2.0;">4.2.0</link>
      la direttiva PHP <link linkend="ini.register-globals">register_globals</link> 
      è <emphasis>off</emphasis> per default in &php.ini;. Il metodo consigliato per accedere
      a questi valori è quello che fa uso  degli arrays autoglobali suddetti. Scripts, libri
      e tutorials più vecchi devono attenersi a queste direttive.  Se, per esempio, qualcuno
      potesse usare <varname>$id</varname> dall'URL <literal>http://www.example.com/foo.php?id=42</literal>.
      La variabile, <varname>$_GET['id']</varname> sarebbe disponibile indifferentemente del fatto che sia on od off.
      </simpara>
     </listitem>
    </itemizedlist>
    Per ulteriori dettagli su queste innovazioni, vedere la sezione sulle
    <link linkend="language.variables.predefined">variabili predefinite</link>
    ed i links ad essa connessi.
   </para>
  </sect1>
  
  <sect1 xml:id="tutorial.whatsnext">
   <title>E poi?</title>
   <para>
   Con quello che sapete ora dovreste essere in grado di comprendere la maggior parte 
   del manuale ed anche i vari scripts di esempio reperibili nelle raccolte di esempi.
   Inoltre potete trovarne altri sui siti web di php.net nella sezione links:
    <link xlink:href="&url.php.links;">&url.php.links;</link>.
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

