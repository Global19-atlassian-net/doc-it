<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 1.21 Maintainer: darvina Status: ready -->
  <sect1 xml:id="install.apache" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
   <title>Server-Apache</title>
   <para>
    Questa sezione contiene note e suggerimenti specifici dell'installazione di PHP
    con server Apache, sia per le versioni <link linkend="install.apache.unix">Unix</link> sia per le versioni
    <link linkend="install.apache.windows">Windows</link>. Esiste, inoltre,
    una pagina separata per le <link linkend="install.apache2">istruzioni e note su Apache 2</link>.
   </para>   
   <sect2 xml:id="install.apache.unix">
    <title>Dettagli sull'installazione di PHP con Apache su Unix</title>
    <para>
     Si possono selezionare gli argomenti da aggiungere al comando 
     <command>configure</command> di linea 10 dalla <link
     linkend="install.configure">Lista completa delle opzioni di configurazione</link>.
     In queste note viene omesso il numero di versione per evitare di avere
     istruzioni non corrette. Nella realtà occorre sostituire 'xxx' con i valori
     di versione corretti.
    </para>

    <example xml:id="install.apache.unix.longer">
     <title>
      Istruzioni per l'installazione (versione di Apache con modulo condiviso) di PHP 4.
     </title>
     <screen>
<![CDATA[
1.  gunzip apache_xxx.tar.gz
2.  tar -xvf apache_xxx.tar
3.  gunzip php-xxx.tar.gz
4.  tar -xvf php-xxx.tar
5.  cd apache_xxx
6.  ./configure --prefix=/www --enable-module=so
7.  make
8.  make install
9.  cd ../php-xxx
10. Ora configuriamo il PHP. In questa fase si personalizza il PHP
    agendo sulle varie opzioni, tipo quali estensioni abilitare, Eseguire
    ./configure --help per avere una lista delle opzioni disponibili. Nell'esempio seguente si illustra 
    una semplice configurazione per il supporto di Apache 1 e MySQL. Il percorso a
    apxs nella vostra installazione può differire rispetto all'esempio.

    ./configure --with-mysql --with-apxs=/www/bin/apxs
10. ./configure --with-mysql --with-apxs=/www/bin/apxs
11. make
12. make install

  Se si decide di cambiare le opzioni di configurazione dopo l'installazione
  occorre ripere gli ultimi tre passi. Per attivare il nuovo modulo occorre
  riavviare Apache. Non è richiesta la ricompila di Apache.

  Nota: a meno di non avere dato indicazioni differenti, 'make install' installa anche PEAR,
  vari tools PHP tipo phpize e PHP CLI.

13. Configurazione del php.ini:
 
   cp php.ini-dist /usr/local/lib/php.ini

  Si può modificare il file .ini per impostare le opzioni di PHP.
  Se si desidera avere questo file in un'altra directory, utilizzare
  --with-config-file-path=/percorso al punto 10.

  Se si preferisce utilizzare php.ini-recommended, verificare l'elenco delle differenze rispetto 
  al php.ini e come queste influiscano sul comportamento del PHP.

14.  Modificare httpd.conf per caricare il modulo PHP.
     Il percorso nel lato destro dell'struzione LoadModule deve puntare  al percorso
     del modulo PHP nel sistema. Make install potrebbe averlo già aggiunto, 
     verificare per sicurezza.
  
     Con PHP 4:
       LoadModule php4_module libexec/libphp4.so

     Con PHP 45
       LoadModule php5_module libexec/libphp5.so

15. Nella sezione AddModule di httpd.conf, aggiungere sotto
    ClearModuleList:

    For PHP 4:  
      AddModule mod_php4.c
 
    For PHP 5: 
       AddModule mod_php5.c

16. Indicare ad Apache to considerare alcune estensioni tipo PHP.
    Si possono avere più estensioni interpretate come PHP aggiungendole alla riga usando 
    uno spazio tra una estensione e l'altra. Nell'esempio si aggiungerà l'estensione
    .phtml

        AddType application/x-httpd-php .php .phtml

    E' comune, inoltre, aggiungere l'estensione phps per visualizzare
    il codice PHP colorato. Ciò può essere fatto con:

        AddType application/x-httpd-php-source .phps

17. Utilizzare le normali procedure per avviare il server Apache. (Occorre
    riavviare il server, e non forzare una ricarica tramite i segnali
    HUP o USR1.)
]]>
      </screen>
     </example>

     <para>
      In base all'installazione di Apache e al tipo di Unix, esistono vari
      modi per fermare e avviare il server. Di seguito saranno illustrati alcuni
      metodi tipici per riavviare il server in differenti configurazioni
      di Apache/unix. Si deve sostituire <literal>/path/to/</literal> con il percorso
      in cui risiedono queste applicazioni nel sistema.
     </para>
     <para>
     <example> 
      <title>Esempio della sequenza di comandi per riavviare Apache</title>
      <programlisting role="shell">
<![CDATA[
1. Diverse varianti di Linux e SysV:
/etc/rc.d/init.d/httpd restart

2. Utilizzando apachectl:
/path/to/apachectl stop
/path/to/apachectl start

3. httpdctl e httpsdctl (tramite OpenSSL), simile a apachectl:
/path/to/httpsdctl stop
/path/to/httpsdctl start

4. Usando mod_ssl, o un'altro server SSL, si può fermare e riavviare
   il server manualmente:
/path/to/apachectl stop
/path/to/apachectl startssl
]]>
        </programlisting>
       </example> 
     </para> 
     <para>
      La directory degli eseguibili apachectl e http(s)dctl
      spesso varia. Se nel sistema esistono i comandi <literal>locate</literal> oppure
      <literal>whereis</literal> oppure <literal>which</literal>,
      si possono utilizzare per localizzare i programmi di controllo del server.
     </para>

     <para>
      Di seguito saranno illustrati differenti esempi di compila di PHP per Apache:
      <informalexample>
       <programlisting role="shell">
<![CDATA[
./configure --with-apxs --with-pgsql
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Questo crea la libreria condivisa <filename>libphp4.so</filename>
      che è il modulo caricato da Apache tramite la linea LoadModule del file
      &httpd.conf;. Il supporto a PostgreSQL
      è compreso nella libreria <filename>libphp4.so</filename>.
     </para>
     <para>
      <informalexample>
       <programlisting>
<![CDATA[
./configure --with-apxs --with-pgsql=shared
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Questo crea la libreria condivisa <filename>libphp4.so</filename>
      per Apache, ma crea anche una libreria condivisa
      <filename>pgsql.so</filename> che viene caricata in PHP
      o tramite le direttive del &php.ini; o caricata direttamente
      dallo script tramite la funzione <function>dl</function>.
     </para>
     <para>
      <informalexample>
       <programlisting>
<![CDATA[
./configure --with-apache=/path/to/apache_source --with-pgsql
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Questo crea una libreria <filename>libmodphp4.a</filename>, un file
      <filename>mod_php4.c</filename> e altri file di contorno e li copia
      nella directory <literal>src/modules/php4</literal> 
      nell'albero dei sorgenti di Apache. Quindi si può compilare Apache
      utilizzando <literal>--activate-module=src/modules/php4/libphp4.a</literal>
      e quindi il sistema di compila di Apache creerà il file
      <filename>libphp4.a</filename> e lo includerà staticamente 
      nell'eseguibile <filename>httpd</filename>. Il supporto per
      PostgreSQL verrà incluso direttamente in questo <filename>httpd</filename>,
      pertanto si avrà un unico eseguibile <filename>httpd</filename> comprendente
      tutto Apache e tutto il PHP.
     </para>
     <para>
      <informalexample>
       <programlisting>
<![CDATA[
./configure --with-apache=/path/to/apache_source --with-pgsql=shared
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Come l'istruzione precedente, tranne che invece di includere PostgreSQL
      direttamente nel file finale <filename>httpd</filename>, si avrà una
      libreria condivisa <filename>pgsql.so</filename> che può essere caricata in PHP
      o tramite le direttive del &php.ini; o direttamente
      dallo script tramite la funzione <function>dl</function>.
     </para>
     <para>
      Quando si compila il PHP nei differenti modi, si dovrebbe considerare
      i vantaggi e gli svantaggi di ciascun metodo. Compilarlo come libreria condivisa
      permette di compilare Apache separatamente, e quindi non si ha la necessità
      di ricompilarlo ogni volta che si desideri cambiare il PHP.
      Compilare il PHP all'interno di Apache (in modo statico) permette al PHP di
      essere caricato ed eseguito più velocemente. Per maggiori dettagli 
      vedere la pagian di Apache sul <link xlink:href="&url.apachedso;">supporto DSO</link>.
     </para>
    <note>
     <para>
      Attaulmente il file &httpd.conf; fornito di default contiene una sezione 
      come la seguente:
      <informalexample>
       <programlisting>
<![CDATA[
User nobody
Group "#-1"
]]>
       </programlisting>
      </informalexample>
      A meno che non venga cambiata in "Group nogroup" o qualcosa di simile (è anche
      comune l'uso di "Group daemon") il PHP non sarà in grado di aprire i file.
     </para>
    </note>  
    <note>
     <para>
     Accertarsi di avere specificato la versione di apxs installate quando si usa
     <option role="configure">--with-apxs=/path/to/apxs</option>.
     NON usare la versione di apxs presente nei sorgenti di Apache, ma quella
     installata nel sistema.
     </para>
    </note>   
   </sect2>
   <sect2 xml:id="install.apache.windows">
    <title>Installazione di PHP su Windows con Apache 1.3.x</title>
    
    <simpara>
     Esistono due metodi per installare PHP e Apache 1.3.x
     in Windows. Uno consiste nell'utilizzare l'eseguibile CGI (php.exe),
     la seconda consiste nell'usare il modulo DLL per Apache.
     In entrambi i casi occorre fermare il server Apache, editare il file
     &httpd.conf; per indicare ad Apache di utilizzare PHP.
    </simpara>
    <simpara>
     Occorre notare che ora il modulo SAPI sotto Windows
     è stato reso molto più stabile, noi raccomandiamo l'uso di questo
     piuttosto che l'eseguibile CGI poichè è molto più trasparente e sicuro.
    </simpara>
    <simpara>
     Sebbene vi possano essere alcune varianti nella configurazione di PHP
     con Apache, queste sono abbastanza semplici da essere utilizzate 
     dai neofiti. Consultare la documentazione di Apache per maggiori
     dettagli sulle direttive di configurazione.
    </simpara>
  
    <para>
     Se si decomprime il pacchetto PHP nella directory <filename>c:\php\</filename> come descritto
     nella sezione <link linkend="install.windows.manual">Passi per l'installazione manuale</link>,
     occorre inserire queste linee
     nella configurazione di Apache per attivare
     l'eseguibile CGI:
     <itemizedlist>
      <listitem>
       <simpara>
        <literal>
         ScriptAlias /php/ "c:/php/"
        </literal>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <literal>
         AddType application/x-httpd-php .php .phtml
        </literal>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <literal>
         Action application/x-httpd-php "/php/php.exe"
        </literal>
       </simpara>
      </listitem>
     </itemizedlist>
     Occorre rilevare che la seconda riga può essere presente nelle
     nuove versioni di &httpd.conf;, ma è commentata. Ricordarsi, inoltre,
     di sostituire <filename>c:/php/</filename> con la corretta directory
     del PHP.
     </para>

    <warning>
     <para>
      Utilizzando la configurazione CGI, il server è aperto a 
      possibili attacchi. Leggere il capitolo
      <link linkend="security.cgi-bin">CGI security 
      </link> per imparare a difendersi da questi attacchi.
     </para>
    </warning>

    <para>
     Se si desidera utilizzare PHP come modulo di Apache, occorre copiare 
     <filename>php4ts.dll</filename> nella directory <filename>windows/system</filename>
     (per Windows 9x/Me), <filename>winnt/system32</filename> (per Windows
     NT/2000) o <filename>windows/system32</filename> (per Windows XP)
     sostituendo ogni vecchio file. Quindi si deve aggiungere le seguenti 
     linee al file &httpd.conf; 
     <itemizedlist>
      <listitem>
       <simpara>
         Aprire &httpd.conf; con l'editor preferito e localizzare la
         direttiva <literal>LoadModule</literal> e aggiungere la seguente linea
         <emphasis>alla fine</emphasis> dell'elenco:
         <literal>LoadModule php4_module c:/php/sapi/php4apache.dll</literal>, oppure per il PHP 5
        <literal>LoadModule php5_module "c:/php/sapi/php5apache.dll"</literal>.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Si può rilevare che, dopo l'uso dell'installatore di Apache, occorre
        definire la direttiva <literal>AddModule</literal> per
        <filename>mod_php4.c</filename>. Questa è particolarmente importante se viene definita
        la direttiva <literal>ClearModuleList</literal>, che può essere
        trovata più sotto di qualche riga. Quando si troverà l'elenco delle istruzioni
        <literal>AddModule</literal>, aggiungere la seguente linea
        <emphasis>alla fine</emphasis> dell'elenco:
        <literal>AddModule mod_php4.c</literal> Per il PHP 5 utilizzare:
        <literal>AddModule mod_php5.c</literal>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
         Cercare una frase simile a 
         <literal># AddType allows you to tweak mime.types</literal>. Si troverà
         alcune righe tipo <literal>AddType</literal>, aggiungere la seguente linea
        <emphasis>alla fine</emphasis> dell'elenco:
         <literal>AddType application/x-httpd-php .php</literal>.
         Si può scegliere qualsiasi estensione si desideri elaborare tramite PHP. 
         Da parte nostra suggeriamo .php. Si può anche includere .html e .php3
         per avere compatibilità con il passato.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>

    <simpara>
     Dopo avere cambiato il file di configurazione, ricordarsi di riavviare il server,
     ad esempio, <command>NET STOP APACHE</command> seguito da
     <command>NET START APACHE</command>, se si esegue Apache come servizio
     di Windows, oppure utilizzare le opportune icone.
    </simpara>
    
    <simpara>
     Esistono due metodi per attivare la funzionalità di visualizzazione del sorgente;
     tuttavia il loro funzionamento dipende dall'installazione. Se si ha configurato
     Apache per utilizzare PHP come modulo SAPI, allora aggiungendo la 
     seguente linea al file &httpd.conf; (nello stesso punto in cui si è inserito
     <literal>AddType application/x-httpd-php .php</literal>) si può attivare 
     questa caratteristica:
     <literal>AddType application/x-httpd-php-source .phps</literal>.
    </simpara>
    <simpara>
     Se si è scelto di configurare Apache per utilizzare PHP come eseguibile CGI, allora
     occorre utilizzare la funzione <function>show_source</function>. Per ottenere ciò
     creare uno script PHP e aggiungere questa riga:
     <literal>&lt;?php show_source ("original_php_script.php"); ?&gt;</literal>. 
     Sostituire <literal>original_php_script.php</literal> con il nome del file
     di cui si vuole vedere il sorgente.
    </simpara>
    
    <note>
     <simpara>
      Nella versione Windows di Apache tutti i backslash nelle righe con percorsi tipo
      "c:\directory\file.ext", devono essere sostituiti con
      lo slash, tipo "c:/directory/file.ext".
     </simpara>
    </note>
   </sect2>
  </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
