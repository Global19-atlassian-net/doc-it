<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: n/a Maintainer: donelli Status: ready -->
 <chapter xml:id="features.file-upload" xmlns="http://docbook.org/ns/docbook">
  <title>Caricare file</title>

  <sect1 xml:id="features.file-upload.post-method">
   <title>Metodo POST per caricamento di file</title>
   <simpara>
    Questa caratteristica permette di caricare sia file di testo
    che binari.  Utilizzando le funzioni di PHP per l'autenticazione e manipolazione dei file,
    è possibile avere pieno controllo su chi ha i permessi per caricare un file e su
    ciò che deve essere fatto una volta che il file è stato caricato.
   </simpara>
   <simpara>
    Il PHP è in grado di riceve upload di file da qualsiasi browser
    compatibile con la RFC-1867 (compresi <productname>Netscape Navigator 3</productname>
    e successivi, <productname>Microsoft Internet Explorer 3</productname>
    con le patch di Microsoft, oppure le versioni successive senza patch).
   </simpara>

   <note>
     <title>Note relative alla configurazione</title>
     <para>
      Si vedano i parametri <link linkend="ini.file-uploads">file_uploads</link>,
      <link linkend="ini.upload-max-filesize">upload_max_filesize</link>,
      <link linkend="ini.upload-tmp-dir">upload_tmp_dir</link>, 
      <link linkend="ini.post-max-size">post_max_size</link> e
      <link linkend="ini.max-input-time">max_input_time</link>
      nel &php.ini;
     </para>
    </note>

   <para>
    Si noti che PHP permette l'upload di file con metodo PUT come utilizzato dai
    programmi <productname>Netscape Composer</productname> e 
    W3C <productname>Amaya</productname>. Si veda <link
    linkend="features.file-upload.put-method">Supporto per metodo PUT
    </link> per maggiori dettagli.
   </para>
   <para>
    <example>
     <title>Form di caricamento file</title>
     <para>
      La schermata di caricamento di un file può essere costruita con una form
      particolare, di questo tipo:
     </para>
     <programlisting role="html">
     <!-- The HTML comments in this example code are stripped.
     This needs to be fixed in livedocs. -->
<![CDATA[
<!-- Tipo di codifcia dei dati, DEVE essere specificato come segue -->
<form enctype="multipart/form-data" action="__URL__" method="POST">
    <!-- MAX_FILE_SIZE deve precedere campo di input del nome file -->
    <input type="hidden" name="MAX_FILE_SIZE" value="30000" />
    <!-- Il nome dell'elemento di input determina il nome nell'array $_FILES -->
    Send this file: <input name="userfile" type="file" />
    <input type="submit" value="Send File" />
</form>
]]>
     </programlisting>
     <para>
      L'<literal>__URL__</literal> dell'esempio precedente deve essere sostituito
      con il puntamento ad un file PHP.
     </para>
     <para>
      Il campo nascosto <literal>MAX_FILE_SIZE</literal> (misurato in byte) deve precedere
      il campo di input del file, ed il suo valore indica la dimensione massima di file accettata.
      Questa è un'informazione per il browser, ma anche il PHP lo verifica.
      E' facile aggirare questa impostazione sul browser,
      quindi non fate affidamento sul fatto che il navigatore si comporti come desiderato! 
      L'impostazione PHP lato server per la dimensione  massima non può comunque essere aggirata. 
      Tuttavia si può comunque inserire
      MAX_FILE_SIZE per evitare all'utente di attendere il trasferimento di un file
      prima di scoprire che è di dimensioni eccessive.
     </para>
    </example>
   </para>
  <note>
    <para>
     Accertarsi che il form di upload abbia l'impostazione <literal>enctype="multipart/form-data"</literal>
     altrimentio non funzionerà.
    </para>
   </note>

   <para>
    A partire dal PHP 4.1.0 esiste la variabile globale 
    <link linkend="reserved.variables.files">$_FILES</link>. (Utilizzare <varname>$HTTP_POST_FILES</varname>
    nelle versioni precedenti).
    Queste matrici contengono tutte le informazioni sui file inviati.
   </para>
   <para>
    Di seguito verrà illustrato il contenuto di
    <link linkend="reserved.variables.files">$_FILES</link> nel caso dell'esempio precedente. Si
    noti che si assume come nome del file inviato <emphasis>userfile</emphasis>, come nell'esempio
    precedente. Nella realtà questo può assurmere nome.
    <variablelist>
     <varlistentry>
      <term><varname>$_FILES['userfile']['name']</varname></term>
      <listitem>
       <para>
        Il nome originale del file sulla macchina dell'utente.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><varname>$_FILES['userfile']['type']</varname></term>
      <listitem>
       <para>
        Il mime-type del file, se il browser fornisce questa informazione. 
	Un esempio potrebbe essere <literal>"image/gif"</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><varname>$_FILES['userfile']['size']</varname></term>
      <listitem>
       <para>
        La dimensione, in bytes, del file caricato.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><varname>$_FILES['userfile']['tmp_name']</varname></term>
      <listitem>
       <para>
        Il nome del file temporaneo in cui il file caricato è salvato 
	sul server.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><varname>$_FILES['userfile']['error']</varname></term>
      <listitem>
       <para>
        Il <link linkend="features.file-upload.errors">codice di errore</link>
        associato all'upload di questo file. Questo elemento è stato aggiunto nella versione 4.2.0 di PHP.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <para>
    I file sono, di default, salvati in una directory temporanea sul server, a meno 
    che un diverso percorso sia specificato nella direttiva <link
    linkend="ini.upload-tmp-dir">upload_tmp_dir</link> nel file 
    &php.ini;. La directory del server predefinita può essere 
    cambiata impostando la variabile di ambiente <envar>TMPDIR</envar> in cui 
    è in esecuzione PHP. Non è possibile impostare questa variabile utilizzando 
    la funzione <function>putenv</function> da uno script PHP. 
    Questa variabile di ambiente può anche essere usata per assicurarsi che
    anche altre operazioni stiano lavorando sui file caricati.
        <example>
     <title>Verifica dell'upload di file</title>
     <para>
      Si vedano le definizioni delle funzioni <function>is_uploaded_file</function> e
      <function>move_uploaded_file</function> per maggiori dettagli.
      L'esempio seguente illustra il processamento di un file inviato tramite un
      form.
     </para>
     <programlisting role="php">
<![CDATA[
<?php
// Nelle versioni di PHP precedenti alla 4.1.0 si deve utilizzare  $HTTP_POST_FILES anzichè 
// $_FILES.
$uploaddir = '/var/www/uploads/';
$uploadfile = $uploaddir . basename($_FILES['userfile']['name']);
echo "<pre>";
if (move_uploaded_file($_FILES['userfile']['tmp_name'], $uploadfile)) {
    echo "File is valid, and was successfully uploaded.\n";
} else {
    echo "Possibile attacco tramite file upload!\n"; 
}
echo 'Alcune infromazioni di debug:';
print_r($_FILES); 

print "</pre>";

?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Lo script PHP che riceve il file caricato dovrebbe implementare la  
    logica necessaria per determinare cosa deve essere fatto con il file 
    caricato.  E' possibile, per esempio, utilizzare la variabile 
    <varname>$_FILES['userfile']['size']</varname> per eliminare file che siano troppo 
    grandi o troppo piccoli.  E' possibile utillizzare la variabile 
    <varname>$_FILES['userfile']['type']</varname> per eliminare tutti i file che non soddisfano certi criteri. 
    A partire da PHP 4.2.0, si può utilizzare <varname>$_FILES['userfile']['error']</varname> 
    ed organizzare la logica in base ai <link 
    linkend="features.file-upload.errors">codici di errore</link>.
    Quale che sia la logica, bisognerebbe comunque sempre
    cancellare il file dalla directory temporanea e spostarlo da qualche
    altra parte.
   </simpara>
   <simpara>
    Se non si è selezinato alcun file per l'upload, il PHP restituità
    <varname>$_FILES['userfile']['size']</varname> a 0, e
    <varname>$_FILES['userfile']['tmp_name']</varname> vuoto.
   </simpara>
   <simpara>
    Il file sarà eliminato dalla directory temporanea al termine della richiesta
     se non è stato mosso e rinominato.
   </simpara>
    <example>
     <title>Upload di una serie di file</title>
     <para>
      Il PHP supporta le <link linkend="faq.html.arrays">matrici HTML</link>
      anche con i file.
     </para>
     <programlisting role="html">
<![CDATA[
<form action="" method="post" enctype="multipart/form-data">
<p>Pictures:
<input type="file" name="pictures[]" />
<input type="file" name="pictures[]" />
<input type="file" name="pictures[]" />
<input type="submit" value="Send" />
</p>
</form>
]]>
     </programlisting>
     <programlisting role="php">
<![CDATA[
<?php
foreach ($_FILES["pictures"]["error"] as $key => $error) {
    if ($error == UPLOAD_ERR_OK) {
        $tmp_name = $_FILES["pictures"]["tmp_name"][$key];
        $name = $_FILES["pictures"]["name"][$key];
        move_uploaded_file($tmp_name, "data/$name");
    }
}
?>
]]>
     </programlisting>
    </example>
  </sect1>
 
  <sect1 xml:id="features.file-upload.errors"> 
   <title>Spiegazione dei messaggi di errore</title> 
    <simpara> 
    Dalla versione 4.2.0, il PHP restituisce un codice di errore nella matrice del file.
    Il codice di errore si trova nell'indice <literal>error</literal>
    e viene valorizzato durante
    l'upload del file da parte del PHP. In altre parole l'errore può essere 
    trovato in <varname>$_FILES['userfile']['error']</varname>. 
   </simpara> 
    <para> 
     <variablelist> 
      <varlistentry> 
       <term><constant>UPLOAD_ERR_OK</constant></term>
        <listitem> 
         <para> 
         Valore: 0; Non vi sono errori, l'upload è stato eseguito con successo.
       </para> 
      </listitem> 
     </varlistentry> 
     <varlistentry> 
      <term><constant>UPLOAD_ERR_INI_SIZE</constant></term>
      <listitem> 
       <para> 
        Valore: 1; Il file inviato eccede le dimensioni specificate nel parametro
        <link linkend="ini.upload-max-filesize">upload_max_filesize</link> 
        di &php.ini;. 
        </para> 
       </listitem> 
      </varlistentry> 
      <varlistentry> 
      <term><constant>UPLOAD_ERR_FORM_SIZE</constant></term>
      <listitem> 
       <para> 
        Valore: 2; Il file inviato eccede le dimensioni specificate
        nel parametro <emphasis>MAX_FILE_SIZE</emphasis> del form.
       </para> 
      </listitem> 
      </varlistentry> 
      <varlistentry> 
       <term><constant>UPLOAD_ERR_PARTIAL</constant></term>
       <listitem> 
         <para> 
         Valore: 3; Upload eseguito parzialmente. 
        </para> 
       </listitem> 
      </varlistentry> 
      <varlistentry> 
       <term><constant>UPLOAD_ERR_NO_FILE</constant></term>
       <listitem> 
        <para> 
         Valore: 4; Nessun file è stato inviato. 
       </para> 
       </listitem> 
      </varlistentry> 
      <varlistentry>
      <term><constant>UPLOAD_ERR_NO_TMP_DIR</constant></term>
      <listitem>
       <para>
        Valore: 6; Mancanza della cartella temporanea. Inserito in PHP 4.3.10 e
        PHP 5.0.3.
       </para>
      </listitem>
     </varlistentry>
     </variablelist> 
    </para> 
    <note> 
     <para> 
      Questi valori sono diventate costanti PHP a partire dal PHP 4.3.0. 
     </para> 
    </note> 
   </sect1>

  <sect1 xml:id="features.file-upload.common-pitfalls">
   <title>Common Pitfalls</title>
   <simpara>
    La voce <literal>MAX_FILE_SIZE</literal> non può specificare una dimensione del 
     file maggiore di quella impostata dal parametro <link
    linkend="ini.upload-max-filesize">upload_max_filesize</link> del file php.ini.
    L'impostazione di default è 2 Megabytes.
   </simpara>
   <simpara>
    Se si è impostato un limite di memoria <link
    linkend="ini.memory-limit">memory_limit</link> può essere necessario ampliarlo. 
    Occorre essere certi di impostare <link linkend="ini.memory-limit">memory_limit</link>
    alle dimensioni appropriate.
   </simpara>
   <simpara>
    Se <link linkend="ini.max-execution-time">max_execution_time</link>
    è impostato ad un valore basso, l'esecuzione dello script può eccedere tale valore.
    Ampliare <literal>max_execution_time</literal> ad un tempo sufficiente per l'upload.
   </simpara>
   <note>
    <simpara>
     <link linkend="ini.max-execution-time">max_execution_time</link> influisce solo
     sul tempo di esecuzione dello script. Il tempo utilizzato per attività
     esterno allo script, tipo le chiamate di sistema
     <function>system</function>, o la funzione 
     <function>sleep</function>, le query nei database, il tempo inpiegato
     nell'upload del file non è considerato nel computo del tempo
     di esecuzione dello script.
    </simpara>
   </note>
   <warning>
    <simpara>
     <link linkend="ini.max-input-time">max_input_time</link> imposta il tempo massimo,
     in secondi, in cui lo script può ricevere dati; questo comprende
     l'upload di file. Per file di grandi dimensioni o molteplici file, o su connessioni lente,
     il valore di default <literal>60 seconds</literal> può essere sforato.
    </simpara>
   </warning>
   <simpara>
    Se <link linkend="ini.post-max-size">post_max_size</link> è impostato ad un valore
    troppo piccolo, non si può inviare file di grosse dimensioni.
    Impostare <literal>post_max_size</literal> alle dimensioni appropriate.
   </simpara>
 
   <simpara>
    Non controllare il file su cui si sta operando potrebbe dare agli utenti 
	accesso a informazioni sensibili contenute in altre directory.
   </simpara>
   <simpara>
    Si noti che che il server <productname>CERN httpd</productname> sembra eliminare qualsiasi cosa a partire
    dal primo spazio nell'header mime content-type che riceve dal client.
    Fino a che questo si verificherà, il server <productname>CERN httpd</productname> non supporterà la possibilità
    di caricare file.
   </simpara>
   <simpara>
    A causa della varietà di formati di directory, non si è in grado di
    garantire che nomi di file strani (ad esempio contenenti spazi) siano gestiti correttamente.
   </simpara>
   <simpara>
    Un sviluppatore non può mischiare normali campi di input con campi di upload di file con lo
    stesso nome di campo (utilizzando nomi tipo <literal>foo[]</literal>).
   </simpara>
  </sect1>
  <sect1 xml:id="features.file-upload.multiple">
   <title>Caricamento di più file</title>
   <simpara>
    E' possibile inviare più file contemporanemante utilizzando in
    <literal>input</literal> <literal>nomi</literal> differenti.
   </simpara>
   <simpara>
    E' possibile caricare più file contemporaneamente e avere 
    le informazioni organizzate automaticamente in array. Per questo 
    è necessario utilizzare la medesima sintassi di invio di array da form HTML che 
    è utilizzata con select e checkbox multipli:
  </simpara>
   <note>
    <para>
     Il supporto per il caricamento di file multipliè stato aggiunto in PHP 3.0.10.
    </para>
   </note>
   <para>
    <example>
     <title>Caricamento di più file</title>
     <programlisting role="html">
<![CDATA[
<form action="file-upload.php" method="post" enctype="multipart/form-data">
  Send these files:<br />
  <input name="userfile[]" type="file" /><br />
  <input name="userfile[]" type="file" /><br />
  <input type="submit" value="Send files" />
</form>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Quando la form è inviata, gli array
    <varname>$_FILES['userfile']</varname>,
    <varname>$_FILES['userfile']['name']</varname>, e
    <varname>$_FILES['userfile']['size']</varname> saranno
    inizializzati (come sarà valorizzato <varname>$HTTP_POST_FILES</varname>
    per le versioni di PHP precedenti la 4.1.0).
    Quando il parametro  <link linkend="ini.register-globals">register_globals</link> è impostato a on
    saranno presenti anche le variabili globali. Ognuno di questi è un array indicizzato numericamente 
    con i valori relativi ai diversi file caricati.
   </simpara>
   <simpara>
    Per esempio, si supponga che i nomi di file
    <filename>/home/test/review.html</filename> e
    <filename>/home/test/xwp.out</filename> siano inviati.  In questo 
    caso, <varname>$_FILES['userfile']['name'][0]</varname> conterrebbe
    il valore <filename>review.html</filename>,
    e <varname>$_FILES['userfile']['name'][1]</varname> conterrebbe
    il valore
    <filename>xwp.out</filename>. Analogamente,
    <varname>$_FILES['userfile']['size'][0]</varname> conterrebbe la dimensione di 
    <filename>review.html</filename>, e così via.
   </simpara>
   <simpara>
   	Anche
    <varname>$_FILES['userfile']['name'][0]</varname>,
    <varname>$_FILES['userfile']['tmp_name'][0]</varname>,
    <varname>$_FILES['userfile']['size'][0]</varname>, e
    <varname>$_FILES['userfile']['type'][0]</varname> sono impostati.
   </simpara>
  </sect1>

  <sect1 xml:id="features.file-upload.put-method">
   <title>Supporto per metodo PUT</title>
   <simpara>
    Il supporto al metodo PUT è cambiato tra PHP 3 e PHP 4.
    In PHP 4 occorre utilizzare il flusso standard di input per leggere
    il contenuto di un PUT HTTP.
   </simpara>
   <para>
    <example>
     <title>Salvataggio di un file HTTP PUT con PHP 4</title>
      <programlisting role="php">
<![CDATA[
<?php
/* I dati PUT arrivano in stdin */
$putdata = fopen("php://stdin", "r");
/* Apertura del file in scrittura */
$fp = fopen("myputfile.ext", "w");
/* Lettura dei dati d 1kb alla volta e scrittura nel file */
while ($data = fread($putdata, 1024))
  fwrite($fp, $data);
 
/* Chiusura */
fclose($fp);
fclose($putdata);
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Tutta la documentazione che segue si applica solo a PHP 3. 
    </para>
   </note>
   <para>
    PHP fornisce supporto per il metodo HTTP PUT utilizzato da programmi 
    come <productname>Netscape Composer</productname> e W3C <productname>Amaya</productname>.  
    Le richieste PUT sono molto più semplici rispetto al 
    caricamento di un file, e assomigliano a 
    <informalexample>
     <programlisting role="HTTP">
<![CDATA[
PUT /percorso/nomefile.html HTTP/1.1
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Questo significa che normalmente il programma remoto intende salvare 
    il contenuto della richesta come : <filename>/path/filename.html</filename> nel filesystem sul server web.
    Non è ovviamente una buona idea per Apache o PHP lasciare a un qualsiasi utente la 
    possibilità di sovrascrivere file sul server web.  Quindi, per gestire questa 
    richiesta si deve chiedere al server web che si vuole che sia un certo script PHP a 
    gestire la richiesta stessa. In Apache si ottiene questo con la direttiva
    <emphasis>Script</emphasis>.  Può essere posta quasi ovunque nel file di
    configurazione di Apache.  Un posto frequente è all'interno di un blocco 
     &lt;Directory&gt; oppurte all'interno del blocco 
     &lt;Virtualhost&gt;.  Un linea come la seguente è sufficiente:
    <informalexample>
     <programlisting>
<![CDATA[
Script PUT /put.php
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Questo chiede ad Apache di inviare tutte le richieste PUT che soddisfano
    il contesto in cui si è inserito questo comando allo script put.php.  Questo 
    richiede, naturalmente, che sia abilitato PHP per l'estensione .php e che 
    PHP sia attivo.
   </simpara>
   <simpara>
    All'interno del file put.php si può inserire qualcosa del tipo:
   </simpara>
   <para>
    <informalexample><programlisting role="php">
<![CDATA[
<?php copy($PHP_UPLOADED_FILE_NAME, $DOCUMENT_ROOT . $REQUEST_URI); ?>
]]>
    </programlisting></informalexample>
   </para>
   <simpara>
    Questo copia il file nella posizione chiesta dal programma
    remoto.  E' probabile che si vogliano effettuare dei controlli o 
    autenticazioni dell'utente prima di effettuare questa copia.  L'unica magia 
    qui presente è che quando PHP vede una richiesta con metodo PUT memorizza il file caricato in 
    un file temporaneo così come per i file caricati con il <link
    linkend="features.file-upload.post-method">metodo POST</link>.
    Quando la richiesta termina, questo file temporaneo è eliminato. Quindi il gestore della
    richiesta PUT deve copiare il file da qualche parte.  Il nome del file temporaneo è 
    memorizzato nella variabile <varname>$PHP_PUT_FILENAME</varname>, 
    ed è possibile vedere il nome del file di destinazione nella variabile 
    <varname>$REQUEST_URI</varname> (potrebbe variare su web server diversi da Apache).  Qusto nome di file di 
    destinazione è quello specificato dal client remoto.
    Non è necessario seguire le indicazioni del client.  E' possibile, per esempio,
    copiare tutti i file caricati in una apposita directory.
   </simpara>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
