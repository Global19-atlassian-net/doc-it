 <reference id="ref.pgsql">
  <title>Funzioni PostgreSQL</title>
  <titleabbrev>PostgreSQL</titleabbrev>

  <partintro>
   <para>
    Postgres, originariamente sviluppato nel UC Berkeley Computer Science
    Department, è stato uno dei pionieri dei concetti object-relational
    che ora stanno diventando disponibili in alcuni database commerciali.
    Fornisce supporto al linguaggio SQL92/SQL3, all'integrità delle transazioni,
    e all'estensibilità del tipo. PostgreSQL è un discendente di dominio pubblico 
    e Open Source di questo codice Berkeley originale.
   </para>
   <para>
    PostgreSQL è disponibile senza alcun costo. La versione corrente è
    disponibile a <ulink url="&url.pgsql;">www.PostgreSQL.org</ulink>.
   </para>
   <para>
    Fin dalla versione 6.3 (03/02/1998) PostgreSQL usa gli unix domain sockets.
    La tabella sottostante descrive queste nuove possibilità di connessione.
    Questo socket può essere trovato in <filename>/tmp/.s.PGSQL.5432</filename>.
    Questa opzione può venire abilitata con la flag '-i' a <command>postmaster
    </command> e il suo significato è: "ascolta sui sockets TCP/IP come sugli
    Unix domain sockets".
    <table>
     <title>Postmaster e PHP</title>
     <tgroup cols="3">
      <thead>
       <row>
	<entry>Postmaster</entry>
	<entry>PHP</entry>
	<entry>Status</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry>postmaster &amp;</entry>
	<entry>pg_connect("", "", "", "", "dbname");</entry>
	<entry>OK</entry>
       </row>
       <row>
	<entry>postmaster -i &amp;</entry>
	<entry>pg_connect("", "", "", "", "dbname");</entry>
	<entry>OK</entry>
       </row>
       <row>
	<entry>postmaster &amp;</entry>
	<entry>pg_connect("localhost", "", "", "", "dbname");</entry>
	<entry>
         Impossibile collegarsi al server PostgreSQL: connectDB() failed:
         Il postmaster è in esecuzione e accetta connessioni TCP/IP (con -i)
         a 'localhost' sulla porta '5432'? in /path/to/file.php3 sulla linea 20.
	</entry>
       </row>
       <row>
	<entry>postmaster -i &amp;</entry>
	<entry>pg_connect("localhost", "", "", "", "dbname");</entry>
	<entry>OK</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    Si può anche stabilire una connessione con il seguete comando:
    <command>$conn = pg_Connect("host=localhost port=5432
    dbname=chris");</command>
   </para>
   <para>
    Per usare l'interfaccia large object (lo), è necessario includerla entro
    un blocco di una transazione. Un blocco di transazione inizia con un
    <command>begin</command> e se la transazione è stata valida termina
    con <command>commit</command> e <command>end</command>. Se la
    transazione fallisce, essa deve venire chiusa con
    <command>rollback</command> e <command>abort</command>.

    <example>
     <title>Utilizzare Large Objects</title>
     <programlisting role="php">
&lt;?php
    $database = pg_Connect ("", "", "", "", "jacarta");
    pg_exec ($database, "begin");
    $oid = pg_locreate ($database);
    echo ("$oid\n");
    $handle = pg_loopen ($database, $oid, "w");
    echo ("$handle\n");
    pg_lowrite ($handle, "gaga");
    pg_loclose ($handle);
    pg_exec ($database, "commit");
?>
     </programlisting>
    </example>
   </para>
  </partintro>

  <refentry id="function.pg-close">
   <refnamediv>
    <refname>pg_Close</refname>
    <refpurpose>chiude una connessione PostgreSQL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_close</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce falso se connection non è un valido indice di connessione, vero
     altrimenti. Chiude la connessione con il database PostgreSQL associato
     all'indice di connessione fornito.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-cmdtuples">
   <refnamediv>
    <refname>pg_cmdTuples</refname>
    <refpurpose>restituisce il numero di tuples interessate</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_cmdtuples</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_cmdTuples</function> restituisce il numero di tuples
     (instanze) interessate dalle query INSERT, UPDATE, e DELETE. Se nessuna
     tuple è interessata la funzione restituirà 0.
     <example>
      <title>pg_cmdtuples</title>
      <programlisting role="php">
&lt;?php
$result = pg_exec($conn, "INSERT INTO verlag VALUES ('Autor')");
$cmdtuples = pg_cmdtuples($result);
echo $cmdtuples . " &lt;- cmdtuples affected.";
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-connect">
   <refnamediv>
    <refname>pg_Connect</refname>
    <refpurpose>apre una connessione</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_connect</function></funcdef>
      <paramdef>string <parameter>host</parameter></paramdef>
      <paramdef>string <parameter>port</parameter></paramdef>
      <paramdef>string <parameter>options</parameter></paramdef>
      <paramdef>string <parameter>tty</parameter></paramdef>
      <paramdef>string <parameter>dbname</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce un indice di connessione se la chiamata ha avuto successo, o falso se la connessione
     non può essere creata. Apre una connessione ad un database PostgreSQL.
     Tutti i parametri devono essere delle quoted string, incluso il numero della porta.
     I parametri options e tty sono opzionali e possono essere tralasciati.
     Questa funzione ritorna un indice di connessione che è richiesto dalle
     altre funzioni di PostgreSQL. Potete avere multiple connessioni aperte
     nello stesso momento.
    </para>
    <para>
     Una connessione può essere anche stabilita con il seguente comando:
     <command>$conn = pg_connect("dbname=marliese port=5432");</command>
     Gli altri parametri oltre <parameter>dbname</parameter> e
     <parameter>port</parameter> sono <parameter>host</parameter>, 
     <parameter>tty</parameter>, <parameter>options</parameter>,
     <parameter>user</parameter> e <parameter>password</parameter>.
    </para>
    <para>
     Vedere anche <function>pg_pConnect</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-dbname">
   <refnamediv>
    <refname>pg_DBname</refname>
    <refpurpose>nome del database</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_dbname</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce il nome del database a cui si riferisce l'indice di connessione
     PostgreSQL che è stato fornito, o falso se connection non è un valido
     indice di connessione.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-errormessage">
   <refnamediv>
    <refname>pg_ErrorMessage</refname>
    <refpurpose>messaggio di errore</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_errormessage</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce una stringa contenente il messaggio di errore, falso se fallise.
     Dettagli riguardo l'errore probabilmente non possono essere ottenuti
     usando la funzione <function>pg_errormessage</function> se un errore è
     avvenuto sull'ultima azione sul database per la quale esiste una
     connessione valida, questa funzione ritornerà una stringa contenente
     il messaggio di errore generato dal backend server.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-exec">
   <refnamediv>
    <refname>pg_Exec</refname>
    <refpurpose>esegue una query</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_exec</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>string <parameter>query</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce un indice di result se la query può venire eseguita, falso
     se fallisce o se connection non è un valido indice di connessione. Dettagli
     riguardo l'errore possono essere ottenuti usando la funzione
     <function>pg_ErrorMessage</function> se connection è 
     valido. Invia uno statement SQL al database PostgreSQL specificato dall'indice
     di connessione. Connection deve essere un indice valido restituito da
     <function>pg_Connect</function>. Il valore restituito da questa funzione è un indice
     da usarsi per accedere ai result da altre funzioni PostgreSQL.

     <note>
      <simpara>
       PHP/FI restituiva 1 se dalla query non ci si attendeva alcuna restituzione di dati
       (inserimenti o aggiornamenti, ad esempio) e valori maggiori di 1 anche su selezioni
       che non ritornavano alcunchè. Nessuna supposizione di questo genere può essere fatta in PHP.
      </simpara>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fetch-array">
   <refnamediv>
    <refname>pg_Fetch_Array</refname>
    <refpurpose>elabora una riga come un vettore</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>pg_fetch_array</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>row</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>result_type</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce: Un vettore che corrisponde alla riga elaborata, o falso
     se non ci sono ulteriori righe.</para>
    <para>
     <function>pg_fetch_array</function> è una versione estesa di
     <function>pg_fetch_row</function>. Oltre a salvare i dati
     negli indici numerici del vettore del result, essa salva anche i dati
     in indici associativi, usando i nomi dei campi come chiavi.
    </para>
    <para>
     Il terzo parametro opzionale <parameter>result_type</parameter> in

     <function>pg_fetch_array</function> è una costante e può assumere i seguenti
     valori: PGSQL_ASSOC, PGSQL_NUM, e PGSQL_BOTH.
     <note>
      <para>
       <parameter>Result_type</parameter> è stato aggiunto in PHP 4.0.
      </para>
     </note>
    </para>
    <para>
     Un'importante cosa da notare è che l'utilizzo di
     <function>pg_fetch_array</function> NON è in modo significativo
     più lento che usare <function>pg_fetch_row</function>, anche se
     fornisce un significativo valore aggiunto.
    </para>
    <para>
     Per ulteriori dettagli, vedere anche
     <function>pg_fetch_row</function>
    </para>
    <example>
     <title>elaborazione in un vettore di PostgreSQL</title>
     <programlisting role="php">
&lt;?php 
$conn = pg_pconnect("","","","","publisher");
if (!$conn) {
    echo "An error occured.\n";
    exit;
}

$result = pg_Exec ($conn, "SELECT * FROM authors");
if (!$result) {
    echo "An error occured.\n";
    exit;
}

$arr = pg_fetch_array ($result, 0);
echo $arr[0] . " &lt;- array\n";

$arr = pg_fetch_array ($result, 1);
echo $arr["author"] . " &lt;- array\n";
?>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fetch-object">
   <refnamediv>
    <refname>pg_Fetch_Object</refname>
    <refpurpose>elabora una riga come un oggetto</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>object <function>pg_fetch_object</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>row</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>result_type</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce: Un oggetto con proprietà che corrispondono alla riga elaborata,
     o falso se non ci sono ulteriori righe.
    </para>
    <para> 
     <function>pg_fetch_object</function> è simile a
     <function>pg_fetch_array</function>, con una differeza - un
     oggetto viene restituito, invece che un vettore. Indirettamente, ciò
     significa che potete accedere ai dati solamente tramite i nomi dei campi,
     e non tramite il loro offset (i numeri sono invalidi nomi di proprietà).
    </para>
    <para>
     Il terzo parametro opzionale <parameter>result_type</parameter> in
     <function>pg_fetch_object</function> è una costante e può assumere i
     seguenti valori: PGSQL_ASSOC, PGSQL_NUM, e PGSQL_BOTH.
     <note>
      <para>
       <parameter>Result_type</parameter> è stata aggiunta in PHP 4.0.
      </para>
     </note>
    </para>
    <para>
     Per ciò che riguarda la velocità, la funzione è identica a 
     <function>pg_fetch_array</function>, e veloce quasi quanto
     <function>pg_fetch_row</function> (la differenza è
     insignificante).
    </para>
    <para> 
     Vedere anche: <function>pg_fetch_array</function> e
     <function>pg_fetch_row</function>.
     <example>
      <title>elaborazione in un oggetto di Postgres</title>
      <programlisting role="php">
&lt;?php 
$database = "verlag";
$db_conn = pg_connect ("localhost", "5432", "", "", $database);
if (!$db_conn): ?>
    &lt;H1>Failed connecting to postgres database &lt;? echo $database ?>&lt;/H1> &lt;?
    exit;
endif;

$qu = pg_exec ($db_conn, "SELECT * FROM verlag ORDER BY autor");
$row = 0; // postgres needs a row counter other dbs might not 

while ($data = pg_fetch_object ($qu, $row)):
    echo $data->autor." (";
    echo $data->jahr ."): ";
    echo $data->titel."&lt;BR>";
    $row++;
endwhile; ?>

&lt;PRE>&lt;?php
$fields[] = Array ("autor", "Author");
$fields[] = Array ("jahr",  "  Year");
$fields[] = Array ("titel", " Title");

$row= 0; // postgres needs a row counter other dbs might not
while ($data = pg_fetch_object ($qu, $row)):
    echo "----------\n";
    reset ($fields);
    while (list (,$item) = each ($fields)):
        echo $item[1].": ".$data->$item[0]."\n";
    endwhile;
    $row++;
endwhile;
echo "----------\n"; ?>
&lt;/PRE> &lt;?php
pg_freeResult ($qu);
pg_close ($db_conn);
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fetch-row">
   <refnamediv>
    <refname>pg_Fetch_Row</refname>
    <refpurpose>ottiene una riga come un vettore enumerato</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>pg_fetch_row</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>row</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce: Un vettore che corrisponde alla riga elaborata, o falso
     se non ci sono ulteriori righe.
    </para>
    <para>
     <function>pg_fetch_row</function> elabora una riga di dati dal
     result associato all'identificatore di result specificato. La riga
     viene restituita come un vettore. Ogni colonna del result viene salvata
     in un offset del vettore, partendo dall'offset 0.
    </para>
    <para>
     Successive chiamate a <function>pg_fetch_row</function> restituiranno
     la riga successiva nel set dei result, o falso se non ci sono ulteriori
     righe.
    </para>
    <para>
     Vedere anche: <function>pg_fetch_array</function>,
     <function>pg_fetch_object</function>,
     <function>pg_result</function>.
     <example>
      <title>Postgres fetch row</title>
      <programlisting role="php">
&lt;?php 
$conn = pg_pconnect("","","","","publisher");
if (!$conn) {
    echo "An error occured.\n";
    exit;
}

$result = pg_Exec ($conn, "SELECT * FROM authors");
if (!$result) {
    echo "An error occured.\n";
    exit;
}

$row = pg_fetch_row ($result, 0);
echo $row[0] . " &lt;- row\n";

$row = pg_fetch_row ($result, 1);
echo $row[0] . " &lt;- row\n";

$row = pg_fetch_row ($result, 2);
echo $row[1] . " &lt;- row\n";
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldisnull">
   <refnamediv>
    <refname>pg_FieldIsNull</refname>
    <refpurpose>Controlla se un campo è NULL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_fieldisnull</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>row</parameter></paramdef>
      <paramdef>mixed <parameter>field</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Controlla se un campo è nullo o meno. Restituisce 0 se il campo nella
     riga data non è NULL. Restituisce 1 se il campo nella riga data è NULL.
     Il campo può essere specificato con il suo numero o con il suo nome. La
     numerazione delle righe comincia da 0.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldname">
   <refnamediv>
    <refname>pg_FieldName</refname>
    <refpurpose>Restituisce il nome di un campo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_fieldname</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>field_number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_FieldName</function> restituirà il nome del
     campo occupante il numero di colonna specificato nel result
     associato all'identificatore di result fornito. La numerazione
     dei campi comincia da 0.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldnum">
   <refnamediv>
    <refname>pg_FieldNum</refname>
    <refpurpose>Restituisce il numero di una colonna</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_fieldnum</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>string <parameter>field_name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_FieldNum</function> restituirà il numero dello slot della colonna
     che corrisponde al nome del campo nel result associato all'identifitore di result fornito.
     La numerazione dei campi comincia da 0. Questa funzione restituisce -1 in caso di errore.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldprtlen">
   <refnamediv>
    <refname>pg_FieldPrtLen</refname>
    <refpurpose>Restituisce la lunghezza stampata</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_fieldprtlen</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>row_number</parameter></paramdef>
      <paramdef>string <parameter>field_name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_FieldPrtLen</function> restituirà l'attuale
     lunghezza stampata (numero di caratteri) di uno specifico valore in un
     result di PostgreSQL. La numerazione delle righe comincia da 0. Questa
     funzione restituisce -1 in caso di errore.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldsize">
   <refnamediv>
    <refname>pg_FieldSize</refname> 
    <refpurpose>
     Restituisce la capacità interna di memorizzazione del campo specificato
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_fieldsize</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>field_number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_FieldSize</function> restituirà la capacità interna di
     memorizzazione (in byte) del numero del campo nel result di PostgreSQL fornito.
     La numerazione dei campi comincia da 0. Una dimensione del campo di -1
     indica un campo a dimensione variabile. Questa funzione restituirà falso
     in caso di errore.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldtype">
   <refnamediv>
    <refname>pg_FieldType</refname> 
    <refpurpose>
     Restituisce il nome del tipo per il corrispondente numero del campo
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_fieldtype</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>field_number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_FieldType</function> restituirà una stringa contenente
     il nome del tipo del campo nel result di PostgreSQL fornito.
     La numerazione dei campi comincia da 0.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-freeresult">
   <refnamediv>
    <refname>pg_FreeResult</refname> 
    <refpurpose>Libera la memoria</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_freeresult</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_FreeResult</function> necessita solo di venire chiamata se
     siete preoccupati di stare usando troppa memoria mentre il vostro script
     è in esecuzione. Tutta la memoria dei result verrà automaticamente liberata
     quando lo script termina. Ma, se siete sicuri che i dati nel result non vi
     serviranno più, potete chiamare la <function>pg_FreeResult</function> con
     l'identificatore del result come parametro e la memoria associata al result
     verrà liberata.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-getlastoid">
   <refnamediv>
    <refname>pg_GetLastOid</refname> 
    <refpurpose>Restituisce l'identificare dell'ultimo oggetto</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_getlastoid</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_GetLastOid</function> può venire usata per ottenere
     l'Oid assegnato ad un tuple inserito se l'identificatore del result
     è usato dall'ultimo comando inviato via <function>pg_Exec</function>
     ed esso era una SQL INSERT. Questa funzione restituirà un intero positivo
     se c'era un valido Oid. Restituirà -1 se è avvenuto un errore
     o se l'ultimo comando inviato via <function>pg_Exec</function>
     non era un INSERT.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-host">
   <refnamediv>
    <refname>pg_Host</refname> 
    <refpurpose>Restituisce il nome dell'host</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_host</function></funcdef>
      <paramdef>int <parameter>connection_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_Host</function> restituirà il nome
     dell'host a cui è connesso lo specificato identificatore di connessione di PostgreSQL.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loclose">
   <refnamediv>
    <refname>pg_loclose</refname>
    <refpurpose>chiude un large object</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pg_loclose</function></funcdef>
      <paramdef>int <parameter>fd</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_loclose</function> chiude un Inversion Large
     Object. <parameter>fd</parameter> è un descrittore di file per il
     large object preso da <function>pg_loopen</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-locreate">
   <refnamediv>
    <refname>pg_locreate</refname>
    <refpurpose>crea un large object</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_locreate</function></funcdef>
      <paramdef>int <parameter>conn</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_locreate</function> crea un Inversion Large
     Object e restituisce l'oid del large object.
     <parameter>conn</parameter> specifica una valida connessione al
     database. Le modalità di accesso di PostgreSQL INV_READ, INV_WRITE, e
     INV_ARCHIVE non sono supportate, l'oggetto viene creato sempre con
     accesso sia in lettura che in scrittura. INV_ARCHIVE è stato rimosso
     anche dallo stesso PostgreSQL (versione 6.3 e successive)
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loexport">
   <refnamediv>
    <refname>pg_loexport</refname>
    <refpurpose>esporta un large object su un file</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_loexport</function></funcdef>
      <paramdef>int
       <parameter>oid</parameter>
      </paramdef>
      <paramdef>int
       <parameter>file</parameter>
      </paramdef>
      <paramdef>int
       <parameter><optional>connection_id</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Il parametro <parameter>oid</parameter> specifica l'id dell'oggetto
     del large object da esportare e il parametro <parameter>filename</parameter>
     specifica il percorso del file. Restituisce FALSE se accade un errore,
     TRUE altrimenti. Ricordate che la gestione di large object in PostgreSQL deve
     avvenire all'interno di una transazione.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loimport">
   <refnamediv>
    <refname>pg_loimport</refname>
    <refpurpose>importa un large object da un file</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_loimport</function></funcdef>
      <paramdef>int
       <parameter>file</parameter>
      </paramdef>
      <paramdef>int
       <parameter><optional>connection_id</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Il parametro <parameter>filename</parameter> specifica il percorso
     del file che deve essere importato come un large object. Restituisce FALSE
     se avviene un errore, altrimenti l'id dell'oggetto large object che è stato appena creato.
     Ricordate che la gestione di large objects all'interno di PostgreSQL deve
     avvenire all'interno di una transazione.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loopen">
   <refnamediv>
    <refname>pg_loopen</refname>
    <refpurpose>apre un large object</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_loopen</function></funcdef>
      <paramdef>int <parameter>conn</parameter></paramdef>
      <paramdef>int <parameter>objoid</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_loopen</function> apre un Inversion Large Object e
     restituisce un descrittore del file del large object. Il descrittore del
     file incapsula le informazioni riguardanti la connessione. Non chiudete
     la connessione prima di chiudere il descrittore del file del large object.
     <parameter>objoid</parameter> specifica un valido large object oid
     e <parameter>mode</parameter> può essere "r", "w", o "rw".
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loread">
   <refnamediv>
    <refname>pg_loread</refname>
    <refpurpose>legge un large object</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_loread</function></funcdef>
      <paramdef>int <parameter>fd</parameter></paramdef>
      <paramdef>int <parameter>len</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_loread</function> legge al massimo 
     <parameter>len</parameter> byte da un large object e le restituisce
     come una stringa.
     <parameter>fd</parameter> specifica un valido descrittore di file di large object
     e <parameter>len</parameter> specifica la massima dimensione allocabile
     del segmento del large object.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loreadall">
   <refnamediv>
    <refname>pg_loreadall</refname>
    <refpurpose>legge un intero large object</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione </title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pg_loreadall</function></funcdef>
      <paramdef>int <parameter>fd</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_loreadall</function> legge un large object e
     lo passa direttamente attraverso il browser, dopo aver inviato tutti
     gli header. E' fondamentalmente intesa per inviare dati binari
     come immagini e audio.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-lounlink">
   <refnamediv>
    <refname>pg_lounlink</refname>
    <refpurpose>cancella un large object</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pg_lounlink</function></funcdef>
      <paramdef>int <parameter>conn</parameter></paramdef>
      <paramdef>int <parameter>lobjid</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_lounlink</function> elimina un large object con l'identificatore
     <parameter>lobjid</parameter> per il large object.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-lowrite">
   <refnamediv>
    <refname>pg_lowrite</refname>
    <refpurpose>scrive un large object</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_lowrite</function></funcdef>
      <paramdef>int <parameter>fd</parameter></paramdef>
      <paramdef>string <parameter>buf</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_lowrite</function> scrive al massimo su un large object
     da una variabile <parameter>buf</parameter> e restituisce il numero
     di byte attualmente scritti, o falso in caso di errore.
     <parameter>fd</parameter> è un descrittore di file per il large
     object da <function>pg_loopen</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-numfields">
   <refnamediv>
    <refname>pg_NumFields</refname> 
    <refpurpose>Restituisce il numero di campi</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_numfields</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_NumFields</function> Restituirà il numero di campi
     (colonne) in un result di PostgreSQL. Il parametro è un valido identificatore
     di result restituito da <function>pg_Exec</function>. Questa funzione
     restituirà -1 in caso di errore.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-numrows">
   <refnamediv>
    <refname>pg_NumRows</refname> 
    <refpurpose>Restituisce il numero di righe</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_numrows</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_NumRows</function> restituirà il numero di righe in un
     rusult di PostgreSQL. Il parametro è un valido identificatore di result
     restituito da <function>pg_Exec</function>. Questa funzione restituirà -1 in caso di errore.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-options">
   <refnamediv>
    <refname>pg_Options</refname> 
    <refpurpose>Restituisce le opzioni</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_options</function></funcdef>
      <paramdef>int <parameter>connection_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_Options</function> restituirà una stringa contenente
     le opzioni specificate nella connessione PostgreSQL fornita.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-pconnect">
   <refnamediv>
    <refname>pg_pConnect</refname>
    <refpurpose>
     Crea una connessione persistente al database
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_pconnect</function></funcdef>
      <paramdef>string <parameter>host</parameter></paramdef>
      <paramdef>string <parameter>port</parameter></paramdef>
      <paramdef>string <parameter>options</parameter></paramdef>
      <paramdef>string <parameter>tty</parameter></paramdef>
      <paramdef>string <parameter>dbname</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce un indice di connessione in caso di successo, o falso
     se la connessione non può essere creata. Apre una connessione
     persistente a un database PostgreSQL. Ognuno dei parametri deve essere
     una quoted string, incluso il numero della porta. I parametri options
     e tty sono opzionali e possono essere tralasciati. Questa funzione
     restituisce un indice di connessione che è richiesto dalle altre
     funzioni PostgreSQL. Potete avere più connessioni persistenti aperte
     nello stesso momento. Vedere anche:
     <function>pg_Connect</function>.
    </para>
    <para>
     Una connessione può anche essere stabilita con il seguente comando:
     <command>$conn = pg_pconnect("dbname=marliese port=5432");</command>
     I parametri oltre a <parameter>dbname</parameter> e
     <parameter>port</parameter> sono <parameter>host</parameter>, 
     <parameter>tty</parameter>, <parameter>options</parameter>,
     <parameter>user</parameter> e <parameter>password</parameter>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-port">
   <refnamediv>
    <refname>pg_Port</refname>
    <refpurpose>Restituisce il numero della porta</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_port</function></funcdef>
      <paramdef>int <parameter>connection_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_Port</function> restituirà il numero della porta a cui
     si riferisce l'identificatore della connessione PostgreSQL specificata.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-result">
   <refnamediv>
    <refname>pg_Result</refname>
    <refpurpose>Restituisce valori da un identificatore di result</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>pg_result</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>row_number</parameter></paramdef>
      <paramdef>mixed <parameter>fieldname</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_Result</function> restituirà valori da un identificatore
     di result generato da <function>pg_Exec</function>. <parameter>Row_number</parameter>
     e <parameter>fieldname</parameter> specificano quale cella nella tabella
     dei risultati deve essere restituita. La numerazione delle righe comincia da 0.
     Invece di usare il nome del campo, potete usare l'indice del campo come
     numero unquoted. L'indice dei campi inizia da 0.
    </para>
    <para>
     PostgreSQL ha molti tipi predefiniti e solo quelli basilari sono
     direttamente supportati qui. Tutti i generi di integer, boolean
     e tipi oid sono restituiti come integer. Tutti i generi di float,
     e tipi real sono restituiti come valori double. Tutti gli altri tipi,
     inclusi i vettori sono restituiti come stringhe formattate nello
     stesso modo usato da PostgreSQL che potete vedere nel programma
     <command>psql</command>.
    </para>  
   </refsect1>
  </refentry>

  <refentry id="function.pg-trace">
   <refnamediv>
    <refname>pg_trace</refname>
    <refpurpose>Traccia una connessione ad un server PostgreSQL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_trace</function></funcdef>
      <paramdef>string
       <parameter>filename</parameter>
      </paramdef>
      <paramdef>string
       <parameter><optional>mode</optional></parameter>
      </paramdef>
      <paramdef>int
       <parameter><optional>connection</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Attiva il tracing delle comunicazioni frontend/backend di PostgreSQL
     su un file di debugging. Per comprendere pienamente i risultati è
     necessario avere famigliarità con la struttura interna del protocollo
     di comunicazione di PostgreSQL. Per chi non la ha, può essere comunque
     utile per tracciare errori in query inviate al server, potete ad esempio
     fare
     'grep '^To backend' trace.log' e vedere quali query sono state attualmente inviate
     al PostgreSQL server.
    </para>
    <para>
     <parameter>filename</parameter> e <parameter>mode</parameter> sono la stessa cosa
     come in <function>fopen</function> (<parameter>mode</parameter> è predefinito
     a 'w'), <parameter>connection</parameter> specifica la connessione a
     trace e usa come predefinita l'ultima aperta.
    </para>
    <para>
     Restituisce TRUE se <parameter>filename</parameter> può essere aperto per il
     logging, FALSE altrimenti.
    </para>
    <para>
     Vedere anche <function>fopen</function> e <function>pg_untrace</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-tty">
   <refnamediv>
    <refname>pg_tty</refname>
    <refpurpose>Restituisce il nome di tty</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_tty</function></funcdef>
      <paramdef>int <parameter>connection_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_tty</function> restituirà il nome del tty a cui il server side
     debugging output viene inviato sull'identificatore della connessione
     PostgreSQL specificata.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-untrace">
   <refnamediv>
    <refname>pg_untrace</refname>
    <refpurpose>Ferma il tracing di una connessione ad un server PostgreSQL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_untrace</function></funcdef>
      <paramdef>int
       <parameter><optional>connection</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Ferma il tracing iniziato da <function>pg_trace</function>.
     <parameter>connection</parameter> specifica la connessione che è stata
     tracciata e usa come predefinita l'ultima aperta.
    </para>
    <para>
     Restituisce sempre TRUE.
    </para>
    <para>
     Vedere anche <function>pg_trace</function>.
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
