<?xml version="1.0" encoding="iso-8859-1"?>
 <!-- EN-Revision: 1.40 Maintainer: cucinato Status: ready -->
<reference id="ref.oci8">
  <title>Funzioni Oracle 8</title>
  <titleabbrev>OCI8</titleabbrev>
  <partintro>
   <para>
    Queste funzioni permettono di accedere ai database Oracle8 e Oracle7. 
    Usano la Call-Interface di Oracle8 (OCI8). Occorre avere installate le librerie client
    di Oracle8  per utilizzare questa estensione.
   </para>
   <para>
    Questa estensione &egrave; pi&ugrave; flessibile della estensione standard di Oracle.
    Supporta il binding di variabili PHP locali e globali
    ai segnaposto Oracle, ha pieno supporto di LOB, FILE e ROWID 
    e permette di utilizzare variabili di definizione personalizzabili.
   </para>
   <para>
    Prima di usare questa estensione, occorre sicerarsi di aver impostato
    le variabili d'ambiente per l'utente Oracle, come pure
    per l'utente del server web. Le variabili che potrebbero necessitare l'impostazione sono
    le seguenti:
    <itemizedlist>
     <listitem>
      <simpara>
       ORACLE_HOME
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       ORACLE_SID
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       LD_PRELOAD
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       LD_LIBRARY_PATH
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       NLS_LANG
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       ORA_NLS33
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    Dopo aver impostato le variabili d'ambiente per l'utente del server web,
    occorre sicerarsi di aver aggiunto anche l'utente stesso (nobody, www) al gruppo
    oracle.
   </para>
   <note>
    <title>Se il server web non parte o va in blocco</title>
    <para>
     Controllare che apache sia linkato con la libreria pthread: 
    </para>
    <para>
     <informalexample>
      <screen>
<![CDATA[
# ldd /www/apache/bin/httpd 
    libpthread.so.0 => /lib/libpthread.so.0 (0x4001c000)
    libm.so.6 => /lib/libm.so.6 (0x4002f000)
    libcrypt.so.1 => /lib/libcrypt.so.1 (0x4004c000)
    libdl.so.2 => /lib/libdl.so.2 (0x4007a000)
    libc.so.6 => /lib/libc.so.6 (0x4007e000)
    /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     Se la libpthread non compare nell'elenco, occorre reinstallare Apache:
    </para>
    <para>
     <informalexample>
      <screen>
<![CDATA[
# cd /usr/src/apache_1.3.xx
# make clean
# LIBS=-lpthread ./config.status
# make
# make install
]]>
      </screen>
     </informalexample>
    </para>
   </note>
   <para>
    <example>
     <title>Trucchi OCI</title>
     <programlisting role="php">
<![CDATA[
<?php
// by sergo@bacup.ru

// Usare l'opzione OCI_DEFAULT nel comando execute per ritardare l'esicuzione
OCIExecute($stmt, OCI_DEFAULT);

// per ricevere i dati utilizzare (dopo il fetch):

$result = OCIResult($stmt, $n);
if (is_object ($result)) $result = $result->load();

// come comandi  INSERT o UPDATE usare:

$sql = "insert into table (field1, field2) values (field1 = 'value',
 field2 = empty_clob()) returning field2 into :field2";
OCIParse($conn, $sql);
$clob = OCINewDescriptor($conn, OCI_D_LOB);
OCIBindByName ($stmt, ":field2", &$clob, -1, OCI_B_CLOB);
OCIExecute($stmt, OCI_DEFAULT);
$clob->save ("some text");
OCICommit($conn);

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    You can easily access stored procedures in the same way as you
    would from the commands line.
    <example>
     <title>Using Stored Procedures</title>
     <programlisting role="php">
<![CDATA[
<?php
// by webmaster@remoterealty.com
$sth = OCIParse ( $dbh, "begin sp_newaddress( :address_id, '$firstname',
 '$lastname', '$company', '$address1', '$address2', '$city', '$state',
 '$postalcode', '$country', :error_code );end;" );

// Questo codice richiama la stord procedure sp_newaddress, dove :address_id è
// una variabile in/out e :error_code è una variabile out.
// Quindi si effettua il binding:

   OCIBindByName ( $sth, ":address_id", $addr_id, 10 );
   OCIBindByName ( $sth, ":error_code", $errorcode, 10 );
   OCIExecute ( $sth );

?>
]]>
     </programlisting>
    </example>
   </para>
  </partintro>

  <refentry id="function.ocidefinebyname">
   <refnamediv>
    <refname>OCIDefineByName</refname>
    <refpurpose>
     Utilizza una variabile PHP per la fase di definizione in un comando  SELECT
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIDefineByName</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
      <methodparam><type>string</type><parameter>Column-Name</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>variable</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCIDefineByName</function> copia i valori delle SQL-Columns
     nelle variabili PHP. Attenzione: Oracle usa
     nomi di colonna MAIUSCOLI, mentre nella SELECT si possono anche
     scrivere minuscoli. <function>OCIDefineByName</function> vuole
     il parametro <parameter>Column-Name</parameter> in caratteri maiuscoli. Se si
     definisce una variabile che non esiste nel comando SELECT, non
     viene dato alcun errore!
    </para>
    <para>
     Se occorre definire un tipo di dati astratto (LOB/ROWID/BFILE)  
     lo si deve prima allocare usando la funzione
     <function>OCINewDescriptor</function>. Vedere anche la
     funzione <function>OCIBindByName</function>.
    </para>
     <example>
      <title>OCIDefineByName</title>
      <programlisting>
<![CDATA[
<?php
/* OCIDefineByPos example thies@thieso.net (980219) */

$conn = OCILogon("scott","tiger");

$stmt = OCIParse($conn,"select empno, ename from emp");

/* il  define DEVE essere eseguito PRIMA di ociexecute! */

OCIDefineByName($stmt,"EMPNO",$empno);
OCIDefineByName($stmt,"ENAME",$ename);

OCIExecute($stmt);

while (OCIFetch($stmt)) {
    echo "empno:".$empno."\n";
    echo "ename:".$ename."\n";
}

OCIFreeStatement($stmt);
OCILogoff($conn);
?>
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.ocibindbyname">
   <refnamediv>
    <refname>OCIBindByName</refname>
    <refpurpose>
     Lega una variabile PHP ad un segnaposto Oracle
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIBindByName</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
      <methodparam><type>string</type><parameter>ph_name</parameter></methodparam>
      <methodparam><type>mixed &amp;</type><parameter>variable</parameter></methodparam>
      <methodparam><type>int</type><parameter>length</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>
       type</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCIBindByName</function> collega la variabile PHP 
     <parameter>variable</parameter> al segnaposto Oracle 
     <parameter>ph_name</parameter>.  L'utilizzo in modalit&agrave;
     input o output sar&agrave; determinato a run-time, e lo spazio di memoria
     necessario sar&agrave; allocato. Il parametro
     <parameter>length</parameter> imposta la lunghezza massima
     del collegamento. Se si imposta <parameter>length</parameter> a -1
     <function>OCIBindByName</function> user&agrave; l'attuale lunghezza di
     <parameter>variable</parameter> per impostare la lunghezza massima.
    </para>
    <para>
     Se si deve collegare un Datatype astratto (LOB/ROWID/BFILE) 
     occorre innanzitutto allocarlo usando la funzione
     <function>OCINewDescriptor</function>. Il parametro
     <parameter>length</parameter> non &egrave; usato con i Datatypes astratti
     e dovrebbe essere impostato a -1. La veriabile <parameter>type</parameter> 
     informa oracle sul tipo di descrittore che si vuole usare. I valori possibili
     sono: OCI_B_FILE (Binary-File), OCI_B_CFILE
     (Character-File), OCI_B_CLOB (Character-LOB), OCI_B_BLOB
     (Binary-LOB) e OCI_B_ROWID (ROWID).
    </para>
    <example>
     <title>OCIDefineByName</title>
     <programlisting>
<![CDATA[
<?php
/* OCIBindByPos example thies@thieso.net (980221)
  inserisce 3 tuple in emp, e usa ROWID per aggiornare le
  tuple subito dopo l'inserimento.
*/

$conn = OCILogon("scott","tiger");

$stmt = OCIParse($conn,"insert into emp (empno, ename) ".
					   "values (:empno,:ename) ".
					   "returning ROWID into :rid");

$data = array(1111 => "Larry", 2222 => "Bill", 3333 => "Jim");

$rowid = OCINewDescriptor($conn,OCI_D_ROWID);

OCIBindByName($stmt,":empno",&$empno,32);
OCIBindByName($stmt,":ename",&$ename,32);
OCIBindByName($stmt,":rid",&$rowid,-1,OCI_B_ROWID);

$update = OCIParse($conn,"update emp set sal = :sal where ROWID = :rid");
OCIBindByName($update,":rid",&$rowid,-1,OCI_B_ROWID);
OCIBindByName($update,":sal",&$sal,32);

$sal = 10000;

while (list($empno,$ename) = each($data)) {
	OCIExecute($stmt);
	OCIExecute($update);
} 

$rowid->free();

OCIFreeStatement($update);
OCIFreeStatement($stmt);

$stmt = OCIParse($conn,"select * from emp where empno in (1111,2222,3333)");
OCIExecute($stmt);
while (OCIFetchInto($stmt,&$arr,OCI_ASSOC)) {
	var_dump($arr);
}
OCIFreeStatement($stmt);

/* delete our "junk" from the emp table.... */
$stmt = OCIParse($conn,"delete from emp where empno in (1111,2222,3333)");
OCIExecute($stmt);
OCIFreeStatement($stmt);

OCILogoff($conn);
?>
]]>
     </programlisting>
    </example>
    <warning>
     <para>
      It is a bad idea to use magic quotes and
      <function>OciBindByName</function> simultaneously as no quoting
      is needed on quoted variables and any quotes magically applied
      will be written into your database as
      <function>OciBindByName</function> is not able to distinguish
      magically added quotings from those added by intention.
     </para> 
    </warning>
   </refsect1>
  </refentry>

  <refentry id="function.ocilogon">
   <refnamediv>
    <refname>OCILogon</refname>
    <refpurpose>Stabilisce una connessione a Oracle</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCILogon</methodname>
      <methodparam><type>string</type><parameter>username</parameter></methodparam>
      <methodparam><type>string</type><parameter>password</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>db</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCILogon</function> restituisce un identificatore di connessione
     necessario per la maggior parte delle altre chiamate OCI. Il terzo parametro opzionale
     pu&grave; contenere il nome della istanza Oracle locale o il nome
     della voce in tnsnames.ora a cui ci si vuole connettere.
     Se il terzo parametro opzionale non &egrave; specificato, PHP usa la
     variabile d'ambiente ORACLE_SID (istanza di Oracle) o TWO_TASK
     (in tnsnames.ora) per determinare a quale database collegarsi.
    </para>
    <para>Le connessioni sono condivise a livello di pagina quando si usa 
     <function>OCILogon</function>. Questo significa che i commit e i
     rollback avvengono su tutte le transazioni aperte nella pagina, anche se sono
     state create connessioni multiple.
    </para>
    <para>
     Questo esempio dimostra come le connessioni sono condivise.
     <example>
      <title>OCILogon</title>
      <programlisting>
<![CDATA[
<?php
print "<HTML><PRE>";
$db = "";

$c1 = ocilogon("scott","tiger",$db);
$c2 = ocilogon("scott","tiger",$db);

function create_table($conn)
{ $stmt = ociparse($conn,"create table scott.hallo (test varchar2(64))");
  ociexecute($stmt);
  echo $conn." created table\n\n";
}

function drop_table($conn)
{ $stmt = ociparse($conn,"drop table scott.hallo");
  ociexecute($stmt);
  echo $conn." dropped table\n\n";
}

function insert_data($conn)
{ $stmt = ociparse($conn,"insert into scott.hallo 
            values('$conn' || ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn." inserted hallo\n\n";
}

function delete_data($conn)
{ $stmt = ociparse($conn,"delete from scott.hallo");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn." deleted hallo\n\n";
}

function commit($conn)
{ ocicommit($conn);
  echo $conn." committed\n\n";
}

function rollback($conn)
{ ocirollback($conn);
  echo $conn." rollback\n\n";
}

function select_data($conn)
{ $stmt = ociparse($conn,"select * from scott.hallo");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn."----selecting\n\n";
  while (ocifetch($stmt))
    echo $conn." <".ociresult($stmt,"TEST").">\n\n";
  echo $conn."----done\n\n";
}

create_table($c1);
insert_data($c1);   // Insert a row using c1
insert_data($c2);   // Insert a row using c2

select_data($c1);   // Results of both inserts are returned
select_data($c2);   

rollback($c1);      // Rollback using c1

select_data($c1);   // Both inserts have been rolled back
select_data($c2);   

insert_data($c2);   // Insert a row using c2
commit($c2);        // commit using c2

select_data($c1);   // result of c2 insert is returned

delete_data($c1);   // delete all rows in table using c1
select_data($c1);   // no rows returned
select_data($c2);   // no rows returned
commit($c1);        // commit using c1

select_data($c1);   // no rows returned
select_data($c2);   // no rows returned


drop_table($c1);
print "</PRE></HTML>";
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     Vedere anche <function>OCIPLogon</function> e
     <function>OCINLogon</function>.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ociplogon">
   <refnamediv>
    <refname>OCIPLogon</refname>
    <refpurpose>Stabilisce una connessione permanente a Oracle.
    Restituisce una nuova sessione.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIPLogon</methodname>
      <methodparam><type>string</type><parameter>username</parameter></methodparam>
      <methodparam><type>string</type><parameter>password</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>db</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCIPLogon</function> crea una connessione persistente
     a un database Oracle 8 e si autentica.  Il terzo parametro opzionale
     pu&ograve; contenere il nome della istanza Oracle locale o il nome
     della voce in tnsnames.ora a cui ci si vuole connettere.
     Se il terzo parametro opzionale non &igrave; specificato, PHP usa la
     variabile d'ambiente ORACLE_SID (istanza di Oracle) o TWO_TASK
     (in tnsnames.ora) per determinare a quale database collegarsi.
    </para>
    <simpara>
     Vedere anche <function>OCILogon</function> e
     <function>OCINLogon</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocinlogon">
   <refnamediv>
    <refname>OCINLogon</refname>
    <refpurpose>Stabilisce, forzandola, una nuova connessione a Oracle. 
    Restituisce una nuova sessione.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCINLogon</methodname>
      <methodparam><type>string</type><parameter>username</parameter></methodparam>
      <methodparam><type>string</type><parameter>password</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>db</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCINLogon</function> crea una nuova connessione
     a un database Oracle 8 e si autentica.  Il terzo parametro opzionale
     pu&ograve; contenere il nome della istanza Oracle locale o il nome
     della voce in tnsnames.ora a cui ci si vuole connettere.
     Se il terzo parametro opzionale non &egrave; specificato, PHP usa la
     variabile d'ambiente ORACLE_SID (istanza di Oracle) o TWO_TASK
     (in tnsnames.ora) per determinare a quale database collegarsi.
    </para>
    <para>
     <function>OCINLogon</function> forza una nuova connessione. 
     Si deve usare quando si ha necessit&agrave; di isolare un insieme di transazioni. Di
     default, le connessioni sono condivise a livello di pagina se si usa
     <function>OCILogon</function> o a livello di processo del web server
     se si usa <function>OCIPLogon</function>.  Se ci sono connessioni
     multiple aperte con <function>OCINLogon</function>, tutti i
     commit e rollback avverranno solo sulla connessione specificata.
    </para>
    <para>
     Questo esempio dimostra come le connessioni sono isolate.
     <example>
      <title>OCINLogon</title>
      <programlisting>
<![CDATA[
<?php
print "<HTML><PRE>";
$db = "";

$c1 = ocilogon("scott","tiger",$db);
$c2 = ocinlogon("scott","tiger",$db);

function create_table($conn)
{ $stmt = ociparse($conn,"create table scott.hallo (test
varchar2(64))");
  ociexecute($stmt);
  echo $conn." created table\n\n";
}

function drop_table($conn)
{ $stmt = ociparse($conn,"drop table scott.hallo");
  ociexecute($stmt);
  echo $conn." dropped table\n\n";
}

function insert_data($conn)
{ $stmt = ociparse($conn,"insert into scott.hallo 
            values('$conn' || ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn." inserted hallo\n\n";
}

function delete_data($conn)
{ $stmt = ociparse($conn,"delete from scott.hallo");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn." deleted hallo\n\n";
}

function commit($conn)
{ ocicommit($conn);
  echo $conn." committed\n\n";
}

function rollback($conn)
{ ocirollback($conn);
  echo $conn." rollback\n\n";
}

function select_data($conn)
{ $stmt = ociparse($conn,"select * from scott.hallo");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn."----selecting\n\n";
  while (ocifetch($stmt))
    echo $conn." <".ociresult($stmt,"TEST").">\n\n";
  echo $conn."----done\n\n";
}

create_table($c1);
insert_data($c1);

select_data($c1);   
select_data($c2);   

rollback($c1);      

select_data($c1);   
select_data($c2);   

insert_data($c2);   
commit($c2);        

select_data($c1);   

delete_data($c1);   
select_data($c1);   
select_data($c2);   
commit($c1);        

select_data($c1);
select_data($c2);


drop_table($c1);
print "</PRE></HTML>";
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     Vedere anche <function>OCILogon</function> e
     <function>OCIPLogon</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocilogoff">
   <refnamediv>
    <refname>OCILogOff</refname>
    <refpurpose>Disconnette da Oracle</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCILogOff</methodname>
      <methodparam><type>int</type><parameter>connection</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCILogOff</function> chiude una connessione Oracle.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ociexecute">
   <refnamediv>
    <refname>OCIExecute</refname>
    <refpurpose>Esegue un comando SQL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIExecute</methodname>
      <methodparam><type>int</type><parameter>statement</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>mode</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCIExecute</function> esegue un comando precedentemente 
     analizzato. (vedere <function>OCIParse</function>). Il parametro optzionale 
     <parameter>mode</parameter> permette di specificare la modalit&agrave; 
     di esecuzione (il default &egrave; OCI_COMMIT_ON_SUCCESS). Se non si 
     desidera che i comandi eseguano un commit automatico, usare OCI_DEFAULT nella
     variabile <parameter>mode</parameter>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocicommit">
   <refnamediv>
    <refname>OCICommit</refname>
    <refpurpose>Esegue le transazioni in sospeso</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCICommit</methodname>
      <methodparam><type>int</type><parameter>connection</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCICommit</function> esegue tutte le transazioni in sospeso
     sulla connessione Oracle <parameter>connection</parameter>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocirollback">
   <refnamediv>
    <refname>OCIRollback</refname>
    <refpurpose>Annulla le transazioni in sospeso</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIRollback</methodname>
      <methodparam><type>int</type><parameter>connection</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCIRollback</function> annulla tutte le transazioni in sospeso
	 sulla connessione Oracle <parameter>connection</parameter>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocinewdescriptor">
   <refnamediv>
    <refname>OCINewDescriptor</refname>
    <refpurpose>
     Inizializza un nuovo descrittore LOB/FILE vuoto (LOB &igrave; il default)
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>OCINewDescriptor</methodname>
      <methodparam><type>int</type><parameter>connection</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCINewDescriptor</function> Alloca memoria per accogliere 
     descrittori o locatori LOB. I valori validi per il parametro 
     <parameter>type</parameter> sono OCI_D_FILE, OCI_D_LOB, OCI_D_ROWID.
     Per i descrittori LOB, i metodi load, save, e savefile sono 
     associati al descrittore, per i BFILE esiste solo il 
     metodo load. Vedere i suggerimenti nel secondo esempio.
    </para>
    <example>
     <title>OCINewDescriptor</title>
     <programlisting>
<![CDATA[
<?php   
    /* Questo codice deve essere richiamato da un form HTML.
     * Richiede che $user, $password, $table, $where, e $commitsize
     * siano passati dalla form.  Il codice quindi cancella
     * le tuple selezionate usando ROWID ed esegue un commit ogni
     * $commitsize righe. (Usare con attenzione, non si può fare rollback)
     */
    $conn = OCILogon($user, $password);
    $stmt = OCIParse($conn,"select rowid from $table $where");
    $rowid = OCINewDescriptor($conn,OCI_D_ROWID);
    OCIDefineByName($stmt,"ROWID",&$rowid);   
    OCIExecute($stmt);
    while ( OCIFetch($stmt) ) {      
       $nrows = OCIRowCount($stmt);
       $delete = OCIParse($conn,"delete from $table where ROWID = :rid");
       OCIBindByName($delete,":rid",&$rowid,-1,OCI_B_ROWID);
       OCIExecute($delete);      
       print "$nrows\n";
       if ( ($nrows % $commitsize) == 0 ) {
           OCICommit($conn);      
       }   
    }
    $nrows = OCIRowCount($stmt);   
    print "$nrows deleted...\n";
    OCIFreeStatement($stmt);  
    OCILogoff($conn);
?>  
]]>
     </programlisting>
     <programlisting>
<![CDATA[
<?php
    /* Questo codice dimostra l'upload di file verso campi LOB.
     * Il form usato per questo esempio è del tipo seguente:
     * <form action="upload.php3" method="post" enctype="multipart/form-data">
     * <input type="file" name="lob_upload">
     * ...
     */
  if(!isset($lob_upload) || $lob_upload == 'none'){
?>
<form action="upload.php3" method="post" enctype="multipart/form-data">
Upload file: <input type="file" name="lob_upload"><br>
<input type="submit" value="Upload"> - <input type="reset">
</form>
<?php
  } else {
     // $lob_upload contiene il nome del file temporaneo
     $conn = OCILogon($user, $password);
     $lob = OCINewDescriptor($conn, OCI_D_LOB);
     $stmt = OCIParse($conn,"insert into $table (id, the_blob) 
               values(my_seq.NEXTVAL, EMPTY_BLOB()) returning the_blob into :the_blob");
     OCIBindByName($stmt, ':the_blob', &$lob, -1, OCI_B_BLOB);
     OCIExecute($stmt, OCI_DEFAULT);
     if($lob->savefile($lob_upload)){
        OCICommit($conn);
        echo "Blob successfully uploaded\n";
     }else{
        echo "Couldn't upload Blob\n";
     }
     OCIFreeDesc($lob);
     OCIFreeStatement($stmt);
     OCILogoff($conn);
  }
?>
]]>
     </programlisting>
    </example>
    <example>
     <title>OCINewDescriptor</title>
     <programlisting>
<![CDATA[
<?php   
    /* Chiamatai di una stored procedure PL/SQLs che contiene clobs come parametri
    * di input (PHP 4 >= 4.0.6). 
    * La signature della stored prodedure PL/SQL d'esempio è:
     *
     * PROCEDURE save_data
     *   Argument Name                  Type                    In/Out Default?
     *   ------------------------------ ----------------------- ------ --------
     *   KEY                            NUMBER(38)              IN
     *   DATA                           CLOB                    IN
     *
     */

    $conn = OCILogon($user, $password);
    $stmt = OCIParse($conn, "begin save_data(:key, :data); end;");
    $clob = OCINewDescriptor($conn, OCI_D_LOB);
	OCIBindByName($stmt, ':key', $key);
	OCIBindByName($stmt, ':data', $clob, -1, OCI_B_CLOB);
	$clob->WriteTemporary($data);
	OCIExecute($stmt, OCI_DEFAULT);
	OCICommit($conn);
	$clob->close();
	$clob->free();
	OCIFreeStatement($stmt);
?>
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>
  
  <refentry id="function.ocirowcount">
   <refnamediv>
    <refname>OCIRowCount</refname>
    <refpurpose>Restituisce il numero di tuple modificate</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIRowCount</methodname>
      <methodparam><type>int</type><parameter>statement</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCIRowCounts</function> restituisce il numero di tuple modificate,
	 ad esempio, da un comando update. Questa funzione non riporta il numero
	 di tuple restituite da una select!</para>
    <para>
     <example>
      <title>OCIRowCount</title>
      <programlisting>
<![CDATA[
<?php
    print "<HTML><PRE>";
    $conn = OCILogon("scott","tiger");
    $stmt = OCIParse($conn,"create table emp2 as select * from emp");
    OCIExecute($stmt);
    print OCIRowCount($stmt) . " rows inserted.<BR>";
    OCIFreeStatement($stmt);
    $stmt = OCIParse($conn,"delete from emp2");
    OCIExecute($stmt);
    print OCIRowCount($stmt) . " rows deleted.<BR>";
    OCICommit($conn);
    OCIFreeStatement($stmt);
    $stmt = OCIParse($conn,"drop table emp2");
    OCIExecute($stmt);
    OCIFreeStatement($stmt);
    OCILogOff($conn);
    print "</PRE></HTML>";
?>
]]>
      </programlisting>
     </example>
   </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocinumcols">
   <refnamediv>
    <refname>OCINumCols</refname>
    <refpurpose>
     Restituisce il numero di campi che risultano da un comando SQL
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCINumCols</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCINumCols</function> restituisce il numero di campi contenuti in 
     un'istruzione SQL
    </para>
    <example>
     <title>OCINumCols</title>
     <programlisting>
<![CDATA[
<?php   
    print "<HTML><PRE>\n";   
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn,"select * from emp");
    OCIExecute($stmt);
    while ( OCIFetch($stmt) ) {
        print "\n";   
        $ncols = OCINumCols($stmt);
        for ( $i = 1; $i <= $ncols; $i++ ) {
            $column_name  = OCIColumnName($stmt,$i);
            $column_value = OCIResult($stmt,$i);
            print $column_name . ': ' . $column_value . "\n";
        }
        print "\n";
    }
    OCIFreeStatement($stmt);  
    OCILogoff($conn);   
    print "</PRE>";
    print "</HTML>\n"; 
   ?>
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>
 
  <refentry id="function.ociresult">
   <refnamediv>
    <refname>OCIResult</refname>
    <refpurpose>Restituisce il valore di campo della tupla estratta</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>mixed</type><methodname>OCIResult</methodname>
      <methodparam><type>int</type><parameter>statement</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>column</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCIResult</function> restituisce i dati del campo 
	 <parameter>column</parameter> nella tupla corrente (vedere
	 <function>OCIFetch</function>).<function>OCIResult</function> restituir&agrave;
	 tutto come stringa, eccetto i tipi astratti (ROWIDs,
         LOBs e FILEs).
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocifetch">
   <refnamediv>
    <refname>OCIFetch</refname>
    <refpurpose>Estrae la prossima tupla opnendola nel buffer di risultato.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIFetch</methodname>
      <methodparam><type>int</type><parameter>statement</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCIFetch</function> estrae la prossima tupla (nelle istruzioni SELECT)
	 ponendola nel buffer interno di risultato.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocifetchinto">
   <refnamediv>
    <refname>OCIFetchInto</refname>
    <refpurpose>Estrae la prossima tupla ponendola in un array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIFetchInto</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
      <methodparam><type>array &amp;</type><parameter>result</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>mode</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCIFetchInto</function> estrae la prossima tupla (nelle istruzioni 
     SELECT) ponendola nell'array <parameter>result</parameter>. 
     <function>OCIFetchInto</function> sovrascriver&agrave; il preceente 
     contenuto di <parameter>result</parameter>. Di default 
     <parameter>result</parameter> conterr&agrave; un array (primo indice = 1) di tutti i campi 
     che non sono &null;.
    </para>
	<para>
	 Il parametro <parameter>mode</parameter> permette di cambiare il comportamento 
	 predefinito. E' possibile specificare pi&ugrave; di un'opzione sommandole 
	 (es. OCI_ASSOC+OCI_RETURN_NULLS). Le opzioni valide 
         sono:
     <simplelist>
      <member>
       <literal>OCI_ASSOC</literal> Restituisce un array associativo.
      </member>
      <member>
       <literal>OCI_NUM</literal> Restituisce un array indicizzato 
       (primo indice = 1). (DEFAULT)
      </member>
      <member>
       <literal>OCI_RETURN_NULLS</literal> Restituisce anche i campi &null;.
      </member>
      <member>
       <literal>OCI_RETURN_LOBS</literal> Restituisce il valore di un LOB 
        invece del descrittore.
      </member>
     </simplelist>
	</para>
   </refsect1>
  </refentry>

  <refentry id="function.ocifetchstatement">
   <refnamediv>
    <refname>OCIFetchStatement</refname>
    <refpurpose>Estrae tutte le tuple in un array.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIFetchStatement</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
      <methodparam><type>array &amp;</type><parameter>variable</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCIFetchStatement</function> estrae tutte le tuple da un risultato 
     ponendole in un array definito dall'utente. 
     <function>OCIFetchStatement</function> restituisce il numero di tuple 
     estratte. 
    </para>
     <example>
      <title>OCIFetchStatement</title>
      <programlisting>
<![CDATA[
<?php
/* OCIFetchStatement example mbritton@verinet.com (990624) */

$conn = OCILogon("scott","tiger");

$stmt = OCIParse($conn,"select * from emp");

OCIExecute($stmt);

$nrows = OCIFetchStatement($stmt,$results);
if ( $nrows > 0 ) {
   print "<TABLE BORDER=\"1\">\n";
   print "<TR>\n";
   while ( list( $key, $val ) = each( $results ) ) {
      print "<TH>$key</TH>\n";
   }
   print "</TR>\n";
   
   for ( $i = 0; $i < $nrows; $i++ ) {
      reset($results);
      print "<TR>\n";
      while ( $column = each($results) ) {   
         $data = $column['value'];
         print "<TD>$data[$i]</TD>\n";
      }
      print "</TR>\n";
   }
   print "</TABLE>\n";
} else {
   echo "No data found<BR>\n";
}      
print "$nrows Records Selected<BR>\n";
 
OCIFreeStatement($stmt);
OCILogoff($conn);
?>
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>
  
  <refentry id="function.ocicolumnisnull">
   <refnamediv>
    <refname>OCIColumnIsNULL</refname>
    <refpurpose>verifica se un campo di risultato &egrave; &null;</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIColumnIsNULL</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>column</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCIColumnIsNULL</function> restituisce &true; se il campo 
     <parameter>col</parameter> nel risultato dell'istruzione
     <parameter>stmt</parameter> &egrave; &null;. Si pu&ograve; usare il 
     numero del campo (primo campo=1) o il nome del campo per il 
     parametro <parameter>col</parameter>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocicolumnname">
   <refnamediv>
    <refname>OCIColumnName</refname>
    <refpurpose>Restituisce il nome di un campo.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>OCIColumnName</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
      <methodparam><type>int</type><parameter>col</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>OCIColumnName</function> restituisce il nome del campo 
      corrispondente alla posizione (1 = primo campo) specificata.
    </simpara>
    <para>
     <example>
      <title>OCIColumnName</title>
      <programlisting>
<![CDATA[
<?php   
    print "<HTML><PRE>\n";   
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn,"select * from emp");
    OCIExecute($stmt);
    print "<TABLE BORDER=\"1\">";
    print "<TR>";
    print "<TH>Name</TH>";
    print "<TH>Type</TH>";
    print "<TH>Length</TH>";
    print "</TR>";
    $ncols = OCINumCols($stmt);
    for ( $i = 1; $i <= $ncols; $i++ ) {
        $column_name  = OCIColumnName($stmt,$i);
        $column_type  = OCIColumnType($stmt,$i);
        $column_size  = OCIColumnSize($stmt,$i);
        print "<TR>";
        print "<TD>$column_name</TD>";
        print "<TD>$column_type</TD>";
        print "<TD>$column_size</TD>";
        print "</TR>";
    }
    OCIFreeStatement($stmt);  
    OCILogoff($conn);   
    print "</PRE>";
    print "</HTML>\n"; 
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     Vedere anche <function>OCINumCols</function>,
     <function>OCIColumnType</function>, 
     e <function>OCIColumnSize</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicolumnsize">
   <refnamediv>
    <refname>OCIColumnSize</refname>
    <refpurpose>restituisce la dimensione del campo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIColumnSize</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>column</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCIColumnSize</function> restituisce la dimensione del campo
     come riportata da Oracle. Si pu&ograve; usare il
	 numero del campo (primo campo=1) o il nome del campo per 
         il parametro <parameter>col</parameter>.
    </para>
    <para>
     <example>
      <title>OCIColumnSize</title>
      <programlisting>
<![CDATA[
<?php   
    print "<HTML><PRE>\n";   
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn,"select * from emp");
    OCIExecute($stmt);
    print "<TABLE BORDER=\"1\">";
    print "<TR>";
    print "<TH>Name</TH>";
    print "<TH>Type</TH>";
    print "<TH>Length</TH>";
    print "</TR>";
    $ncols = OCINumCols($stmt);
    for ( $i = 1; $i <= $ncols; $i++ ) {
        $column_name  = OCIColumnName($stmt,$i);
        $column_type  = OCIColumnType($stmt,$i);
        $column_size  = OCIColumnSize($stmt,$i);
        print "<TR>";
        print "<TD>$column_name</TD>";
        print "<TD>$column_type</TD>";
        print "<TD>$column_size</TD>";
        print "</TR>";
    }
    print "</TABLE>";
    OCIFreeStatement($stmt);  
    OCILogoff($conn);   
    print "</PRE>";
    print "</HTML>\n"; 
   ?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     Vedere anche <function>OCINumCols</function>,
     <function>OCIColumnName</function>, e
     <function>OCIColumnSize</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicolumntype">
   <refnamediv>
    <refname>OCIColumnType</refname>
    <refpurpose>Restituisce il tipo di dati di un campo.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>mixed</type><methodname>OCIColumnType</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
      <methodparam><type>int</type><parameter>col</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>OCIColumnType</function> restituisce il tipo del campo 
      corrispondente alla posizione (1 = primo campo) 
      specificata.
    </simpara>
    <para>
     <example>
      <title>OCIColumnType</title>
      <programlisting>
<![CDATA[
<?php   
    print "<HTML><PRE>\n";   
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn,"select * from emp");
    OCIExecute($stmt);
    print "<TABLE BORDER=\"1\">";
    print "<TR>";
    print "<TH>Name</TH>";
    print "<TH>Type</TH>";
    print "<TH>Length</TH>";
    print "</TR>";
    $ncols = OCINumCols($stmt);
    for ( $i = 1; $i <= $ncols; $i++ ) {
        $column_name  = OCIColumnName($stmt,$i);
        $column_type  = OCIColumnType($stmt,$i);
        $column_size  = OCIColumnSize($stmt,$i);
        print "<TR>";
        print "<TD>$column_name</TD>";
        print "<TD>$column_type</TD>";
        print "<TD>$column_size</TD>";
        print "</TR>";
    }
    OCIFreeStatement($stmt);  
    OCILogoff($conn);   
    print "</PRE>";
    print "</HTML>\n"; 
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     Vedere anche <function>OCINumCols</function>,
     <function>OCIColumnName</function>, 
     e <function>OCIColumnSize</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ociserverversion">
   <refnamediv>
    <refname>OCIServerVersion</refname>
    <refpurpose>Restituisce una stringa contenente informazioni sulla versione
    del server. </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>OCIServerVersion</methodname>
      <methodparam><type>int</type><parameter>conn</parameter></methodparam>
     </methodsynopsis>
    <para>
     <example>
      <title>OCIServerVersion</title>
      <programlisting>
<![CDATA[
<?php
   $conn = OCILogon("scott","tiger");
   print "Server Version: " . OCIServerVersion($conn);
   OCILogOff($conn);
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocistatementtype">
   <refnamediv>
    <refname>OCIStatementType</refname>
    <refpurpose>Restituisce il tipo di un'istruzione OCI.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>OCIStatementType</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCIStatementType</function> restituisce uno dei seguenti 
     valori:
     <orderedlist>
      <listitem><simpara>			"SELECT"</simpara></listitem>
      <listitem><simpara>			"UPDATE"</simpara></listitem>
      <listitem><simpara>			"DELETE"</simpara></listitem>
      <listitem><simpara>			"INSERT"</simpara></listitem>
      <listitem><simpara>			"CREATE"</simpara></listitem>
      <listitem><simpara>			"DROP"</simpara></listitem>
      <listitem><simpara>			"ALTER"</simpara></listitem>
      <listitem><simpara>			"BEGIN"</simpara></listitem>
      <listitem><simpara>			"DECLARE"</simpara></listitem>
      <listitem><simpara>			"UNKNOWN"</simpara></listitem>
     </orderedlist></para>
    <para>
     <example>
      <title>Code examples</title>
      <programlisting>
<![CDATA[
<?php
    print "<HTML><PRE>";
    $conn = OCILogon("scott","tiger");
    $sql  = "delete from emp where deptno = 10";
   
    $stmt = OCIParse($conn,$sql);
    if ( OCIStatementType($stmt) == "DELETE" ) {
        die "You are not allowed to delete from this table<BR>";
    }
   
    OCILogoff($conn);
    print "</PRE></HTML>";
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocinewcursor">
   <refnamediv>
    <refname>OCINewCursor</refname>
    <refpurpose>
     restituisce un nuovo cursore (Statement-Handle) - usare questa per collegare un ref-cursors
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCINewCursor</methodname>
      <methodparam><type>int</type><parameter>conn</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCINewCursor</function> alloca un nuovo identificatore di istruzione sulla connessione
     specificata.
    </para>
    <para>
     <example>
      <title>Using a REF CURSOR from a stored procedure</title>
      <programlisting>
<![CDATA[
<?php   
// suppose your stored procedure info.output returns a ref cursor in :data

$conn = OCILogon("scott","tiger");
$curs = OCINewCursor($conn);
$stmt = OCIParse($conn,"begin info.output(:data); end;");

ocibindbyname($stmt,"data",&$curs,-1,OCI_B_CURSOR);
ociexecute($stmt);
ociexecute($curs);

while (OCIFetchInto($curs,&$data)) {
    var_dump($data);
}
 
OCIFreeStatement($stmt);
OCIFreeCursor($curs);
OCILogoff($conn);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Using a REF CURSOR in a select statement</title>
      <programlisting>
<![CDATA[
<?php   
print "<HTML><BODY>";
$conn = OCILogon("scott","tiger");
$count_cursor = "CURSOR(select count(empno) num_emps from emp " .
                "where emp.deptno = dept.deptno) as EMPCNT from dept";
$stmt = OCIParse($conn,"select deptno,dname,$count_cursor");

ociexecute($stmt);
print "<TABLE BORDER=\"1\">";
print "<TR>";
print "<TH>DEPT NAME</TH>";
print "<TH>DEPT #</TH>";
print "<TH># EMPLOYEES</TH>";
print "</TR>";

while (OCIFetchInto($stmt,&amp;$data,OCI_ASSOC)) {
    print "<TR>";
    $dname  = $data["DNAME"];
    $deptno = $data["DEPTNO"];
    print "<TD>$dname</TD>";
    print "<TD>$deptno</TD>";
    ociexecute($data[ "EMPCNT" ]);
    while (OCIFetchInto($data[ "EMPCNT" ],&amp;$subdata,OCI_ASSOC)) {
        $num_emps = $subdata["NUM_EMPS"];
        print  "<TD>$num_emps</TD>";
    }
    print "</TR>";
}
print "</TABLE>";
print "</BODY></HTML>";
OCIFreeStatement($stmt);
OCILogoff($conn);
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocifreestatement">
   <refnamediv>
    <refname>OCIFreeStatement</refname>
    <refpurpose>
     Libera tutte le risorse associate ad un'istruzione.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIFreeStatement</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
     </methodsynopsis>
    <para>
	    <function>OCIFreeStatement</function> restituisce &true; in caso di successo, &false; 
     altrimenti.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocifreecursor">
   <refnamediv>
    <refname>OCIFreeCursor</refname>
    <refpurpose>
     Libera tutte le risorse associate ad un cursore.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIFreeCursor</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCIFreeCursor</function> restituisce &true; in caso di successo, &false;
     altrimenti.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocifreedesc">
   <refnamediv>
   <refname>OCIFreeDesc</refname>
    <refpurpose>Cancella un descrittore di oggetto binario (LOB).</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIFreeDesc</methodname>
      <methodparam><type>object</type><parameter>lob</parameter></methodparam>
     </methodsynopsis>
    <para>
	    <function>OCIFreeDesc</function> restituisce &true; in caso di successo,
     &false; altrimenti.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ociparse">
   <refnamediv>
    <refname>OCIParse</refname>
    <refpurpose>Analizza una query e restituisce un'istruzione.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIParse</methodname>
      <methodparam><type>int</type><parameter>conn</parameter></methodparam>
      <methodparam><type>string</type><parameter>query</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>OCIParse</function> analizza la 
     <parameter>query</parameter> rispetto alla connessione  <parameter>conn</parameter>. 
     Restituisce un identificatore di istruzione se la query &egrave; valida,
     &false; altrimenti. La <parameter>query</parameter> pu&ograve; essere qualsiasi 
     comando SQL o blocco di codice PL/SQL.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.ocierror">
   <refnamediv>
    <refname>OCIError</refname>
    <refpurpose>Restituisce l'ultimo errore di stmt|conn|global. 
     Se non c'&egrave; stato errire, restituisce &false;.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>array</type><methodname>OCIError</methodname>
      <methodparam choice="opt"><type>int</type><parameter>stmt|conn|global</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>OCIError</function> restituisce l'ultimo errore. Se 
     il parametro opzionale <parameter>stmt|conn|global</parameter> non &egrave; 
     specificato, viene restituito l'ultimo errore generato. Se non ci sono 
     errori, <function>OCIError</function> restituisce 
     &false;. <function>OCIError</function> restituisce l'errore in un
     array associativo. In questo array, <parameter>code</parameter>
     d&agrave; il codice d'errora oracle e <parameter>message</parameter>
     d&agrave; la stringa d'errore.
    </simpara>
</refsect1>
  </refentry>

  <refentry id="function.ociinternaldebug">
   <refnamediv>
    <refname>OCIInternalDebug</refname>
    <refpurpose>
     Abilita o disabilita la visualizzazione del debug interno.  Di default &egrave; 
     disabilitata
   </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>void</type><methodname>OCIInternalDebug</methodname>
      <methodparam><type>int</type><parameter>onoff</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>OCIInternalDebug</function> abilita la visualizzazione del debug interno.  
     Impostare <parameter>onoff</parameter> a 0 per spegnere 
     il debug, 1 per accenderlo.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicancel">
   <refnamediv>
    <refname>OCICancel</refname>
    <refpurpose>Interrompe la lettura del cursore</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCICancel</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Se non si vogliono leggere altri dati da un cursore, chiamare
     <function>OCICancel</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocisetprefetch">
   <refnamediv>
    <refname>OCISetPrefetch</refname>
    <refpurpose>imposta il numero di tuple da precaricare</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCISetPrefetch</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
      <methodparam><type>int</type><parameter>rows</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Imposta il nomero di tuple da precaricare. Il valore di default &egrave; 1.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ociwritelobtofile">
   <refnamediv>
    <refname>OCIWriteLobToFile</refname>
    <refpurpose>Coming soon.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>void</type><methodname>OCIWriteLobToFile</methodname>
      <methodparam><type>object</type><parameter>lob</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>start</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>lenght</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Coming soon.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocisavelobfile">
   <refnamediv>
    <refname>OCISaveLobFile</refname>
    <refpurpose>Coming soon.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>OCISaveLobFile</methodname>
      <methodparam><type>object</type><parameter>lob</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Coming soon.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocisavelob">
   <refnamediv>
    <refname>OCISaveLob</refname>
    <refpurpose>Coming soon.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>OCISaveLob</methodname>
      <methodparam><type>object</type><parameter>lob</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Coming soon.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ociloadlob">
   <refnamediv>
    <refname>OCILoadLob</refname>
    <refpurpose>Coming soon.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>OCILoadLob</methodname>
      <methodparam><type>object</type><parameter>lob</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Coming soon.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicolumnscale">
   <refnamediv>
    <refname>OCIColumnScale</refname>
    <refpurpose>Coming soon.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIColumnScale</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
      <methodparam><type>int</type><parameter>col</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Coming soon.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicolumnprecision">
   <refnamediv>
    <refname>OCIColumnPrecision</refname>
    <refpurpose>Coming soon.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIColumnPrecision</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
      <methodparam><type>int</type><parameter>col</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Coming soon.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicolumntyperaw">
   <refnamediv>
    <refname>OCIColumnTypeRaw</refname>
    <refpurpose>Coming soon.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>mixed</type><methodname>OCIColumnTypeRaw</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
      <methodparam><type>int</type><parameter>col</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Coming soon.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocinewcollection">
   <refnamediv>
    <refname>OCINewCollection</refname>
    <refpurpose>Coming soon.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>OCINewCollection</methodname>
      <methodparam><type>int</type><parameter>conn</parameter></methodparam>
      <methodparam><type>string</type><parameter>tdo</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>shema</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Coming soon.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocifreecollection">
   <refnamediv>
    <refname>OCIFreeCollection</refname>
    <refpurpose>Coming soon.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>OCIFreeCollection</methodname>
      <methodparam><type>object</type><parameter>lob</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Coming soon.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicollassign">
   <refnamediv>
    <refname>OCICollAssign</refname>
    <refpurpose>Coming soon.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>OCICollAssign</methodname>
      <methodparam><type>object</type><parameter>collection</parameter></methodparam>
      <methodparam><type>object</type><parameter>object</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Coming soon.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicollappend">
   <refnamediv>
    <refname>OCICollAppend</refname>
    <refpurpose>Coming soon.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>OCICollAppend</methodname>
      <methodparam><type>object</type><parameter>collection</parameter></methodparam>
      <methodparam><type>object</type><parameter>object</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Coming soon.
    </simpara>
   </refsect1>
  </refentry>
  
  <refentry id="function.ocicollassignelem">
   <refnamediv>
    <refname>OCICollAssignElem</refname>
    <refpurpose>Coming soon.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>OCICollAssignElem</methodname>
      <methodparam><type>object</type><parameter>collection</parameter></methodparam>
      <methodparam><type>string</type><parameter>ndx</parameter></methodparam>
      <methodparam><type>string</type><parameter>val</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Coming soon.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicollgetelem">
   <refnamediv>
    <refname>OCICollGetElem</refname>
    <refpurpose>Coming soon.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>OCICollGetElem</methodname>
      <methodparam><type>object</type><parameter>collection</parameter></methodparam>
      <methodparam><type>string</type><parameter>ndx</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Coming soon.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicollmax">
   <refnamediv>
    <refname>OCICollMax</refname>
    <refpurpose>Coming soon.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>OCICollMax</methodname>
      <methodparam><type>object</type><parameter>collection</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Coming soon.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicollsize">
   <refnamediv>
    <refname>OCICollSize</refname>
    <refpurpose>Coming soon.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>OCICollSize</methodname>
      <methodparam><type>object</type><parameter>collection</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Coming soon.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicolltrim">
   <refnamediv>
    <refname>OCICollTrim</refname>
    <refpurpose>Coming soon.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>OCICollTrim</methodname>
      <methodparam><type>object</type><parameter>collection</parameter></methodparam>
      <methodparam><type>int</type><parameter>num</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Coming soon.
    </simpara>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

