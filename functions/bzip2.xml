<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.12 Maintainer: cucinato  Status: ready -->
 <reference id="ref.bzip2">
  <title>Funzioni di compressione Bzip2</title>
  <titleabbrev>Bzip2</titleabbrev>
  <partintro>
   <para>
    Questo modulo utilizza le funzioni della libreria <ulink
    url="&url.bzip2;">bzip2</ulink> di Julian Seward per
    leggere e scrivere in modo trasparente i file compressi con bzip2 (.bz2).
   </para>
   <para>
    Il spporto di Bzip2 in PHP non &egrave; attivo per default. Si deve
    usare l'opzione di configurazione <link linkend="install.configure.with-bzip2">--with-bz2</link>
    quando si compila PHP per sbilitare il supporto bzip2. Questo modulo
    richiede bzip2/libbzip2 con versione &gt;= 1.0.x.
   </para>

   <sect1 id="bzip2-example">
    <title>Breve sorgente di esempio</title>
    <para>
     Questo esempio apre un file temporaneo e scrive una stringa di prova su
     di esso, quindi stampa il contenuto del file.
    </para>
    <example>
     <title>breve esempio di bzip2</title>
     <programlisting role="php">
<![CDATA[
<?php

$nomefile = "/tmp/filediprova.bz2";
$str = "Questa è una stringa di prova.\n";

// apre il file in lettura
$bz = bzopen($nomefile, "w");

// scrive la stringa sul file
bzwrite($bz, $str);

// chiude il file
bzclose($bz);

// apre il file in lettura
$bz = bzopen($nomefile, "r");

// legge 10 caratteri
print bzread($bz, 10);

// stampa fino alla fine del file (o fino ai prossimi 1024 caratteri) e chiude il file.
print bzread($bz);

bzclose($bz);

?>
]]>
     </programlisting>
    </example>
   </sect1>
  </partintro>


  <refentry id="function.bzclose">
   <refnamediv>
    <refname>bzclose</refname>
    <refpurpose>Chiude un puntatore a un file bzip2</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>bzclose</function></funcdef>
      <paramdef>int <parameter>bz</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Chiude il file bzip2 referenziato dal puntatore <parameter>bz</parameter>.
    </para>
    <para>
     Restituisce &true; in caso di successo, &false; altrimenti.
    </para>
    <para>
     Il puntatore al file deve essere valido, e deve puntare a un file
     gi$agrave; aperto con <function>bzopen</function>.
    </para>
    <para>
     Vedere anche <function>bzopen</function>.
    </para>
   </refsect1>
  </refentry>

  
  <refentry id="function.bzcompress">
   <refnamediv>
    <refname>bzcompress</refname>
    <refpurpose>Comprime una stringa nel formato bzip2</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>bzcompress</function></funcdef>
      <paramdef>string <parameter>sorgente</parameter></paramdef>
      <paramdef>int
       <parameter><optional>dimblocco</optional></parameter>
      </paramdef>
      <paramdef>int 
       <parameter><optional>workfactor</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>bzcompress</function> comprime la 
     stringa <parameter>sorgente</parameter> e la restituisce come dati
     codificati in bzip2.
    </para>
    <para>
     Il parametro opzionale <parameter>dimblocco</parameter> specifica
     la dimensione del blocco usato durante la compressione e dovrebbe essere un numero tra
     1 e 9 dove 9 d&agrave; la compressione migliore, ma usando pi&ugrave;
     risorse. <parameter>dimblocco</parameter> ha come valore predefinito
     4.
    </para>
    <para>
     Il parametro opzionale <parameter>workfactor</parameter> controlla
     il comportamento della fase di compressione quando deve trattare col caso peggiore,
     ovvero dati in ingresso molto ripetitivi. Il valore pu&ograve; variare tra 0 e
     250, dove 0 &egrave; un caso speciale e 30 egrave; il valore di
     default. Indipendentemente dal parametro <parameter>workfactor</parameter>, i
     dat generati sono gli stessi.
    </para>
    <para>
     <example>
      <title>Esempio di <function>bzcompress</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$str = "dati di prova";
$bzstr = bzcompress($str, 9);
print( $bzstr );
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     See also <function>bzdecompress</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.bzdecompress">
   <refnamediv>
    <refname>bzdecompress</refname>
    <refpurpose>Decomprime dati codificati con bzip2</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>bzdecompress</function></funcdef>
      <paramdef>string <parameter>sorgente</parameter></paramdef>
      <paramdef>int
       <parameter><optional>small</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>bzdecompress</function> decomprime la
     strina <parameter>sorgente</parameter> contenente dati codificati in bzip2
     e li restituisce.  Se il parametro opzionale
     <parameter>small</parameter> &egrave; &true;, verr&agrave; usato un
     algoritmo di decompressione alternativo che richiede meno memoria (la
     maximum quantit&agrave; massima di meoria richiesta scende a 2300K) ma funziona a
     circa la met&agrave; della velocit&agrave;.  Vedere la <ulink url="&url.bzip2;">documentazione di
     bzip2</ulink> per maggiori informazioni su questa funzionalit&agrave;.
    </para>
    <para>
     <example>
      <title><function>bzdecompress</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$stringa_iniziale = "Sto facendo il mio lavoro?";
$bzstr = bzcompress($start_str);

print( "Stirnga Compressa: " );
print( $bzstr );
print( "\n<br>n" );

$stringa = bzdecompress($bzstr);
print( "Stringa Decompressa: " );
print( $str );
print( "\n<br>n" );
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     See also <function>bzcompress</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.bzerrno">
   <refnamediv>
    <refname>bzerrno</refname>
    <refpurpose>Restituisce il codice d'errore bzip2</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>bzerrno</function></funcdef>
      <paramdef>int <parameter>bz</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce il codice di un qualsiasi errore bzip2 restituito dal 
     puntatore al file <parameter>bz</parameter>.
    </para>
    <para>
     Vedere anche <function>bzerror</function> e <function>bzerrstr</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.bzerror">
   <refnamediv>
    <refname>bzerror</refname>
    <refpurpose>Restituisce il codice d'errore bzip2 e la stringa corrispondente in un array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>bzerror</function></funcdef>
      <paramdef>int <parameter>bz</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce il codice e la stringa di errore, sotto forma di array associativo,
     di un errore bzip2 restituito dal puntatore 
     <parameter>bz</parameter>.
    </para>
    <para>
     <example>
      <title>Esempio di <function>bzerror</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$errore = bzerror($bz);

echo $errore["errno"];
echo $errore["errstr"];
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Vedere anche <function>bzerrno</function> e <function>bzerrstr</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.bzerrstr">
   <refnamediv>
    <refname>bzerrstr</refname>
    <refpurpose>restituisce la stringa di errore bzip2</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>bzerrstr</function></funcdef>
      <paramdef>int <parameter>bz</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Resituisce la stringa di errore bzip2 restituito dal
     puntatore <parameter>bz</parameter>.
    </para>
    <para>
     Vedere anche <function>bzerrno</function> e <function>bzerror</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.bzflush">
   <refnamediv>
    <refname>bzflush</refname>
    <refpurpose>Forza la scrittura di tutti i dati nel buffer</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>bzflush</function></funcdef>
      <paramdef>int <parameter>bz</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Forza la scrittura di tutti i dati che sono nel buffer del puntatore
     <parameter>bz</parameter>.
    </para>
    <para>
     Restituisce &true; in caso di successo, &false; altrimenti.
    </para>
    <para>
     Vedere anche <function>bzread</function> e <function>bzwrite</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.bzopen">
   <refnamediv>
    <refname>bzopen</refname>
    <refpurpose>Apre un file compresso bzip2</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>bzopen</function></funcdef>
      <paramdef>string <parameter>nomefile</parameter></paramdef>
      <paramdef>string <parameter>modo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Apre un file bzip2 (.bz2) in lettura o scrittura.
     <parameter>nomefile</parameter> &egrave; il nome del file da
     aprire. Il parametro <parameter>modo</parameter> egrave; simile a quello
     della funzione <function>fopen</function> (`r' per lettura, `w' per scrittura, ecc.).
    </para>
    <para>
     Se l'operazione fallisce, la funzione restituisce &false;, altrimenti
     restituisce un puntatore al file appena aperto.
    </para>
    <para>
     <example>
      <title>Esempio di<function>bzopen</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$bz = bzopen("/tmp/foo.bz2", "r");
$file_decompresso = bzread($bz, filesize("/tmp/foo.bz2"));
bzclose($bz);

print( "Il contenuto di /tmp/foo.bz2 è: " );
print( "\n<br>n" );
print( $file_decompresso );
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Vedere anche <function>bzclose</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.bzread">
   <refnamediv>
    <refname>bzread</refname>
    <refpurpose>Esegue la lettura binaria di un file bzip2</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>bzread</function></funcdef>
      <paramdef>int <parameter>bz</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>lunghezza</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>bzread</function> legge fino a 
     <parameter>lunghezza</parameter> byte dal puntatore bzip2
     specificato da <parameter>bz</parameter>.  La pettura termina quando
     <parameter>lunghezza</parameter> byte (decompressi) sono stati letti
     o quando viene raggiunto l'EOF.  Se il parametro
     opzionale <parameter>lunghezza</parameter> &egrave; omesso,
     <function>bzread</function> legger&agrave; 1024 byte (decompressi)
     ogni volta.
    </para>
    <para>
     <example>
      <title>Esempio di <function>bzread</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$bz = bzopen("/tmp/foo.bz2", "r");
$str = bzread($bz, 2048);
print( $str );
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Vedere anche <function>bzwrite</function> e <function>bzopen</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.bzwrite">
   <refnamediv>
    <refname>bzwrite</refname>
    <refpurpose>Esegue la scrittura binaria di un file bzip2</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>bzwrite</function></funcdef>
      <paramdef>int <parameter>bz</parameter></paramdef>
      <paramdef>string <parameter>dati</parameter></paramdef>
      <paramdef>int
       <parameter><optional>lunghezza</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>bzwrite</function> scrie il contenuto della stringa
     <parameter>dati</parameter> nel file bzip2 puntato
     da <parameter>bz</parameter>. Se il parametro
     opzionale <parameter>lunghezza</parameter> &egrave; specificato, la scrittura si fermer&agrave;
     dopo che siano stati scritti <parameter>lunghezza</parameter> byte (decompressi)  o al raggiungimento
     della fine della stringa.
    </para>
    <para>
     <example>
      <title>Esempio di <function>bzwrite</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$str = "dati non compressi";
$bz = bzopen("/tmp/foo.bz2", "w");
bzwrite($bz, $str, strlen($str));
bzclose($bz);
?>
]]>
      </programlisting> 
     </example>
    </para>
    <para>
     Vedere anche <function>bzread</function> e <function>bzopen</function>.
    </para>
   </refsect1>
  </refentry>


 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
