<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.23 Maintainer: marchesini Status: ready -->
<reference id="ref.var">
  <title>Funzioni di Variabili</title>
  <titleabbrev>Variabili</titleabbrev>

  <refentry id="function.doubleval">
   <refnamediv>
    <refname>doubleval</refname>
    <refpurpose>Estrae il valore numerico a virgola mobile (double) da una variabile</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>double <function>doubleval</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Estrae il valore numerico a virgola mobile (double) da
     <parameter>var</parameter>.
    </simpara>
    <para>
     <parameter>Var</parameter> può essere una qualsiasi variabile scalare. Non è possibile usare
     <function>doubleval</function> con array o oggetti.
    <informalexample>
      <programlisting role="php">
$var = '122.34343pippo';
$double_value_di_var = doubleval ($var);
print double_value_di_var; // visualizza 122.34343
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Si veda anche <function>intval</function>,
     <function>strval</function>, <function>settype</function> e
     <link linkend="language.types.type-juggling">Type
     juggling</link>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.empty">
   <refnamediv>
    <refname>empty</refname>
    <refpurpose>Determina se una variabile è vuota, nulla o indefinita</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>empty</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce &false; se <parameter>var</parameter> è definita ed ha un valore non vuoto 
     e non uguale a zero; altrimenti restituisce &true;.
     <informalexample>
      <programlisting role="php">
$var = 0;
if (empty($var)) { #restituisce true 
    print '$var è uguale a 0 oppure non è definita';
}
if (!isset($var)) { // restituisce false
    print '$var non è definita';
}
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Si noti che la funzione perde di significato se applicata a qualcosa che non sia una 
     variabile; ad.es. <command>empty (addslashes ($name))</command> non ha significato 
     perchè tenta di verificare se un qualcosa che non è una variabile è una variabile 
     con un valore nullo.
    </simpara>
    <simpara>
     Si veda anche <function>isset</function> e
     <function>unset</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.gettype">
   <refnamediv>
    <refname>gettype</refname>
    <refpurpose>Resituisce il tipo di una variabile</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>gettype</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Resituisce il tipo della variabile PHP
     <parameter>var</parameter>.
    </para>
    <para>
     La stringa restituita può assumere i seguenti valori:
     <itemizedlist>
      <listitem>
       <simpara>"integer"</simpara>
      </listitem>
      <listitem>
       <simpara>"double"</simpara>
      </listitem>
      <listitem>
       <simpara>"string"</simpara>
      </listitem>
      <listitem>
       <simpara>"array"</simpara>
      </listitem>
      <listitem>
       <simpara>"object"</simpara>
      </listitem>
      <listitem>
       <simpara>"unknown type"</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Si veda anche <function>settype</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.intval">
   <refnamediv>
    <refname>intval</refname>
    <refpurpose>Estrae il valore intero da una variabile</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>intval</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>int
       <parameter><optional>base</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Estrae il valore intero di <parameter>var</parameter>,
     utilizzando la base definita a parametro per la conversione. (La base vale 10 di default).
    </simpara>
    <simpara>
     <parameter>Var</parameter> può essere una qualsiasi variabile scalare. Non è possibile utilizzare
     <function>intval</function> con array oppure oggetti.
    </simpara>
    <simpara>
     Si veda anche <function>doubleval</function>,
     <function>strval</function>, <function>settype</function> e
     <link linkend="language.types.type-juggling">Manipolazione dei Tipi</link>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-array">
   <refnamediv>
    <refname>is_array</refname>
    <refpurpose>Verifica se una variabile è un array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_array</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce &true; se <parameter>var</parameter> è un array, &false;
     in caso contrario.
    </para>
    <para>
     Si veda anche <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_long</function>, e
     <function>is_object</function>.
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.is-bool">
   <refnamediv>
    <refname>is_bool</refname>
     <refpurpose>
      Verifica se una variabile è di tipo boolean
     </refpurpose>
    </refnamediv>
    <refsect1>
     <title>Descrizione</title>
     <funcsynopsis>
     <funcprototype>
       <funcdef>int 
        <function>is_bool</function>
       </funcdef>
       <paramdef>mixed 
        <parameter>var</parameter>
       </paramdef>
     </funcprototype>
     </funcsynopsis>
     <para>
      Restituisce &true; se <parameter>var</parameter> è 
      di tipo boolean.
     </para>
     <para>
     Si veda anche <function>is_array</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_long</function>, e
     <function>is_object</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-double">
   <refnamediv>
    <refname>is_double</refname>
    <refpurpose>Verifica se una variabile è di tipo double (decimale a virgola mobile)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_double</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce &true; se <parameter>var</parameter> è un decimale a virgola mobile,
     &false; in caso contrario.
    </para>
    <para>
     Si veda anche <function>is_array</function>,
     <function>is_bool</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_long</function>, e
     <function>is_object</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-float">
   <refnamediv>
    <refname>is_float</refname>
    <refpurpose>Verifica se una variabile è di tipo float (decimale a virgola mobile)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_float</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Questa funzione è equivalente a <function>is_double</function>.
    </simpara>
    <simpara>
     Si veda anche <function>is_double</function>,
     <function>is_bool</function>,
     <function>is_real</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>, e
     <function>is_long</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-int">
   <refnamediv>
    <refname>is_int</refname>
    <refpurpose>Verifica se una variabile è di tipo integer</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_int</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Questa funzione è equivalente a <function>is_long</function>.
    </simpara>
    <simpara>
     Si veda anche <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_integer</function>,
     <function>is_string</function>,
     <function>is_real</function>,
     <function>is_object</function>,
     <function>is_array</function>, e
     <function>is_long</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-integer">
   <refnamediv>
    <refname>is_integer</refname>
    <refpurpose>Verifica se una variabile è di tipo integer</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_integer</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Questa funzione è equivalente a
     <function>is_long</function>.
    </simpara>
    <simpara>
     Si veda anche <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_string</function>,
     <function>is_real</function>,
     <function>is_object</function>,
     <function>is_array</function>, e
     <function>is_long</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-long">
   <refnamediv>
    <refname>is_long</refname>
    <refpurpose>Verifica se una variabile è di tipo integer</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_long</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce &true; se <parameter>var</parameter> è di tipo integer (long),
     &false; in caso contrario.
    </para>
    <para>
     Si veda anche <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>, e
     <function>is_integer</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-numeric">
   <refnamediv>
    <refname>is_numeric</refname>
    <refpurpose>
     Verifica se una variabile è un numero o una stringa numerica
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_numeric</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce &true; se <parameter>var</parameter> è un numero o una stringa numerica, &false; in caso contrario.
    </para>
    <para>
     Si veda anche <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>, e
     <function>is_integer</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-object">
   <refnamediv>
    <refname>is_object</refname>
    <refpurpose>Verifica se una variabile è un Oggetto</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_object</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce &true; se <parameter>var</parameter> è un oggetto, &false;
     in caso contrario.
    </para>
    <para>
     Si veda anche <function>is_bool</function>,
     <function>is_long</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_float</function>,
     <function>is_double</function>,
     <function>is_real</function>,
     <function>is_string</function>, e
     <function>is_array</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-real">
   <refnamediv>
    <refname>is_real</refname>
    <refpurpose>Verifica se una variabile è di tipo real (decimale a virgola mobile)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_real</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Questa funzione è equivalente a <function>is_double</function>.
    </simpara>
    <simpara>
     Si veda anche <function>is_bool</function>,
     <function>is_long</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_float</function>,
     <function>is_double</function>,
     <function>is_object</function>,
     <function>is_string</function>, e
     <function>is_array</function>.
    </simpara>
   </refsect1>
  </refentry>
  
  <refentry id="function.is-resource">
   <refnamediv>
    <refname>is_resource</refname>
    <refpurpose>
     Verifica se una variabile è una risorsa
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int 
       <function>is_resource</function>
      </funcdef>
      <paramdef>mixed 
       <parameter>var</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>is_resource</function> restituisce &true; se la variabile
     individuata dal parametro <parameter>var</parameter> è una risorsa, 
     altrimenti restituisce &false;.
    </para>
    <para>
     Il termine risorse fa riferimento a cose come gli handle a un file o al risultato di 
     una query su di un database. Questi handle sono normalmente allocati e liberati da 
     funzioni interne di PHP ma può verificarsi la necessità di ripulirle se non vengono 
     più utilizzate ma non sono ancora state liberate dal codice del programma. 
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-string">
   <refnamediv>
    <refname>is_string</refname>
    <refpurpose>Verifica se una variabile è una stringa</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_string</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Restituisce &true; se <parameter>var</parameter> è una stringa,
     &false; in caso contrario.
    </para>
    <para>
     Si veda anche <function>is_bool</function>,
     <function>is_long</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_float</function>,
     <function>is_double</function>,
     <function>is_real</function>,
     <function>is_object</function>, e
     <function>is_array</function>.
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.isset">
   <refnamediv>
    <refname>isset</refname>
    <refpurpose>Verifica se una variabile è definita</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>isset</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Restituisce &true; se <parameter>var</parameter> esiste;
     &false; in caso contrario.
    </simpara>
    <para>
     Se una variabile è stata ripulita con <function>unset</function>,
     non potrà essere <function>isset</function>.
     <informalexample>
      <programlisting role="php">
$a = "test";
echo isset ($a); // true
unset ($a);
echo isset ($a); // false
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Si veda anche <function>empty</function> e
     <function>unset</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.print-r">
   <refnamediv>
    <refname>print_r</refname>
    <refpurpose>
     Stampa informazioni relative al contenuto di una variabile in formato leggibile
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>print_r</function></funcdef>
      <paramdef>mixed <parameter>expression</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Questa funzione stampa delle informazioni sul contenuto di una variabile in un formato 
     facilmente leggibile. Se la variabile contiene una stringa, un intero o un numero decimale, 
     il valore stesso viene visualizzato. Se la variabile contiene un vettore (array) i valori 
     vengono visualizzati in un formato che evidenzia le chiavi ed i relativi elementi. Una notazione 
     simile viene utilizzata per gli oggetti. 
    </simpara>
    <simpara>
     Si confronti <function>print_r</function> e
     <function>var_dump</function>.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
$a = array (1, 2, array ("a", "b", "c"));
print_r ($a);
?>
      </programlisting>
     </informalexample>
    </para>
    <warning>
     <para>
      Questa funzione continua all'infinito se riceve come parametro un vettore o un oggetto 
      contenente una referenza diretta o indiretta a se stesso oppure contenente ulteriori 
      vettori o oggetti che a loro volta referenziano il padre o se stessi. 
      Un caso evidente è <literal>print_r($GLOBALS)</literal>,
      in quanto <literal>$GLOBALS</literal> è a sua volta una variabile globale e in quanto tale 
      contiene una referenza a se stessa.
     </para>
    </warning>
   </refsect1>
  </refentry>

  <refentry id="function.settype">
   <refnamediv>
    <refname>settype</refname>
    <refpurpose>Definisce il tipo di una variabile</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>settype</function></funcdef>
      <paramdef>string <parameter>var</parameter></paramdef>
      <paramdef>string <parameter>type</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Setta il tipo della variabile <parameter>var</parameter> a
     <parameter>type</parameter>.
    </para>
    <para>
     Valori possibili di <parameter>type</parameter> sono:
     <itemizedlist>
      <listitem><simpara>"integer"</simpara></listitem>
      <listitem><simpara>"double"</simpara></listitem>
      <listitem><simpara>"string"</simpara></listitem>
      <listitem><simpara>"array"</simpara></listitem>
      <listitem><simpara>"object"</simpara></listitem>
     </itemizedlist>
    </para>
    <para>
     Restituisce &true; se l'operazione ha successo; in caso contrario resituisce &false;.
    </para>
    <para>
     Si veda anche <function>gettype</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strval">
   <refnamediv>
    <refname>strval</refname>
    <refpurpose>Restituisce il valore di una variabile interpretato come stringa</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strval</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Restituisce il valore di <parameter>var</parameter> interpretato come stringa.
    </simpara>
    <simpara>
     <parameter>var</parameter> può essere una qualsiasi variabile scalare. Non è possibile usare
     <function>strval</function> con array o oggetti.
    </simpara>
    <simpara>
     Si veda anche <function>doubleval</function>,
     <function>intval</function>, <function>settype</function> e
     <link linkend="language.types.type-juggling">Type
     juggling</link>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.unset">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>Dereferenzia (elimina)  una variabile</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>unset</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>unset</function> distrugge la variabile specificata e restituisce
      &true;.
    </para>
    <para>
     <example>
      <title>Esempio di <function>unset</function></title>
      <programlisting role="php">
unset ($foo);
unset ($bar['quux']);
      </programlisting>
     </example>
    </para>
    <para>
     Si veda anche <function>isset</function> e
     <function>empty</function>.
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.var-dump">
   <refnamediv>
    <refname>var_dump</refname>
    <refpurpose>Stampa delle informazioni relative ad una variabile</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>var_dump</function></funcdef>
      <paramdef>mixed <parameter>expression</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Questa funzione restituisce delle informazioni strutturate riguardanti una espressione, 
     tra cui il suo tipo e il suo valore. I vettori (array) sono attraversati in maniera 
     ricorsiva e i valori indentati per evidenziare la struttura.
    </simpara>
    <simpara>
     Si confronti <function>var_dump</function> con
     <function>print_r</function>.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;pre>
&lt;?php
    $a = array (1, 2, array ("a", "b", "c"));
    var_dump ($a);
?>
&lt;/pre>
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
