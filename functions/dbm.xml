<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.17 Maintainer: calandra Status: ready -->
 <reference id="ref.dbm">
  <title>Funzioni DBM</title>
  <titleabbrev>DBM</titleabbrev>

  <partintro>
   <simpara>
    Questa funzioni consentono lo storage di records memorizzati 
    in un dbm-style database. Questo tipo di database (supportato da Berkeley DB, 
    GDBM, e qualche libreria di sistema, così come una built-in flatfile library) 
    memorizza coppie key/value (al contrario dei full-blown records supportati dai 
    database relazionali). 
   </simpara>
   <para>
    <example>
     <title>Esempio DBM</title>
     <programlisting role="php">
<![CDATA[
$dbm = dbmopen ("lastseen", "w");
if (dbmexists ($dbm, $userid)) {
    $last_seen = dbmfetch ($dbm, $userid);
} else {
    dbminsert ($dbm, $userid, time());
}
do_stuff();
dbmreplace ($dbm, $userid, time());
dbmclose ($dbm);
]]>
     </programlisting>
    </example>
   </para>
  </partintro>

  <refentry id="function.dbmopen">
   <refnamediv>
    <refname>dbmopen</refname>
    <refpurpose>Apre un database DBM</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>dbmopen</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>string</type><parameter>flags</parameter></methodparam>
     </methodsynopsis>
    <para>
     Il primo argomento è il nome (con il percorso completo) del file DBM da aprire e 
     il secondo è l' open mode del file che può essere "r", "n", "c" or "w" per sola 
     lettura, nuovo (implica lettura-scrittura, e 
     molto probabilmente troncherà un database 
     esistente con lo stesso nome), crea (implica 
     lettura-scrittura, e non troncherà un database 
     esistente con lo stesso nome) e lettura-scrittura rispettivamente. 
    </para>
    <para>
     Restituisce un identifier da passare alle altre funzioni DBM in caso di 
     successo, o &false; se fallisce.
    </para>
    <para>
     Se è usato il supporto NDBM, NDBM creerà filename.dir e filename.pag files. 
     GDBM usa solo un file, in quanto fa l' internal flat-file support, 
     e il Berkeley DB crea un
     <filename>filename.db</filename> file. Da notare che PHP fa il suo file 
     locking in aggiunta a quello che eventualmente potrebbe fare la stessa 
     libreria DBM. PHP non cancella i files 
     <filename>.lck</filename> che crea. Semplicemente usa questi 
     files come fixed inodes su cui fare il file locking. Per maggiori informazioni 
     sui files DBM, guarda le pagine del tuo manuale UNIX, o scarica
     <ulink url="&url.gdbm;">GNU's GDBM</ulink>.
    </para>
    &note.sm.uidcheck;
   </refsect1>
  </refentry>

  <refentry id="function.dbmclose">
   <refnamediv>
    <refname>dbmclose</refname>
    <refpurpose>Chiude un database dbm</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>bool</type><methodname>dbmclose</methodname>
      <methodparam><type>int</type><parameter>dbm_identifier</parameter></methodparam>
     </methodsynopsis>
    <para>
     Sblocca e chiude il database specificato.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmexists">
   <refnamediv>
    <refname>dbmexists</refname>
    <refpurpose>
     Dice se esiste un valore per una chiave in un database DBM
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>bool</type><methodname>dbmexists</methodname>
      <methodparam><type>int</type><parameter>dbm_identifier</parameter></methodparam>
      <methodparam><type>string</type><parameter>key</parameter></methodparam>
     </methodsynopsis>
    <para>
     Restituisce &true; se c'è un valore associato con la 
     <parameter>key</parameter>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmfetch">
   <refnamediv>
    <refname>dbmfetch</refname>
    <refpurpose>
     Estrae un valore per una chiave da un database DBM 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>dbmfetch</methodname>
      <methodparam><type>int</type><parameter>dbm_identifier</parameter></methodparam>
      <methodparam><type>string</type><parameter>key</parameter></methodparam>
     </methodsynopsis>
    <para>
     Restituisce il valore associato con <parameter>key</parameter>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbminsert">
   <refnamediv>
    <refname>dbminsert</refname>
    <refpurpose>
     Inserisce un valore per una chiave in un database DBM
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>dbminsert</methodname>
      <methodparam><type>int</type><parameter>dbm_identifier</parameter></methodparam>
      <methodparam><type>string</type><parameter>key</parameter></methodparam>
      <methodparam><type>string</type><parameter>value</parameter></methodparam>
     </methodsynopsis>
    <para>
     Aggiunge il valore al database con la chiave specificata.
    </para>
    <para>
     Restituisce -1 se il database è stato aperto in modalità read-only 
     (sola lettura), 0 se l'inserimento è andato a buon fine, e 1 se la chiave 
     specificata già esiste. (Per sostituire il valore, usa <function>dbmreplace</function>.)
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmreplace">
   <refnamediv>
    <refname>dbmreplace</refname>
    <refpurpose>
     Sostituisce il valore per una chiave in un database DBM
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>int</type><methodname>dbmreplace</methodname>
      <methodparam><type>int</type><parameter>dbm_identifier</parameter></methodparam>
      <methodparam><type>string</type><parameter>key</parameter></methodparam>
      <methodparam><type>string</type><parameter>value</parameter></methodparam>
     </methodsynopsis>
    <para>
     Sostituisce il valore per la chiave specificata nel database.
    </para>
    <para>
     Aggiungerà inoltre la chiave al database se la stessa non 
     esisteva già.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmdelete">
   <refnamediv>
    <refname>dbmdelete</refname>
    <refpurpose>
     Cancella il valore per una chiave da un database DBM
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>bool</type><methodname>dbmdelete</methodname>
      <methodparam><type>int</type><parameter>dbm_identifier</parameter></methodparam>
      <methodparam><type>string</type><parameter>key</parameter></methodparam>
     </methodsynopsis>
    <para>
     Cancella il valore per <parameter>key</parameter> nel database.
    </para>
    <para>
     Restituisce &false; se la chiave non esisteva nel database.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmfirstkey">
   <refnamediv>
    <refname>dbmfirstkey</refname>
    <refpurpose>
     Recupera la prima chiave da un database DBM
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>dbmfirstkey</methodname>
      <methodparam><type>int</type><parameter>dbm_identifier</parameter></methodparam>
     </methodsynopsis>
    <para>
     Restituisce la prima chiave nel database. Da notare che nessun 
     ordine particolare è garantito dal momento che il database potrebbe 
     essere stato costruito usando una hash-table, che non garantisce nessun ordine.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmnextkey">
   <refnamediv>
    <refname>dbmnextkey</refname>
    <refpurpose>
     Recupera la chiave successiva da un database DBM</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>dbmnextkey</methodname>
      <methodparam><type>int</type><parameter>dbm_identifier</parameter></methodparam>
      <methodparam><type>string</type><parameter>key</parameter></methodparam>
     </methodsynopsis>
    <para>
     Restituisce la chiave successiva dopo <parameter>key</parameter>. Chiamando la funzione 
     <function>dbmfirstkey</function> seguita da successive chiamate alla funzione 
     <function>dbmnextkey</function> è possibile visionare ciascuna coppia key/value 
     nel database DBM. Per esempio: 
     <example>
      <title>Esaminare ogni coppia key/value in un database DBM</title>
      <programlisting role="php">
<![CDATA[
$key = dbmfirstkey ($dbm_id);
while ($key) {
    echo "$key = " . dbmfetch ($dbm_id, $key) . "\n";
    $key = dbmnextkey ($dbm_id, $key);
}
]]>
     </programlisting>
    </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dblist">
   <refnamediv>
    <refname>dblist</refname>
    <refpurpose>
     Descrive la libreria DBM-compatibile in uso.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>string</type><methodname>dblist</methodname>
      <void/>
     </methodsynopsis>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
