<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: cbe13b0842d4094c0a837c669b5dfaab9b66ede1 Maintainer: khelaz Status: ready -->
<!-- Reviewed: no Maintainer: cucinato -->

<refentry xml:id="closure.bindto" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Closure::bindTo</refname>
  <refpurpose>
   Duplica la closure con una nuova associazione all'oggetto e alla visibilità della classe
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>Closure</type><methodname>Closure::bindTo</methodname>
   <methodparam><type>object</type><parameter>newthis</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>newscope</parameter>
   <initializer>'static'</initializer></methodparam>
  </methodsynopsis>
  <para>
   Crea e restituisce una nuova <link linkend="functions.anonymous">funzione
   anonima</link> come questa con lo stesso corpo e con le stesse variabili associate, ma
   possibilmente con un altro oggetto associato e una nuova visibilità della classe.
  </para>

  <para>
   “L'oggetto associato” determina il valore che avrà <literal>$this</literal>
   nel corpo della funzione e nella “visibilità della classe” e scope represents a class
   which determines which private and protected members the anonymous
   function will be able to access. Namely, the members that will be
   visible are the same as if the anonymous function were a method of
   the class given as value of the <parameter>newscope</parameter>
   parameter.
  </para>

  <para>
   Le closures statiche non possono avere nessun oggetto associato (il valore del parametro
   <parameter>newthis</parameter> deve essere &null;), ma questa funzione può
    comunque essere utilizzata per cambiare la loro visibilità..
  </para>

  <para>
   This function will ensure that for a non-static closure, having a bound
   instance will imply being scoped and vice-versa. To this end,
   non-static closures that are given a scope but a &null; instance are made
   static and non-static non-scoped closures that are given a non-null
   instance are scoped to an unspecified class.
  </para>

  <note>
   <para>
    Se hai soltanto intenzione di duplicare la funzione anonima, invece puoi usare la
    <link linkend="language.oop5.cloning">clonazione</link>.
   </para>
  </note>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>newthis</parameter></term>
    <listitem>
     <para>
      The object to which the given anonymous function should be bound, or
      &null; for the closure to be unbound. 
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>newscope</parameter></term>
    <listitem>
     <para>
      The class scope to which associate the closure is to be associated, or
      'static' to keep the current one. If an object is given, the type of the
      object will be used instead. This determines the visibility of protected
      and private methods of the bound object.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Restituisce un nuovo oggetto <classname>Closure</classname> creato.
   &return.falseforfailure;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Esempio di <function>Closure::bindTo</function></title>
   <programlisting role="php">
<![CDATA[
<?php

class A {
    function __construct($val) {
        $this->val = $val;
    }
    function getClosure() {
        //restituisce la closure associata con il suo oggetto e con la sua visibilità
        return function() { return $this->val; };
    }
}

$ob1 = new A(1);
$ob2 = new A(2);

$cl = $ob1->getClosure();
echo $cl(), "\n";
$cl = $cl->bindTo($ob2);
echo $cl(), "\n";
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
1
2
]]>
   </screen>
  </example>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="functions.anonymous">Funzioni anonime</link></member>
   <member><methodname>Closure::bind</methodname></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
