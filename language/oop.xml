 <chapter id="oop">
  <title>Classi ed Oggetti</title>

  <sect1 id="keyword.class">
   <title><literal>class</literal></title>
   <para>
    Una classe &egrave; una collezione di variabili e funzioni che 
    ne fanno uso. Una classe viene definita utilizzando la seguente sintassi:
 
    <informalexample>
     <programlisting role="php">
&lt;?php
class Carrello {
    var $articoli;  // Articoli nel carrello della spesa
   
    // Aggiungi $num articoli di $artnr al carrello
 
    function aggiungi_articoli ($artnr, $num) {
        $this->articoli[$artnr] += $num;
    }
   
    // Elimina $num articoli di $artnr  dal carrello
 
    function rimuovi_articoli ($artnr, $num) {
        if ($this->articoli[$artnr] > $num) {
            $this->articoli[$artnr] -= $num;
            return true;
        } else {
            return false;
        }   
    }
}
?>
     </programlisting>
    </informalexample>
   </para>
 
   <para>
    Ci&ograve; definisce una classe chiamata Carrello che consiste in un 
    vettore associativo di articoli e di due funzioni per aggiungere e rimuovere
    gli articoli nel carrello stesso.
   </para>
   <para>
    Le classi sono tipi, ovvero, sono schemi per variabili.
    Per utilizzarle occorre crearne una variabile istanza del tipo (classe) desiderato tramite l'operatore new.
   </para>
 
   <informalexample>
    <programlisting role="php">
 $carrello = new Carrello;
 $carrello->aggiungi_articoli("10", 1);
    </programlisting>
   </informalexample>
 
   <para>
    Questo codice crea un oggetto $carrello della classe Carrello. La funzione
    aggiungi_articoli() di questo oggetto &egrave; eseguita per aggiungere un articolo
    "10" al carrello. </para><para> Le classi possono essere estensioni di altre classi. 
    La classe estesa o derivata possiede tutte le variabili e le funzioni della classe base oltre alle 
    variabili e funzioni definite nell'estensione. Si ottiene ci&ograve; utilizzando la parola chiave extends.
    L'ereditariet&agrave; multipla non &egrave; supportata.
   </para>
 
   <informalexample>
    <programlisting role="php">
class Carrello_Personale extends Carrello {
    var $proprietario;
  
    function imposta_proprietario ($nome) {
        $this->proprietario = $nome;
    }
}
    </programlisting>
   </informalexample>
 
   <para>
    Questo codice definisce una classe Carrello_Personale che possiede tutte
    le variabili e funzioni della Carrello pi&ugrave; la variabile 
    proprietario e la funzione imposta_proprietario(). Creando una variabile
    istanza della classe Carrello_Personale &egrave; possibile impostare ed ottenere il nome
    del proprietario. &Egrave; comunque possibile utilizzare le funzioni della classe Carrello
    nella classe Carrello_Personale: 
   </para>
 
   <informalexample>
    <programlisting role="php">
$ncarrello = new Carrello_Personale;    // Creiamo un carrello personale
$ncarrello->imposta_proprietario ("kris"); // Imposta il nome del proprietario
print $ncarrello->proprietario;        // stampa il nome del proprietario del carrello
$ncarrello->aggiungi_articoli ("10", 1); // (funzionalit&agrave; eredit&agrave; dalla classe Carrello)
    </programlisting>
   </informalexample>
  
   <para>
    All'interno delle funzioni di una classe, la variabile $this significa questo oggetto.
    Per accedere ad una variabile o funzione chiamata prova, dall'interno dell'oggetto corrente
    bisogna utilizzare $this->prova.
   </para>
   <para>
    I costruttori sono funzioni in una classe che sono eseguite automaticamente
    quando viene creata una nuova istanza della classe stessa.
    Una funzione diventa un costruttore quando &egrave; definita con lo stesso nome della classe.
   </para>
 
   <informalexample>
    <programlisting role="php">
class Auto_Carrello extends Carrello {
    function Auto_Carrello () {
        $this->aggiungi_articoli ("10", 1);
    }
}
    </programlisting>
   </informalexample>
 
   <para>
    Questo codice definisce una classe Auto_Carrello la quale &egrave; un Carrello pi&ugrave; un
    costruttore il quale inizializza il carrello con un articolo numero "10" ogni volta che una
    nuova variabile istanza della Auto_Carrello &egrave; creata con "new". I costruttori possono
    anche avere argomenti, questi argomenti possono essere opzionali, caratteristica che li rende molto
    utili.
   </para>
 
   <informalexample>
    <programlisting role="php">
class Costruttori_Carrello extends Carrello {
    function Costruttori_Carrello ($articoli = "10", $num = 1) {
        $this->aggiungi_articoli ($articoli, $num);
    }
}
 
// Acquista le stesse vecchie cose.
 
$carrello_standard   = new Costruttori_Carrello;
 
// Acquista realmente...
 
$carrello_differente = new Costruttori_Carrello ("20", 17);
    </programlisting>
   </informalexample>
 
   <caution>
    <simpara>
     Per le classi derivate, il costruttore della classe genitore non &egrave;
     eseguito automaticamente durante l'esecuzione del costruttore. 
    </simpara> 
   </caution>
  </sect1>
 
 </chapter>
 
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 -->
