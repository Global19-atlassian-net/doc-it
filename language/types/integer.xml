<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 371a80eac9b930d2c442df07d5cd1622bc9c6e96 Maintainer: cucinato Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="language.types.integer">
 <title>Interi</title>
 
 <simpara>
  Un <type>integer</type> è un numero che appartiene all'insieme
  &#8484; = {..., -2, -1, 0, 1, 2, ...}.
 </simpara>
  
 <para>
  Vedere anche:
 </para>

 <itemizedlist>
  <listitem>
   <simpara>
    <link linkend="ref.gmp">Interi a lungezza arbitraria / GMP</link>
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <link linkend="language.types.float">Numeri in virgola mobile</link>
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <link linkend="ref.bc">Precisione arbitraria / BCMath</link>
   </simpara>
  </listitem>
 </itemizedlist>

 <sect2 xml:id="language.types.integer.syntax">
  <title>Syntax</title>

  <simpara>
   Gli <type>Integer</type> possono essere specificati nelle notazioni decimale (base 10), esadecimale
   (base 16), ottale (base 8) o binario (base 2), opzionalmente preceduti da un segno
   (- o +).
  </simpara>

  <para>
   Gli <type>integer</type> letterali binari sono disponibili da PHP 5.4.0. 
  </para>

  <para>
   Per usare la notazione ottale, anteporre uno <literal>0</literal> (zero) al numero.
   Per usare la notazione esadecimale, anteporre <literal>0x</literal>.
   Per usare la notazione binaria, anteporre <literal>0b</literal>.
  </para>

  <example>
   <title>Interi letterali</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1234; // numero decimale
$a = -123; // numero negativo
$a = 0123; // numero ottale (equivalente a 83 decimale)
$a = 0x1A; // numero esadecimale (equivalente a 26 decimale)
?>
]]>
   </programlisting>
  </example>

  <para>
   Formalmente, la struttura di un <type>integer</type> letterale è:
  </para>
 
  <informalexample>
   <programlisting>
<![CDATA[
decimal     : [1-9][0-9]*
            | 0

hexadecimal : 0[xX][0-9a-fA-F]+

octal       : 0[0-7]+

binary      : 0b[01]+

integer     : [+-]?decimal
            | [+-]?hexadecimal
            | [+-]?octal
            | [+-]?binary
]]>
   </programlisting>
  </informalexample>

  <para>
   La dimensione di un <type>integer</type> dipende dalla piattaforma, anche se il valore massimo tipico
   è di circa due miliardi (corrispondente a 32 bit col segno).
   Le piattaforme a 64 bit hanno normalmente un valore massimo di circa 9E18. PHP
   non supporta gli <type>integer</type> senza segno. La dimensione di un <type>integer</type>
   può essere determinata usando la costante <constant>PHP_INT_SIZE</constant>, e il
   valore massimo usando la costante <constant>PHP_INT_MAX</constant> a partire da
   PHP 4.4.0 e PHP 5.0.5.
  </para>

  <warning>
   <para>
    If an invalid digit is given in an octal <type>integer</type> (i.e. 8 or 9),
    the rest of the number is ignored.
   </para>

   <example>
    <title>Octal weirdness</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(01090); // 010 octal = 8 decimal
?>
]]>
    </programlisting>
   </example>
  </warning>
 </sect2>

 <sect2 xml:id="language.types.integer.overflow">
  <title>Integer overflow</title>

  <para>
   Se PHP incontra un numero oltre i limiti del tipo <type>integer</type>,
   questo verrà interpretato con un <type>float</type>. Allo stesso modo,
   un'operazione che restituisce un numero oltre i limiti del tipo
   <type>integer</type> restituirà invece un <type>float</type>.
  </para>

  <example>
   <title>Overflow di interi in un sistema a 32 bit</title>
   <programlisting role="php">
<![CDATA[
<?php
$large_number = 2147483647;
var_dump($large_number);                     // int(2147483647)

$large_number = 2147483648;
var_dump($large_number);                     // float(2147483648)

$million = 1000000;
$large_number =  50000 * $million;
var_dump($large_number);                     // float(50000000000)
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Overflow di interi in un sistema a 64 bit</title>
   <programlisting role="php">
<![CDATA[
<?php
$large_number = 9223372036854775807;
var_dump($large_number);                     // int(9223372036854775807)

$large_number = 9223372036854775808;
var_dump($large_number);                     // float(9.2233720368548E+18)

$million = 1000000;
$large_number =  50000000000000 * $million;
var_dump($large_number);                     // float(5.0E+19)
?>
]]>
   </programlisting>
  </example>
  
  <para>
   Non esiste un operatore di divisione <type>integer</type> in PHP.
   <literal>1/2</literal> produce il <type>float</type> <literal>0.5</literal>.
   Il valore può essere convertito in un <type>integer</type> per arrotondarlo verso il basso, oppure
   la funzione <function>round</function> fornisce un controllo più preciso sull'arrotondamento.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(25/7);         // float(3.5714285714286) 
var_dump((int) (25/7)); // int(3)
var_dump(round(25/7));  // float(4) 
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.types.integer.casting">
  <title>Convertire in intero</title>

  <simpara>
   Per convertire esplicitamente un valore in <type>integer</type>, usare o
   <literal>(int)</literal> oppure <literal>(integer)</literal>. Comunque, nella
   maggior parte dei case questo non è necessario, in quanto un valore verrà automaticamente
   convertito se un operatore, fuinzione o struttura di controllo richiede un 
   argomento <type>integer</type>. Un valore può essere convertito in
   <type>integer</type> anche con la funzione <function>intval</function>.
  </simpara>

  <simpara>
   Vedere anche: <link linkend="language.types.type-juggling">manipolazione dei tipi</link>.
  </simpara>
   
  <sect3 xml:id="language.types.integer.casting.from-boolean">
   <title>Dai <link linkend="language.types.boolean">booleani</link></title>

   <simpara>
    &false; corrisponde a <literal>0</literal> (zero), e &true; a
    <literal>1</literal> (uno).
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-float">
   <title>
    From <link linkend="language.types.float">floating point numbers</link>
   </title> 

   <simpara>
    When converting from <type>float</type> to <type>integer</type>, the number
    will be rounded <emphasis>towards zero</emphasis>.
   </simpara>
    
   <para>
    If the float is beyond the boundaries of <type>integer</type> (usually
    <literal>+/- 2.15e+9 = 2^31</literal> on 32-bit platforms and
    <literal>+/- 9.22e+18 = 2^63</literal> on 64-bit platforms), the result is
    undefined, since the <type>float</type> doesn't have enough precision to
    give an exact <type>integer</type> result. No warning, not even a notice
    will be issued when this happens!
   </para>
    
   <warning>
    <para>
     Never cast an unknown fraction to <type>integer</type>, as this can
     sometimes lead to unexpected results.
    </para>

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo (int) ( (0.1+0.7) * 10 ); // echoes 7!
?>
]]>
     </programlisting>
    </informalexample>
    
    <para>
     See also the <link linkend="warn.float-precision">warning about float
     precision</link>.
    </para>
   </warning>
  </sect3>
   
  <sect3 xml:id="language.types.integer.casting.from-string">
   <title>From strings</title>

   <simpara>
    See <link linkend="language.types.string.conversion">String conversion to
    numbers</link>
   </simpara>
  </sect3>
   
  <sect3 xml:id="language.types.integer.casting.from-other">
   <title>From other types</title>

   <caution>
    <simpara>
     The behaviour of converting to <type>integer</type> is undefined for other
     types. Do <emphasis>not</emphasis> rely on any observed behaviour, as it
     can change without notice.
    </simpara>
   </caution>
  </sect3>

 </sect2>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
