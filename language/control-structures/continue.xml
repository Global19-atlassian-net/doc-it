<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 0d928cd430ddf3e9aa760f8aaaebd66e21d1eab9 Maintainer: butera Status: ready -->

<sect1 xml:id="control-structures.continue" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>continue</literal></title>
 <simpara>
  <literal>continue</literal> è impiegato all'interno delle strutture di iterazione
  per saltare il resto del ciclo corrente e riprendere l'esecuzione dalla verifica
  della condizione di controllo e quindi dall'inizio dell'iterazione successiva.
 </simpara>
 <note>
  <simpara>
   Si noti che in PHP la struttura
   <link linkend="control-structures.switch">switch</link> è
   considerata una struttura di iterazione ai fini del comando
   <literal>continue</literal>.
  </simpara>
 </note>
 <simpara>
  <literal>continue</literal> accetta un argomento numerico facoltativo che indica
  il numero di livelli di strutture iterative annidate per i quali si intende concludere
  il ciclo attuale.
 </simpara>
 <note>
  <para>
   <literal>continue 0;</literal> e <literal>continue 1;</literal> equivalgono
   a <literal>continue;</literal>.
  </para>
 </note>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
while (list($key, $value) = each($arr)) {
    if (!($key % 2)) { // salta i numeri dispari
        continue;
    }
    do_something_odd($value);
}

$i = 0;
while ($i++ < 5) {
    echo "Esterno<br />\n";
    while (1) {
        echo "Medio<br />\n";
        while (1) {
            echo "Interno<br />\n";
            continue 3;
        }
        echo "Questa frase non viene mai mostrata.<br />\n";
    }
    echo "Neanche questa.<br />\n";
}
?>
]]>
   </programlisting>
   </informalexample>
  </para>
  <para>
   Omettere il punto e virgola dopo <literal>continue</literal> può creare
   confusione. Segue un esempio di cosa non andrebbe fatto.
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
for ($i = 0; $i < 5; ++$i) {
    if ($i == 2)
        continue
    print "$i\n";
}
?>
]]>
    </programlisting>
    <para>
     Ci si potrebbe aspettare come risultato il seguente :
    </para>
    <screen>
<![CDATA[
0
1
3
4
]]>
    </screen>
    <para>
     ma questo script produrrà in output :
    </para>
    <screen>
<![CDATA[
2
]]>
    </screen>
    <para>
     poiché il valore di ritorno della funzione <function>print</function>
     è <literal>int(1)</literal>, e sarà interpretato come l'argomento
     facoltativo citato in precedenza.
    </para>
   </informalexample>
  </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
