<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: n/a Maintainer: perugini Status: ready -->
<chapter xml:id="language.basic-syntax" xmlns="http://docbook.org/ns/docbook">
  <title>Sintassi Fondamentale</title>
   
  <sect1 xml:id="language.basic-syntax.phpmode">
   <title>Modi per uscire dalla modalità HTML</title>  
   <para>
    Quando il PHP inizia a esaminare un file, cerca i tag di apertura e di chiusura,
    che indicano dove iniziare e terminare l'interpretazione del codice.
    Questa tecnica permette al PHP di essere incorporato in tutte
    le tipologie di documenti, poichè ogni cosa esterna ai tag
    di apertura e di chiusura viene ignoarat dal parser PHP.
    Il più delle volte si vedrà codice PHP racchiuso in documenti HTML,
    come nel seguente esempio.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<p>This is going to be ignored.</p>
<?php echo 'While this is going to be parsed.'; ?>
<p>This will also be ignored.</p>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Si possono usare anche strutture più avanzate:
    <example>
    <title>Escape avanzato</title>
    <programlisting role="php">
<![CDATA[
<?php
if ($expression) {
    ?>
    <strong>This is true.</strong>
    <?php
} else {
    ?>
    <strong>This is false.</strong>
    <?php
}
?>
]]>
     </programlisting>
    </example>
    Questo codice funziona come atteso, perchè quando il PHP trova il tag di chiusura ?&gt;,
    inizia a visualizzare tutto ciò che incontra sino a quando non si raggiunge
    un'altro tag di apertura. L'esempio è semplificato, ovviamente,
    ma nella visualizzazzione di grossi blocchi di testo uscire dalla
    modalità di parsing del codice PHP è generalmente più efficiente che inviare il tutto
    tramite <function>echo</function> o
    <function>print</function>.
   </para>
  <para> 
    Esistono 4 set di tag che possono essere utilizzati per delimitare
    blocchi di codice PHP. Soltanto due di questi (&lt;?php. . .?&gt; e &lt;script language="php"&gt;. . .&lt;/script&gt;)
    sono sempre disponibili.
    Gli altri due sono i tag brevi e i tag stile <productname>ASP</productname>
    e possono essere attivati o disattivati tramite il file di configurazione
    &php.ini;. Sebbene i tag brevi o quelli in stile <productname>ASP</productname>
    possano essere pratici, questi sono meno
    portabili e, in generale, sconsigliati.
    <note>
     <para>
      Occorre notare che se si intende inserire codice
      PHP all'interno di testi XMl o XHTML, occorre utilizzare 
      &lt;?php ?&gt; per essere conformi allo standard XML.
     </para>
    </note>
   </para>
   <para>
    <example>
     <title>Tag di apertura e di chiusura</title>
     <programlisting role="php">
<![CDATA[   
1.  <?php echo 'se si vogliono produrre documenti XHTML o XML, si utilizzi questo modo'; ?>
2.  <script language="php">
        echo 'alcuni editor (tipo FrontPage) non 
               amano le istruzioni di elaborazione';
    </script>

3.  <? echo 'questo è il più semplice, ovvero come istruzione SGML'; ?>
    <?= espressione ?>  Questa è un'abbreviazione per "<? echo espressione ?>"
 

4.  <% echo 'Opzionalmente puoi utilizzare tag nello stile ASP'; %>
    <%= $variable; # Questo &egrave; una abbreviazione per "<% echo ..." %>
]]>
      </programlisting>
     </example>
    </para>

    <para>
     Sebbene i tag utilizzati negli esempi 1 e 2 siano sempre
     disponibili, l'esempio uno rappresenta la situazione più comunemente 
     utilizzata, e la più raccomandata dei due.
    </para> 
    <para>
     I tag brevi (esempio tre) sono disponibili soltanto se sono stati
     abilitati tramite il parametro <link linkend="ini.short-open-tag">short_open_tag</link>
     del &php.ini;, oppure se il PHP è stato configurato con
     <option>--enable-short-tags</option>.
     <note>
      <para>
       Se si utilizza il PHP 3 si può anche avere disponibili i tag brevi tramite
       la funzione <function>short_tags</function>. <emphasis>Questo
       vale solo per il PHP 3!</emphasis>
      </para>
    </note>
   </para>
   <para>
    I tag in stile <productname>ASP</productname> (esempio quattro) sono disponibili soltanto quando
    sono abilitati tramite il parametro 
    <link linkend="ini.asp-tags">asp_tags</link> del &php.ini;
    <note>
     <para>
      Il supporto per i tag nello stile <productname>ASP</productname> è stato aggiunto nella versione 3.0.4.
      </para>
     </note>
    </para>
    <para>
     <note>
     <para>
      L'utilizzo dei tag brevi dovrebbe essere evitato nello sviluppo
      di applicazioni o librerie destinate alla distribuzione o destinati
      a server di produzione PHP di cui non si ha il controllo poichè questi
      tag potrebbero non essere attivi sul server di destinazione. Per avere maggiore
      portabilità, codice redistribuibile, occorre essere certi di non utilizzare i tag brevi.
     </para>
    </note>
   </para>
   </sect1>

   <sect1 xml:id="language.basic-syntax.instruction-separation">
    <title>Separazione delle istruzioni</title>
 
    <para>
     Come in C od in Perl, il PHP richiede che le istruzioni siano chiuse
     dal punto e virgola al termine di ogni istruzione. I tag di chiusura
     di un blocco di codice PHP implicano in automatico il punto e virgola;
     non occorre, pertanto, inserire il punto e virgola per chiudere l'ultima riga
     di un blocco PHP. Il tag di chiusura del blocco include il newline
     immediatamente seguente, se presente.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
    echo 'Questo &egrave; un test';
?>
<?php echo 'Questo &egrave; un test' ?>
]]>
      </programlisting>
     </informalexample>
     <note>
     <para>
      Il tag di chiusura di un blocco PHP alla fine di un file è opzionale,
      ed in alcuni casi è utile non utilizzarlo soprattutto quando si utilizza l'output buffering
      e le funzioni <function>include</function> o <function>require</function>.
     </para>
    </note>
    </para>
   </sect1>
   <sect1 xml:id="language.basic-syntax.comments">
    <title>Commenti</title>
   
    <para>
     Il PHP supporta i commenti dei linguaggi 'C', 'C++' e stile shell (stile Perl) di Unix. Per esempio:
     <informalexample>
      <programlisting role="php">
<![CDATA[ 
<?php
    echo 'Questo &egrave; un test'; // Questo &egrave; un commento su una linea nella stile c++ 
    /* Questo &egrave; un commento su pi&ugrave; linee
       ancora un'altra linea di commento */
    echo 'Questo &egrave; un altro test';
    echo 'Un ultimo test'; # Questo &egrave; un commento stile shell Unix 
?>
]]>
      </programlisting>
     </informalexample>
    </para>

    <simpara>
     Lo stile di commento su "una linea", attualmente commenta solo fino alla fine della linea
     o del blocco corrente di codice PHP.
     Questo significa che l'eventuale codice HTML posto dopo <literal>// ?&gt;</literal> sarà stampato:
     ?&gt; esce dalla modalità PHP e ritorna in modalità HTML, e quindi
     <literal>//</literal> non può influenzare quest'ultima.
     Se l'impostazione <link linkend="ini.asp-tags">asp_tags</link>
     è abilitata, il PHP si comporta allo stesso modo con <literal>// %&gt;</literal>.
     Tuttavia il tag <literal>&lt;/script&gt;</literal> non esce dalla modalità PHP nei commenti
     di una linea.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<h1>Questo &egrave; un <?# echo 'semplice';?> esempio.</h1>
<p>L'intestazione qui sopra dir&agrave; 'Questo &egrave; un esempio'.</p>
]]>
      </programlisting>
     </informalexample> 
    </para>
    <simpara>
     I commenti in stile C terminano alla prima occorrenza di <literal>*/</literal>.
     Occorre fare attenzione nel non annidare i commenti di stile C, situazione che si presenta
     quando si commentano larghi blocchi di codice.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
 /* 
    echo 'Questo &egrave; un test'; /* Questo commento causer&agrave; dei problemi */
 */
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   </sect1>
  </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
