<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.39 Maintainer: alan_dangelo  Status: ready -->
 <chapter id="language.references">
  <title>Spiegazioni sui riferimenti</title>

  <sect1 id="language.references.whatare">
   <title>Cosa sono i riferimenti</title>
   <simpara>
    I riferimenti in PHP sono il mezzo per accedere ad uno stesso contenuto di variabile 
    utilizzando diversi nomi. Non si sta parlando di puntatori come in C, ma di alias
    nella tabella dei simboli. Si noti che in PHP, il nome delle variabili e il loro contenuto 
    sono cose diverse, uno stesso contenuto infatti pu&ograve; avere nomi diversi.
    L'analogia pi&ugrave; prossima è quella con i nomi dei file e i file stessi in Unix -
    i nomi delle variabili sono come directory, mentre il contenuto delle variabili &egrave;
    il file stesso. I riferimenti possono essere pensati come hardlink del
    filesystem Unix.
   </simpara>
  </sect1>

  <sect1 id="language.references.whatdo">
   <title>Che cosa fanno i riferimenti</title>
   <para>
    I riferimenti permettono di creare due o più variabili che si riferiscono allo
    stesso contenuto. Questo significa, che scrivendo:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$a =& $b;
?>
]]>
     </programlisting>
    </informalexample>
    <varname>$a</varname> e <varname>$b</varname>
    puntano allo stesso contenuto.
    <note>
     <para>
      <varname>$a</varname> e <varname>$b</varname> sono completamente
      uguali, ma <varname>$a</varname> non è un puntatore a
      <varname>$b</varname> o vice versa,
      <varname>$a</varname> e <varname>$b</varname> puntano semplicemente nello
      stesso posto.
     </para>
    </note>
   </para>
   <note>
    <para>
     Se si copia una matrice contenete dei riferimenti, i valori non sono dereferenziati.
     Questo vale anche per le matrici passate per valore alle funzioni.
    </para>
   </note>
   <para>
   Questa sintassi si pu&ograve; usare con le funzioni, nella restituzione per riferimento,
   e con l'operatore <literal>new</literal> (da PHP 4.0.4 in poi):
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$bar =& new fooclass();
$foo =& find_var($bar);
?>
]]>
    </programlisting>
    </informalexample>
    </para>
    <note>
     <para>
     Se non si usa l'operatore <literal>&amp;</literal> l'oggeto appena creato
     viene copiato. Usando <literal>$this</literal> in una classe,
     opererà sulla sua istanza corrente. L'assegnazione senza
     <literal>&amp;</literal> copia perci&ograve; l'istanza (l'oggetto) e
     <literal>$this</literal> opera sulla copia, che non &egrave; sempre ciò che
     si desidera. Normalmente si lavora su una singola istanza di oggetto,
     sia per motivi di prestazioni che di consumo di memoria.
     </para>
     <para>
      Utilizzando l'operatore <literal>@</literal> con new, si <emphasis>sopprimono
      </emphasis> gli errori nel costruttore in questo modo
      <literal>@new</literal>, il metodo per&ograve; non funziona se si usa l'istruzione
      <literal>&amp;new</literal>. Questa è una limitazione dello Zend
      Engine e provoca un parser error.
     </para>
   </note>
   <warning>
    <para>
     Se si assegna un riferimento ad una varibile dichiarata <literal>global</literal>
     dall'interno di una funzione, il riferimento sarà visibile solo all'interno della funzione stessa.
     Si può evitare tutto ciò utilizzando la matrice <varname>$GLOBALS</varname>.
     <example>
      <title>Riferimenti di varibiali globali all'interno di una funzione</title>
      <programlisting role="php">
<![CDATA[
<?php
$var1 = "Example variable";
$var2 = "";
 
function global_references($use_globals)
{
    global $var1, $var2;
    if (!$use_globals) {
        $var2 =& $var1; // visible only inside the function
    } else {
        $GLOBALS["var2"] =& $var1; // visible also in global context
    }
}
 
global_references(false);
echo "var2 is set to '$var2'\n"; // var2 is set to ''
global_references(true);
echo "var2 is set to '$var2'\n"; // var2 is set to 'Example variable'
?>
]]>
      </programlisting>
     </example>
     Si pensi a <literal>global $var;</literal> come ad una scorciatoia per <literal>$var
     =&amp; $GLOBALS['var'];</literal>. Quindi assegnando altri riferimenti
     a <literal>$var</literal> si cambia soltanto il riferimento della variabile locale.
    </para>
   </warning>
   <note>
    <para>
     Se si assegna un valore ad una variabile con riferimenti in una istruzione
     <link linkend="control-structures.foreach">foreach</link>,
     anche la variabile a cui si fa riferimento sarà modificata.
     <example>
      <title>Riferimenti e istruzione foreach</title>
      <programlisting role="php">
<![CDATA[
<?php
$ref = 0;
$row =& $ref;
foreach (array(1, 2, 3) as $row) {
    // esegue qualcosa
}
echo $ref; // 3 - ultimo elemento dell'array
?>
]]>
      </programlisting>
     </example>
    </para>
   </note>
   <warning>
    <para>
     Spesso le matrici complesse sono copiate che referenziate. Il seguente
     esempio non gira come atteso.
     <example>
      <title>Riferimenti con matrici complesse</title>
      <programlisting role="php">
<![CDATA[
<?php
$top = array(
    'A' => array(),
    'B' => array(
        'B_b' => array(),
    ),
);
 
$top['A']['parent'] = &$top;
$top['B']['parent'] = &$top;
$top['B']['B_b']['data'] = 'test';
print_r($top['A']['parent']['B']['B_b']); // array()
?>
]]>
      </programlisting>
     </example>
    </para>
   </warning>
   <para>
    Il secondo utilizzo del riferimento è il passaggio di una variabile
    per riferimento. Questo si fa dichiarando una variabile locale di una funzione e
    una variabile nell'ambito della chiamata del riferimento con lo stesso contenuto. Esempio:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(&$var)
{
    $var++;
}

$a=5;
foo($a);
?>
]]>
     </programlisting>
    </informalexample>
    <varname>$a</varname> assume il valore 6. Questo accade perchè
    nella funzione <varname>foo</varname>, la variabile
    <varname>$var</varname> si riferisce allo stesso contenuto di
    <varname>$a</varname>. Si vedano le spiegazioni più dettagliate per <link
    linkend="language.references.pass">passaggio per riferimento</link>.
   </para>
   <simpara>
    Il terzo utilizzo del riferimento è il <link
    linkend="language.references.return">ritorno per riferimento</link>.
   </simpara>
  </sect1>

  <sect1 id="language.references.arent">
   <title>Cosa i riferimenti non sono</title>
   <para>
    Come detto prima, i riferimenti non sono puntatori. Questo significa, che
    il seguente costrutto non fà quello che ci si aspetterebbe:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(&$var)
{
    $var =& $GLOBALS["baz"];
}
foo($bar); 
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Nell'esempio <varname>$var</varname> in
    <varname>foo</varname> viene scambiato con
    <varname>$bar</varname> nella chiamata, e poi
    riscambiato con <varname>$GLOBALS["baz"]</varname>. Questo non è il modo
    per collegare <varname>$bar</varname> nell'ambito della chiamata con qualcos'altro
    usando il meccanismo di riferimento, poichè <varname>$bar</varname> non è
    disponibile nella funzione <varname>foo</varname> (è rappresentato da
    <varname>$var</varname>, ma <varname>$var</varname> possiede soltanto
    il contenuto della variabile e non il nome del valore collegato nella tabella
    dei simboli).
    Si può utilizzare <link linkend="language.references.return">restiture i
    riferimenti</link> per fare riferimenti a variabili selezionate dalla funzione.
   </simpara>
  </sect1>

  <sect1 id="language.references.pass">
   <title>Passaggio per riferimento</title>
   <para>
   Si può passare una variabile ad una funzione per riferimento, modificandone gli argomenti.
   La sintassi è la seguente:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(&$var)
{
    $var++;
}

$a=5;
foo($a);
// $a adesso è 6
?>
]]>
     </programlisting>
    </informalexample>
  Nota che non si usa il segno di riferimento nella chiamata della funzione, ma solo
  nella definizione. La definizione della funzione basta da sola
  per passare correttamente un argomento per riferimento.
  </para>
  <para>
  Le seguenti cose possono essere passate per riferimento:
   <itemizedlist>
    <listitem>
     <simpara>
      Variabili, es. <literal>foo($a)</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Operatore New, es. <literal>foo(new foobar())</literal>
     </simpara>
    </listitem>
    <listitem>
     <para>
      Riferimento restituito da una funazione, es.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function &bar()
{
    $a = 5;
    return $a;
}
foo(bar());
?>
]]>
     </programlisting>
    </informalexample>
    Vedi anche le spiegazioni sulla <link
    linkend="language.references.return">restituzione per riferimento</link>. 
     </para>
    </listitem>
  </itemizedlist>
  </para>
  <para>
  Qualunque altra cosa non dovrebbe essere passata per riferimento, poichè
  il risultato sarebbe indefinito. Per esempio, il seguente passaggio
  per riferimento non è valido:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function bar() // Nota l'assenza di &
{
    $a = 5;
    return $a;
}

foo(bar());
foo($a = 5); // Expressione: non una variabile
foo(5); // Constante: non una variabile
?>
]]>
     </programlisting>
    </informalexample>
    Questi requisiti sono validi per PHP 4.0.4 e seguenti.
  </para>
  </sect1>

  <sect1 id="language.references.return">
   <title>Restituzione per riferimento</title>
   <para>
    La restituzione per riferimento è utile quando si vuole usare una funzione
    per trovare quale variabile un riferimento dovrebbe limitare. Per
    restituire per riferimento, si usa questa sintassi:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function &find_var($param)
{
    ...codice...
    return $found_var;
}

$foo =& find_var($bar);
$foo->x = 2; 
?>
]]>
     </programlisting>
    </informalexample>
    In questo esempio, la proprietà dell'oggetto restituito dalla funzione
    <varname>find_var</varname> viene impostata, non la
    copia, come sarebbe stato senza l'uso della sintassi del riferimento.
   </para>
   <note>
    <simpara>
     Diversamente dal passaggio di un parametro, bisogna utilizzare
     <literal>&amp;</literal> in entrambi i posti - nella dichiarazione per indicare che
     si vuole restituire per riferimento, e non per copia come di consueto, 
     e per indicare nella chiamata, il collegamento del riferimento, piuttosto che l'usuale 
     assegnazione che verrebbe fatta per <varname>$foo</varname>.
     <literal>&amp;</literal> nella definizione delle funzioni è opzionale nei metodi delle
     <link linkend="keyword.class">classi</link>.
    </simpara>
   </note>
  </sect1>

  <sect1 id="language.references.unset">
   <title>Cancellare riferimenti</title>
   <para>
    Quando si cancella un riferimento, si rompe il collegamento tra il
    nome della variabile e il contenuto della variabile. Questo non significa
    che il contenuto della variabile venga distrutto. Per esempio:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b =& $a;
unset($a); 
?>
]]>
     </programlisting>
    </informalexample>
    non cancella <varname>$b</varname>, ma solo <varname>$a</varname>. 
   </para>
   <simpara>
    Di nuovo, può essere utile pensare a questo con un'analogia col comendo Unix
    <command>unlink</command>.
   </simpara>
  </sect1>

  <sect1 id="language.references.spot">
   <title>Spotting References</title>
   <simpara>
    Diversi costrutti in PHP sono implementati attraverso il meccanismo dei
    riferimenti, dove ogni cosa detta precedentemente, si applica anche a
    questi costrutti. Alcuni, come il passaggio e la
    restituzione per riferimento, sono stati menzionati sopra, gli  
    altri sono:
   </simpara>

   <sect2 id="references.global">
    <title>Il riferimento <literal>global</literal></title>
    <para>
     Quando si dichiara una variabile come <command>global $var</command> di fatto
     si crea un riferimento ad una variabile globale. Questo ha lo stesso significato,
     dell'espressione:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$var =& $GLOBALS["var"];
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Questo significa, per esempio, che cancellando <varname>$var</varname>
     non si cancella la variabile globale.
    </simpara>
   </sect2>

   <sect2 id="references.this">
    <title><literal>$this</literal></title>
    <simpara>
     In un metodo di un oggetto, <varname>$this</varname> è sempre un riferimento
     all'oggetto chiamante.
    </simpara>
   </sect2>
  </sect1>

 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
